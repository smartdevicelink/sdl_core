<?xml version="1.0" standalone="yes"?>

<!--
 * Copyright (c) 2016, Ford Motor Company
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of the Ford Motor Company nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE. -->


<interfaces name="SmartDeviceLink HMI API">

<interface name="Common" version="2.1.0" date="2019-03-18">

<enum name="Result">
    <element name="SUCCESS" value="0"/>
    <element name="UNSUPPORTED_REQUEST" value="1"/>
    <element name="UNSUPPORTED_RESOURCE" value="2"/>
    <element name="DISALLOWED" value="3"/>
    <element name="REJECTED" value="4"/>
    <element name="ABORTED" value="5"/>
    <element name="IGNORED" value="6"/>
    <element name="RETRY" value="7"/>
    <element name="IN_USE"  value="8"/>
    <element name="DATA_NOT_AVAILABLE" value="9"/>
    <element name="TIMED_OUT" value="10"/>
    <element name="INVALID_DATA" value="11"/>
    <element name="CHAR_LIMIT_EXCEEDED" value="12"/>
    <element name="INVALID_ID" value="13"/>
    <element name="DUPLICATE_NAME" value="14"/>
    <element name="APPLICATION_NOT_REGISTERED" value="15"/>
    <element name="WRONG_LANGUAGE" value="16"/>
    <element name="OUT_OF_MEMORY" value="17"/>
    <element name="TOO_MANY_PENDING_REQUESTS" value="18"/>
    <element name="NO_APPS_REGISTERED" value="19"/>
    <element name="NO_DEVICES_CONNECTED" value="20"/>
    <element name="WARNINGS" value="21"/>
    <element name="GENERIC_ERROR" value="22"/>
    <element name="USER_DISALLOWED" value="23"/>
    <element name="TRUNCATED_DATA" value="24"/>
    <element name="SAVED" value="25"/>
    <element name="READ_ONLY" value="26"/>
</enum>

<enum name="WindowType">
  <element name="MAIN">
    <description>
      This window type describes the main screen on a display.
    </description>
  </element>
  <element name="WIDGET">
    <description>
      A widget is a small window that the app can create to provide information and softbuttons for a quick app control.
    </description>
  </element>
</enum>

<enum name="PredefinedWindows">
  <element name="DEFAULT_WINDOW" value="0">
    <description>The default window is a main window pre-created on behalf of the app.</description>
  </element>
  <element name="PRIMARY_WIDGET" value="1">
    <description>The primary widget of the app.</description>
  </element>
</enum>

<enum name="TransportType">
  <description>Lists of the transport types used for device connection to HU.</description>
  <element name="BLUETOOTH"/>
  <element name="USB_IOS"/>
  <element name="USB_AOA"/>
  <element name="WIFI"/>
  <element name="CLOUD_WEBSOCKET"/>
</enum>

<enum name="ButtonName">
    <description>Defines the hard (physical) and soft (touchscreen) buttons available from SYNC</description>
    <element name="OK"/>
    <element name="PLAY_PAUSE"/>
    <element name="SEEKLEFT"/>
    <element name="SEEKRIGHT"/>
    <element name="TUNEUP"/>
    <element name="TUNEDOWN"/>
    <element name="PRESET_0"/>
    <element name="PRESET_1"/>
    <element name="PRESET_2"/>
    <element name="PRESET_3"/>
    <element name="PRESET_4"/>
    <element name="PRESET_5"/>
    <element name="PRESET_6"/>
    <element name="PRESET_7"/>
    <element name="PRESET_8"/>
    <element name="PRESET_9"/>
    <element name="CUSTOM_BUTTON"/>
    <element name="SEARCH"/>
      <!-- Climate Buttons -->
    <element name="AC_MAX" />
    <element name="AC" />
    <element name="RECIRCULATE" />
    <element name="FAN_UP" />
    <element name="FAN_DOWN" />
    <element name="TEMP_UP" />
    <element name="TEMP_DOWN" />
    <element name="DEFROST_MAX" />
    <element name="DEFROST" />
    <element name="DEFROST_REAR" />
    <element name="UPPER_VENT" />
    <element name="LOWER_VENT" />

    <!-- Radio Buttons -->
    <element name="VOLUME_UP" />
    <element name="VOLUME_DOWN" />
    <element name="EJECT" />
    <element name="SOURCE" />
    <element name="SHUFFLE" />
    <element name="REPEAT" />

    <!-- Navigation Subscription Buttons -->
    <element name="NAV_CENTER_LOCATION" />
    <element name="NAV_ZOOM_IN" />
    <element name="NAV_ZOOM_OUT" />
    <element name="NAV_PAN_UP" />
    <element name="NAV_PAN_UP_RIGHT" />
    <element name="NAV_PAN_RIGHT" />
    <element name="NAV_PAN_DOWN_RIGHT" />
    <element name="NAV_PAN_DOWN" />
    <element name="NAV_PAN_DOWN_LEFT" />
    <element name="NAV_PAN_LEFT" />
    <element name="NAV_PAN_UP_LEFT" />
    <element name="NAV_TILT_TOGGLE">
        <description>If supported, this toggles between a top-down view and an angled/3D view. If your app supports different, but substantially similar options, then you may implement those. If you don't implement these or similar options, do not subscribe to this button.</description>
    </element>
    <element name="NAV_ROTATE_CLOCKWISE" />
    <element name="NAV_ROTATE_COUNTERCLOCKWISE" />
    <element name="NAV_HEADING_TOGGLE">
        <description>If supported, this toggles between locking the orientation to north or to the vehicle's heading. If your app supports different, but substantially similar options, then you may implement those. If you don't implement these or similar options, do not subscribe to this button.</description>
    </element>
</enum>

<enum name="ButtonEventMode">
    <element name="BUTTONUP">
        <description>A button has been released up</description>
    </element>
    <element name="BUTTONDOWN">
        <description>A button has been pressed down</description>
    </element>
</enum>

<enum name="ButtonPressMode">
    <element name="LONG">
        <description>A button was released, after it was pressed for a long time. Actual timing is defined by head unit and may vary</description>
    </element>
    <element name="SHORT">
        <description>A button was released, after it was pressed for a short time. Actual timing is defined by head unit and may vary</description>
    </element>
</enum>

 <enum name="Language">
     <element name="EN-US" internal_name="EN_US">
      <description>English - US</description>
    </element>
    <element name="ES-MX" internal_name="ES_MX">
      <description>Spanish - Mexico</description>
    </element>
    <element name="FR-CA" internal_name="FR_CA">
      <description>French - Canada</description>
    </element>
    <element name="DE-DE" internal_name="DE_DE">
      <description>German - Germany</description>
    </element>
     <element name="ES-ES" internal_name="ES_ES">
      <description>Spanish - Spain</description>
    </element>
    <element name="EN-GB" internal_name="EN_GB">
      <description>English - GB</description>
    </element>
     <element name="RU-RU" internal_name="RU_RU">
      <description>Russian - Russia</description>
    </element>
     <element name="TR-TR" internal_name="TR_TR">
      <description>Turkish - Turkey</description>
    </element>
     <element name="PL-PL" internal_name="PL_PL">
      <description>Polish - Poland</description>
    </element>
     <element name="FR-FR" internal_name="FR_FR">
      <description>French - France</description>
    </element>
     <element name="IT-IT" internal_name="IT_IT">
      <description>Italian - Italy</description>
    </element>
     <element name="SV-SE" internal_name="SV_SE">
      <description>Swedish - Sweden</description>
    </element>
     <element name="PT-PT" internal_name="PT_PT">
      <description>Portuguese - Portugal</description>
    </element>
     <element name="NL-NL" internal_name="NL_NL">
      <description>Dutch (Standard) - Netherlands</description>
    </element>
     <element name="EN-AU" internal_name="EN_AU">
      <description>English - Australia</description>
    </element>
     <element name="ZH-CN" internal_name="ZH_CN">
      <description>Mandarin - China</description>
    </element>
     <element name="ZH-TW" internal_name="ZH_TW">
      <description>Mandarin - Taiwan</description>
    </element>
     <element name="JA-JP" internal_name="JA_JP">
      <description>Japanese - Japan</description>
    </element>
     <element name="AR-SA" internal_name="AR_SA">
      <description>Arabic - Saudi Arabia</description>
    </element>
     <element name="KO-KR" internal_name="KO_KR">
      <description>Korean - South Korea</description>
    </element>
     <element name="PT-BR" internal_name="PT_BR">
      <description>Portuguese - Brazil</description>
    </element>
     <element name="CS-CZ" internal_name="CS_CZ">
      <description>Czech - Czech Republic</description>
    </element>
     <element name="DA-DK" internal_name="DA_DK">
      <description>Danish - Denmark</description>
    </element>
     <element name="NO-NO" internal_name="NO_NO">
      <description>Norwegian - Norway</description>
    </element>
    <element name="NL-BE" internal_name="NL_BE">
      <description>Dutch (Flemish) - Belgium</description>
    </element>
    <element name="EL-GR" internal_name="EL_GR">
      <description>Greek - Greece</description>
    </element>
    <element name="HU-HU" internal_name="HU_HU">
      <description>Hungarian - Hungary</description>
    </element>
    <element name="FI-FI" internal_name="FI_FI">
      <description>Finnish - Finland</description>
    </element>
    <element name="SK-SK" internal_name="SK_SK">
      <description>Slovak - Slovakia</description>
    </element>
    <element name="EN-IN" internal_name="EN_IN">
      <description>English - India</description>
    </element>
    <element name="TH-TH" internal_name="TH_TH">
      <description>Thai - Thailand</description>
    </element>
    <element name="EN-SA" internal_name="EN_SA">
      <description>English - Middle East</description>
    </element>
    <element name="HE-IL" internal_name="HE_IL">
      <description>Hebrew - Israel</description>
    </element>
    <element name="RO-RO" internal_name="RO_RO">
      <description>Romanian - Romania</description>
    </element>
    <element name="UK-UA" internal_name="UK_UA">
      <description>Ukrainian - Ukraine</description>
    </element>
    <element name="ID-ID" internal_name="ID_ID">
      <description>Indonesian - Indonesia</description>
    </element>
    <element name="VI-VN" internal_name="VI_VN">
      <description>Vietnamese - Vietnam</description>
    </element>
    <element name="MS-MY" internal_name="MS_MY">
      <description>Malay - Malaysia</description>
    </element>
    <element name="HI-IN" internal_name="HI_IN">
      <description>Hindi - India</description>
    </element>
</enum>

<enum name="SoftButtonType">
  <description>Contains information about the SoftButton capabilities.</description>
  <element name="TEXT" internal_name="SBT_TEXT"/>
  <element name="IMAGE" internal_name="SBT_IMAGE"/>
  <element name="BOTH" internal_name="SBT_BOTH"/>
</enum>

<enum name="SystemAction">
  <description>Enumeration that describes system actions that can be triggered.</description>
  <element name="DEFAULT_ACTION">
    <description>Default action occurs.  Standard behavior (e.g. SoftButton clears overlay).</description>
  </element>
  <element name="STEAL_FOCUS">
    <description>The calling app's dialog or related event should clear and the app should be brought into HMI_FULL.</description>
  </element>
  <element name="KEEP_CONTEXT">
    <description>Current system context is maintained.  An overlay is persisted even though a SoftButton has been pressed and the notification sent.</description>
  </element>
</enum>

<enum name="AppHMIType">
  <description>Enumeration listing possible app types.</description>
  <element name="DEFAULT" />
  <element name="COMMUNICATION" />
  <element name="MEDIA" />
  <element name="MESSAGING" />
  <element name="NAVIGATION" />
  <element name="INFORMATION" />
  <element name="SOCIAL" />
  <element name="BACKGROUND_PROCESS" />
  <element name="TESTING" />
  <element name="SYSTEM" />
  <element name="PROJECTION" />
  <element name="REMOTE_CONTROL" />
</enum>

<enum name="CloudConnectionStatus">
  <element name="NOT_CONNECTED">
    <description>No active websocket session or ongoing connection attempts</description>
  </element>
  <element name="CONNECTED">
    <description>Websocket is active</description>
  </element>
  <element name="RETRY">
    <description>Websocket connection failed and retry attempts are ongoing</description>
  </element>
</enum>

  <enum name="WayPointType">
    <description>Describes what kind of waypoint is requested/provided.</description>
    <element name="ALL" />
    <element name="DESTINATION" />
  </enum>

  <struct name="Coordinate">
    <param name="latitudeDegrees" minvalue="-90" maxvalue="90" type="Float" mandatory="true">
      <description>Latitude of the location.</description>
    </param>
    <param name="longitudeDegrees" minvalue="-180" maxvalue="180" type="Float" mandatory="true">
      <description>Longitude of the location.</description>
    </param>
  </struct>

<enum name="LayoutMode">
  <description>For touchscreen interactions, the mode of how the choices are presented.</description>
  <element name="ICON_ONLY" />
    <description>This mode causes the interaction to display the previous set of choices as icons.</description>
  <element name="ICON_WITH_SEARCH" />
    <description>This mode causes the interaction to display the previous set of choices as icons along with a search field in the HMI.</description>
  <element name="LIST_ONLY" />
    <description>This mode causes the interaction to display the previous set of choices as a list.</description>
  <element name="LIST_WITH_SEARCH" />
    <description>This mode causes the interaction to display the previous set of choices as a list along with a search field in the HMI.</description>
  <element name="KEYBOARD" />
    <description>This mode causes the interaction to immediately display a keyboard entry through the HMI.</description>
</enum>

<enum name="ClockUpdateMode">
  <description>Describes how the media clock timer should behave on the platform</description>
  <element name="COUNTUP" />
  <description>Starts the media clock timer counting upwards, as in time elapsed.</description>
  <element name="COUNTDOWN" />
  <description>Starts the media clock timer counting downwards, as in time remaining.</description>
  <element name="PAUSE" />
  <description>Pauses the media clock timer</description>
  <element name="RESUME" />
  <description>Resume the media clock timer</description>
  <element name="CLEAR" />
  <description>Clears the media clock timer (previously done through Show->mediaClock)</description>
</enum>
<enum name="AudioStreamingIndicator">
  <element name="PLAY_PAUSE">
    <description>Default playback indicator.</description>
  </element>
  <element name="PLAY">
    <description>Indicates that a button press of the Play/Pause button would start the playback.</description>
  </element>
  <element name="PAUSE">
    <description>Indicates that a button press of the Play/Pause button would pause the current playback.</description>
  </element>
  <element name="STOP">
    <description>Indicates that a button press of the Play/Pause button would stop the current playback.</description>
  </element>
</enum>

<enum name="SystemContext">
  <description>Enumeration that describes possible contexts the application might be in on HU.</description>
  <description>Communicated to whichever app is in HMI FULL, except Alert.</description>
  <element name="MAIN" internal_name="SYSCTXT_MAIN">
    <description>The app's persistent display (whether media/non-media/navigation) is fully visible onscreen.</description>
    <description> There is currently no user interaction (user-initiated or app-initiated) with the head-unit</description>
  </element>
  <element name="VRSESSION" internal_name="SYSCTXT_VRSESSION">
    <description>The system is currently in a VR session (with whatever dedicated VR screen being overlaid onscreen).</description>
  </element>
  <element name="MENU" internal_name="SYSCTXT_MENU">
    <description>The system is currently displaying a system or in-App menu onscreen.</description>
  </element>
  <element name="HMI_OBSCURED" internal_name="SYSCTXT_HMI_OBSCURED">
    <description>The app's display HMI is currently obscuring with either a system or other app's overlay (except of Alert element).</description>
  </element>
  <element name="ALERT" internal_name="SYSCTXT_ALERT">
    <description>Broadcast only to whichever app has an alert currently being displayed.</description>
  </element>
</enum>

<enum name="HmiZoneCapabilities">
  <description>Contains information about the HMI zone capabilities.</description>
  <description>For future use.</description>
  <element name="FRONT" />
  <element name="BACK" />
</enum>

<enum name="SpeechCapabilities">
  <description>Contains information about the TTS capabilities.</description>
  <element name="TEXT" internal_name="SC_TEXT" />
  <element name="SAPI_PHONEMES" />
  <element name="LHPLUS_PHONEMES" />
  <element name="PRE_RECORDED" />
  <element name="SILENCE" />
  <element name="FILE" />
</enum>

<enum name="VrCapabilities">
  <description>Contains information about the VR capabilities.</description>
  <element name="TEXT" internal_name="VR_TEXT" />
</enum>

<enum name="PrerecordedSpeech">
  <description>Contains a list of prerecorded speech items present on the platform.</description>
  <element name="HELP_JINGLE" />
  <element name="INITIAL_JINGLE" />
  <element name="LISTEN_JINGLE" />
  <element name="POSITIVE_JINGLE" />
  <element name="NEGATIVE_JINGLE" />
</enum>

<enum name="TBTState">
  <description>Enumeration that describes possible states of turn-by-turn client or SmartDeviceLink app.</description>
  <element name="ROUTE_UPDATE_REQUEST" />
  <element name="ROUTE_ACCEPTED" />
  <element name="ROUTE_REFUSED" />
  <element name="ROUTE_CANCELLED" />
  <element name="ETA_REQUEST" />
  <element name="NEXT_TURN_REQUEST" />
  <element name="ROUTE_STATUS_REQUEST" />
  <element name="ROUTE_SUMMARY_REQUEST" />
  <element name="TRIP_STATUS_REQUEST" />
  <element name="ROUTE_UPDATE_REQUEST_TIMEOUT" />
</enum>

<enum name="ApplicationsCloseReason">
  <description>Describes the reasons for exiting all of applications.</description>
  <element name="IGNITION_OFF" />
  <element name="MASTER_RESET" />
  <element name="FACTORY_DEFAULTS" />
  <element name="SUSPEND" />
</enum>

<enum name="DisplayType">
    <description>The possible types of HU display.</description>
    <element name="CID">
    <description> A 2-line x 20 character "dot matrix" display </description>
    </element>
    <element name="TYPE2">
    <description> 1 line older radio head unit.</description>
    </element>
    <element name="TYPE5">
    <description> Old radio head unit.</description>
    </element>
    <element name="NGN">
    <description> Next Generation Navigation display.</description>
    </element>
    <element name="GEN2_8_DMA">
    <description> GEN-2, 8 inch display.</description>
    </element>
    <element name="GEN2_6_DMA">
    <description> GEN-2, 6 inch display.</description>
    </element>
    <element name="MFD3">
    <description> 3 inch GEN1.1 display </description>
    </element>
    <element name="MFD4">
    <description> 4 inch GEN1.1 display </description>
    </element>
    <element name="MFD5">
    <description> 5 inch GEN1.1 display </description>
    </element>
    <element name="GEN3_8_INCH"/>
    <element name="SDL_GENERIC" />
  </enum>

<enum name="ImageType">
  <description>Contains information about the type of image.</description>
  <element name="STATIC" />
  <element name="DYNAMIC" />
</enum>

<enum name="ApplicationExitReason">
  <element name="DRIVER_DISTRACTION_VIOLATION" >
    <description>By getting this value, SDL puts the named app to NONE HMILevel</description>
  </element>
  <element name="USER_EXIT" >
    <description>By getting this value, SDL puts the named app to NONE HMILevel</description>
  </element>
  <element name="UNAUTHORIZED_TRANSPORT_REGISTRATION">
    <description>By getting this value, SDL unregisters the named application</description>
  </element>
  <element name="UNSUPPORTED_HMI_RESOURCE">
    <description>By getting this value, SDL unregisters the named application</description>
  </element>
  <element name="CLOSE_CLOUD_CONNECTION">
    <description>By getting this value, SDL puts the named app to NONE HMILevel. Used by the HMI to close a cloud app connection.</description>
  </element>
</enum>

<enum name="TextFieldName">
  <element name="mainField1">
    <description>The first line of first set of main fields of the persistent display; applies to "Show"</description>
  </element>
  <element name="mainField2">
    <description>The second line of first set of main fields of the persistent display; applies to "Show"</description>
  </element>
  <element name="mainField3">
    <description>The first line of second set of main fields of persistent display; applies to "Show"</description>
  </element>
  <element name="mainField4">
    <description>The second line of second set of main fields of the persistent display; applies to "Show"</description>
  </element>
  <element name="statusBar">
    <description>The status bar on NGN; applies to "Show"</description>
  </element>
  <element name="mediaClock">
    <description>Text value for MediaClock field; applies to "Show"</description>
  </element>
  <element name="mediaTrack">
    <description>The track field of NGN and GEN1.1 MFD displays. This field is only available for media applications; applies to "Show"</description>
  </element>
  <element name="templateTitle">
    <description>The title of the new template that will be displayed; applies to "Show"</description>
  </element>
  <element name="alertText1">
    <description>The first line of the alert text field; applies to "Alert"</description>
  </element>
  <element name="alertText2">
    <description>The second line of the alert text field; applies to "Alert"</description>
  </element>
  <element name="alertText3">
    <description>The third line of the alert text field; applies to "Alert"</description>
  </element>
  <element name="scrollableMessageBody">
    <description>Long form body of text that can include newlines and tabs; applies to "ScrollableMessage"</description>
  </element>
  <element name="initialInteractionText">
    <description> First line suggestion for a user response (in the case of VR enabled interaction</description>
  </element>
  <element name="navigationText1">
    <description> First line of navigation text</description>
  </element>
  <element name="navigationText2">
    <description> Second line of navigation text</description>
  </element>
  <element name="ETA">
    <description> Estimated Time of Arrival time for navigation</description>
  </element>
  <element name="totalDistance">
    <description> Total distance to destination for navigation</description>
  </element>
  <element name="audioPassThruDisplayText1">
    <description> First line of text for audio pass thru</description>
  </element>
  <element name="audioPassThruDisplayText2">
    <description> Second line of text for audio pass thru</description>
  </element>
  <element name="sliderHeader">
    <description> Header text for slider</description>
  </element>
  <element name="sliderFooter">
    <description> Footer text for slider</description>
  </element>
  <element name="menuName">
    <description> Primary text for Choice</description>
  </element>
  <element name="secondaryText">
    <description> Secondary text for Choice</description>
  </element>
  <element name="tertiaryText">
    <description> Tertiary text for Choice</description>
  </element>
  <element name="menuTitle">
    <description> Optional text to label an app menu button (for certain touchscreen platforms).</description>
  </element>
  <element name="locationName">
    <description> Optional name / title of intended location for SendLocation.</description>
  </element>
  <element name="locationDescription">
    <description> Optional description of intended location / establishment (if applicable) for SendLocation.</description>
  </element>
  <element name="addressLines">
    <description> Optional location address (if applicable) for SendLocation.</description>
  </element>
  <element name="phoneNumber">
    <description> Optional hone number of intended location / establishment (if applicable) for SendLocation.</description>
  </element>
  <element name="timeToDestination"/>
    <!-- TO DO to be removed -->
  <element name="turnText"/>
  <element name="navigationText">
    <description>Navigation text for UpdateTurnList.</description>
  </element>
  <element name="notificationText">
    <description>Text of notification to be displayed on screen.</description>
  </element>
</enum>

<enum name="MetadataType">
  <element name="mediaTitle">
    <description>The data in this field contains the title of the currently playing audio track.</description>
  </element>
  <element name="mediaArtist">
    <description>The data in this field contains the artist or creator of the currently playing audio track.</description>
  </element>
  <element name="mediaAlbum">
    <description>The data in this field contains the album title of the currently playing audio track.</description>
  </element>
  <element name="mediaYear">
    <description>The data in this field contains the creation year of the currently playing audio track.</description>
  </element>
  <element name="mediaGenre">
    <description>The data in this field contains the genre of the currently playing audio track.</description>
  </element>
  <element name="mediaStation">
    <description>The data in this field contains the name of the current source for the media.</description>
  </element>
  <element name="rating">
    <description>The data in this field is a rating.</description>
  </element>
  <element name="currentTemperature">
    <description>The data in this field is the current temperature.</description>
  </element>
  <element name="maximumTemperature">
    <description>The data in this field is the maximum temperature for the day.</description>
  </element>
  <element name="minimumTemperature">
    <description>The data in this field is the minimum temperature for the day.</description>
  </element>
  <element name="weatherTerm">
    <description>The data in this field describes the current weather (ex. cloudy, clear, etc.).</description>
  </element>
  <element name="humidity">
    <description>The data in this field describes the current humidity value.</description>
  </element>
</enum>

<enum name="ImageFieldName">
  <element name="softButtonImage">
    <description>The image field for SoftButton</description>
  </element>
  <element name="choiceImage">
    <description>The first image field for Choice</description>
  </element>
  <element name="choiceSecondaryImage">
    <description>The secondary image field for Choice</description>
  </element>
  <element name="vrHelpItem">
    <description>The image field for vrHelpItem</description>
  </element>
  <element name="turnIcon">
    <description>The image field for Turn</description>
  </element>
  <element name="menuIcon">
    <description>The image field for the menu icon in SetGlobalProperties</description>
  </element>
  <element name="cmdIcon">
    <description>The image field for AddCommand</description>
  </element>
  <element name="appIcon">
    <description>The image field for the app icon (set by setAppIcon)</description>
  </element>
  <element name="graphic">
    <description>The primary image field for Show</description>
  </element>
  <element name="secondaryGraphic">
    <description>The secondary image field for Show</description>
  </element>
  <element name="showConstantTBTIcon">
    <description>The primary image field for ShowConstantTBT</description>
  </element>
  <element name="showConstantTBTNextTurnIcon">
    <description>The secondary image field for ShowConstantTBT</description>
  </element>
  <element name="locationImage">
    <description>The optional image of a destination / location</description>
  </element>
  <element name="alertIcon">
    <description>The image field for Alert</description>
  </element>
</enum>

<enum name="TextAlignment">
  <description>The list of possible alignments, left, right, or centered</description>
  <element name="LEFT_ALIGNED" />
  <element name="RIGHT_ALIGNED" />
  <element name="CENTERED" />
</enum>

<enum name="DriverDistractionState">
  <description>Enumeration that describes possible states of driver distraction.</description>
  <element name="DD_ON" />
  <element name="DD_OFF" />
</enum>

<enum name="EmergencyState">
  <description>Enumeration that describes possible states of emergency event.</description>
  <element name="EMERGENCY_ON" />
  <element name="EMERGENCY_OFF" />
</enum>

<enum name="MediaClockFormat">
  <element name="CLOCK1">
    <description>
      minutesFieldWidth = 2;minutesFieldMax = 19;secondsFieldWidth = 2;secondsFieldMax = 99;maxHours = 19;maxMinutes = 59;maxSeconds = 59;
      Is used for Type II, NGN and CID head units.
    </description>
  </element>
  <element name="CLOCK2">
    <description>
      minutesFieldWidth = 3;minutesFieldMax = 199;secondsFieldWidth = 2;secondsFieldMax = 99;maxHours = 59;maxMinutes = 59;maxSeconds = 59;
    Is used for Type V head units.
    </description>
  </element>
  <element name="CLOCK3">
    <description>
      minutesFieldWidth = 2;minutesFieldMax = 59;secondsFieldWidth = 2;secondsFieldMax = 59;maxHours = 9;maxMinutes = 59;maxSeconds = 59;
    Is used for GEN1.1 (i.e. MFD3/4/5) head units.
    </description>
  </element>
  <element name="CLOCKTEXT1">
    <description>
      5 characters possible
      Format:      1|sp   c   :|sp   c   c
      1|sp : digit "1" or space
      c    : character out of following character set: sp|0-9|[letters
      :|sp : colon or space
    Is used for Type II head unit
    </description>
  </element>
  <element name="CLOCKTEXT2">
    <description>
      5 chars possible
      Format:      1|sp   c   :|sp   c   c
      1|sp : digit "1" or space
      c    : character out of following character set: sp|0-9|[letters
      :|sp : colon or space
    Is used for CID and NGN head unit
    </description>
  </element>
  <element name="CLOCKTEXT3">
    <description>
      6 chars possible
      Format:      1|sp   c   c   :|sp   c   c
      1|sp : digit "1" or space
      c    : character out of following character set: sp|0-9|[letters
      :|sp : colon or space
    Is used for Type V head unit
  </description>
  </element>
  <element name="CLOCKTEXT4">
    <description>
      6 chars possible
      Format:      c   :|sp   c   c   :   c   c
      :|sp : colon or space
      c    : character out of following character set: sp|0-9|[letters].
    Is used for GEN1.1 (i.e. MFD3/4/5) head units
  </description>
  </element>
</enum>

<enum name="VRCommandType">
  <element name="Choice">
    <description>Type that expound that current AddCommand should be pocessed as choise for initiated PerformInteraction request for current active on HMI.</description>
  </element>
  <element name="Command">
    <description>Type that expound that current AddCommand should be pocessed as common command for current application on HMI.</description>
  </element>
</enum>

<!--IVI part-->
<enum name="ElectronicParkBrakeStatus">
  <element name="CLOSED">
    <description>
      Park brake actuators have been fully applied.
    </description>
  </element>
  <element name="TRANSITION">
    <description>
      Park brake actuators are transitioning to either Apply/Closed or Release/Open state.
    </description>
  </element>
  <element name="OPEN">
    <description>
      Park brake actuators are released.
    </description>
  </element>
  <element name="DRIVE_ACTIVE">
    <description>
      When driver pulls the Electronic Park Brake switch while driving "at speed".
    </description>
  </element>
 <element name="FAULT">
    <description>
      When system has a fault or is under maintenance.
    </description>
 </element>
</enum>
<enum name="FuelType">
    <element name="GASOLINE" />
    <element name="DIESEL" />
    <element name="CNG">
        <description>
            For vehicles using compressed natural gas.
        </description>
    </element>
    <element name="LPG">
        <description>
            For vehicles using liquefied petroleum gas.
        </description>
    </element>
    <element name="HYDROGEN">
        <description>For FCEV (fuel cell electric vehicle).</description>
    </element>
    <element name="BATTERY">
        <description>For BEV (Battery Electric Vehicle), PHEV (Plug-in Hybrid Electric Vehicle), solar vehicles and other vehicles which run on a battery.</description>
    </element>
</enum>

<struct name="FuelRange">
    <param name="type" type="Common.FuelType" mandatory="false"/>
    <param name="range" type="Float" minvalue="0" maxvalue="10000" mandatory="false">
        <description>
            The estimate range in KM the vehicle can travel based on fuel level and consumption.
        </description>
    </param>
</struct>

<enum name="ComponentVolumeStatus">
  <description>The volume status of a vehicle component.</description>
  <element name="UNKNOWN" internal_name="CVS_UNKNOWN">
  <description> The data is unknown.</description>
  </element>
  <element name="NORMAL" internal_name="CVS_NORMAL">
  <description> The volume is normal.</description>
  </element>
  <element name="LOW" internal_name="CVS_LOW">
  <description> The volume is low.</description>
  </element>
  <element name="FAULT" internal_name="CVS_FAULT">
  <description> The module/sensor is currently faulted. </description>
  </element>
  <element name="ALERT"  internal_name="CVS_ALERT">
  <description> The component`s volume is in critical level.</description>
  </element>
  <element name="NOT_SUPPORTED" internal_name="CVS_NOT_SUPPORTED">
  <description> The data is not supported.</description>
  </element>
</enum>

<enum name="TPMS">
  <element name="UNKNOWN">
    <description>If set the status of the tire is not known.</description>
  </element>
  <element name="SYSTEM_FAULT">
    <description>TPMS does not function.</description>
  </element>
  <element name="SENSOR_FAULT">
    <description>The sensor of the tire does not function.</description>
  </element>
  <element name="LOW">
    <description>TPMS is reporting a low tire pressure for the tire.</description>
  </element>
  <element name="SYSTEM_ACTIVE">
    <description>TPMS is active and the tire pressure is monitored.</description>
  </element>
  <element name="TRAIN">
    <description>TPMS is reporting that the tire must be trained.</description>
  </element>
  <element name="TRAINING_COMPLETE">
    <description>TPMS reports the training for the tire is completed.</description>
  </element>
  <element name="NOT_TRAINED">
    <description>TPMS reports the tire is not trained.</description>
  </element>
</enum>

<enum name="PRNDL">
  <description>The selected gear.</description>
  <element name="PARK">
    <description>Parking</description>
  </element>
  <element name="REVERSE">
    <description>Reverse gear</description>
  </element>
  <element name="NEUTRAL">
    <description>No gear</description>
  </element>
  <element name="DRIVE">
  </element>
  <element name="SPORT">
    <description>Drive Sport mode</description>
  </element>
  <element name="LOWGEAR">
    <description>1st gear hold</description>
  </element>
  <element name="FIRST">
  </element>
  <element name="SECOND">
  </element>
  <element name="THIRD">
  </element>
  <element name="FOURTH">
  </element>
  <element name="FIFTH">
  </element>
  <element name="SIXTH">
  </element>
  <element name="SEVENTH">
  </element>
  <element name="EIGHTH">
  </element>
  <element name="UNKNOWN">
  </element>
  <element name="FAULT">
  </element>
</enum>

<enum name="VehicleDataEventStatus">
  <description>Reflects the status of a vehicle data event; e.g. a seat belt event status.</description>
  <element name="NO_EVENT" internal_name="VDES_NO_EVENT">
  <description> The system does not have the adequate information to send valid YES or NO states.</description>
  </element>
  <element name="NO" internal_name="VDES_NO">
  <description> The requested event is in NO state.</description>
  </element>
  <element name="YES" internal_name="VDES_YES">
  <description> The requested event is in YES state.</description>
  </element>
  <element name="NOT_SUPPORTED" internal_name="VDES_NOT_SUPPORTED">
  <description> The requested data is not supported </description>
  </element>
  <element name="FAULT" internal_name="VDES_FAULT">
  <description> The module/sensor is currently faulted.</description>
  </element>
</enum>

<enum name="VehicleDataStatus">
  <description>Reflects the status of a binary vehicle data item.</description>
  <element name="NO_DATA_EXISTS" internal_name="VDS_NO_DATA_EXISTS">
  </element>
  <element name="OFF" internal_name="VDS_OFF">
  </element>
  <element name="ON" internal_name="VDS_ON">
  </element>
</enum>

<enum name="IgnitionStableStatus">
  <description>Reflects the ignition switch stability.</description>
  <element name="IGNITION_SWITCH_NOT_STABLE">
  </element>
  <element name="IGNITION_SWITCH_STABLE">
  </element>
  <element name="MISSING_FROM_TRANSMITTER">
  <description> Either the data is not accessible or the sensor is broken.</description>
  </element>
</enum>

<enum name="IgnitionStatus">
  <description>Reflects the status of ignition.</description>
  <element name="UNKNOWN" internal_name="IS_UNKNOWN">
  <description> The information is not acceptable. </description>
  </element>
  <element name="OFF" internal_name="IS_OFF">
  <description> The ignition is off.</description>
  </element>
  <element name="ACCESSORY" internal_name="IS_ACCESSORY">
  <description> The accessories are active (power windows, audio, display, etc.).</description>
  </element>
  <element name="RUN" internal_name="IS_RUN">
   <description> Ignition is active.</description>
  </element>
  <element name="START" internal_name="IS_START">
  <description> Starter is switched.</description>
  </element>
  <element name="INVALID" internal_name="IS_INVALID">
  <description> The data is provided, but there is some sort of fault or problem.</description>
  </element>
</enum>

<enum name="DeviceLevelStatus">
  <description>Reflects the reported component status of the connected device, if reported.</description>
  <element name="ZERO_LEVEL_BARS">
  </element>
  <element name="ONE_LEVEL_BARS">
  </element>
  <element name="TWO_LEVEL_BARS">
  </element>
  <element name="THREE_LEVEL_BARS">
  </element>
  <element name="FOUR_LEVEL_BARS">
  </element>
  <element name="NOT_PROVIDED">
  </element>
</enum>

<enum name="PrimaryAudioSource">
  <description>Reflects the current primary audio source (if selected).</description>
  <element name="NO_SOURCE_SELECTED">
  </element>
  <element name="CD">
  </element>
  <element name="USB">
  </element>
  <element name="USB2">
  </element>
  <element name="BLUETOOTH_STEREO_BTST">
  </element>
  <element name="LINE_IN">
  </element>
  <element name="IPOD">
  </element>
  <element name="MOBILE_APP">
  </element>
  <element name="AM">
  </element>
  <element name="FM">
  </element>
  <element name="XM">
  </element>
  <element name="DAB">
  </element>
</enum>

<enum name="CompassDirection">
  <description>The list of potential compass directions</description>
  <element name="NORTH">
  </element>
  <element name="NORTHWEST">
  </element>
  <element name="WEST">
  </element>
  <element name="SOUTHWEST">
  </element>
  <element name="SOUTH">
  </element>
  <element name="SOUTHEAST">
  </element>
  <element name="EAST">
  </element>
  <element name="NORTHEAST">
  </element>
</enum>

<enum name="Dimension">
  <description>The supported dimensions of the GPS</description>
  <element name="NO_FIX" internal_name="Dimension_NO_FIX">
    <description>No GPS at all</description>
  </element>
  <element name="2D" internal_name="Dimension_2D">
    <description>Longitude and lattitude</description>
  </element>
  <element name="3D" internal_name="Dimension_3D">
    <description>Longitude and lattitude and altitude</description>
  </element>
</enum>

<enum name="TouchType">
  <element name="BEGIN"/>
  <element name="MOVE"/>
  <element name="END"/>
  <element name="CANCEL"/>
</enum>

<enum name="WarningLightStatus">
  <description>Reflects the status of a cluster instrument warning light.</description>
  <element name="OFF" internal_name="WLS_OFF">
  </element>
  <element name="ON" internal_name="WLS_ON">
  </element>
  <element name="FLASH" internal_name="WLS_FLASH">
  </element>
  <element name="NOT_USED" internal_name="WLS_NOT_USED">
  </element>
</enum>

<enum name="VehicleDataResultCode">
  <description>Enumeration that describes possible result codes of a vehicle data entry request.</description>
  <element name="SUCCESS" internal_name="VDRC_SUCCESS"/>
  <element name="TRUNCATED_DATA" internal_name="VDRC_TRUNCATED_DATA"/>
  <element name="DISALLOWED" internal_name="VDRC_DISALLOWED"/>
  <element name="USER_DISALLOWED" internal_name="VDRC_USER_DISALLOWED"/>
  <element name="INVALID_ID" internal_name="VDRC_INVALID_ID"/>
  <element name="VEHICLE_DATA_NOT_AVAILABLE" internal_name="VDRC_DATA_NOT_AVAILABLE"/>
  <element name="DATA_ALREADY_SUBSCRIBED" internal_name="VDRC_DATA_ALREADY_SUBSCRIBED"/>
  <element name="DATA_NOT_SUBSCRIBED" internal_name="VDRC_DATA_NOT_SUBSCRIBED"/>
  <element name="IGNORED" internal_name="VDRC_IGNORED"/>
</enum>

<enum name="VehicleDataType">
  <description>Defines the data types that can be published and subscribed to.</description>
  <element name="VEHICLEDATA_GPS">
    <description>Notifies GPSData may be subscribed</description>
  </element>
  <element name="VEHICLEDATA_SPEED" />
  <element name="VEHICLEDATA_RPM" />
  <element name="VEHICLEDATA_FUELLEVEL" />
  <element name="VEHICLEDATA_FUELLEVEL_STATE" />
  <element name="VEHICLEDATA_FUELCONSUMPTION" />
  <element name="VEHICLEDATA_EXTERNTEMP" />
  <element name="VEHICLEDATA_VIN" />
  <element name="VEHICLEDATA_PRNDL" />
  <element name="VEHICLEDATA_TIREPRESSURE" />
  <element name="VEHICLEDATA_ODOMETER" />
  <element name="VEHICLEDATA_BELTSTATUS" />
  <element name="VEHICLEDATA_BODYINFO" />
  <element name="VEHICLEDATA_DEVICESTATUS" />
  <element name="VEHICLEDATA_ECALLINFO" />
  <element name="VEHICLEDATA_AIRBAGSTATUS" />
  <element name="VEHICLEDATA_EMERGENCYEVENT" />
  <element name="VEHICLEDATA_CLUSTERMODESTATUS" />
  <element name="VEHICLEDATA_MYKEY" />
  <element name="VEHICLEDATA_BRAKING" />
  <element name="VEHICLEDATA_WIPERSTATUS" />
  <element name="VEHICLEDATA_HEADLAMPSTATUS" />
  <element name="VEHICLEDATA_BATTVOLTAGE" />
  <element name="VEHICLEDATA_ENGINETORQUE" />
  <element name="VEHICLEDATA_ACCPEDAL" />
  <element name="VEHICLEDATA_STEERINGWHEEL" />
  <element name="VEHICLEDATA_TURNSIGNAL" />
  <element name="VEHICLEDATA_FUELRANGE" />
  <element name="VEHICLEDATA_ENGINEOILLIFE" />
  <element name="VEHICLEDATA_ELECTRONICPARKBRAKESTATUS" />
  <element name="VEHICLEDATA_CLOUDAPPVEHICLEID" />
  <element name="VEHICLEDATA_OEM_CUSTOM_DATA" />
</enum>

<enum name="WiperStatus">
  <description>Reflects the status of the wipers.</description>
  <element name="OFF">
    <description> The wipers are off.</description>
  </element>
  <element name="AUTO_OFF">
    <description> The wipers are automatically off </description>
  </element>
  <element name="OFF_MOVING">
    <description> Means that though set to off, somehow the wipers have been engaged (physically moved enough to engage a wiping motion).</description>
  </element>
  <element name="MAN_INT_OFF">
    <description> The wipers are manually off after having been working.</description>
  </element>
  <element name="MAN_INT_ON">
    <description> The wipers are manually on.</description>
  </element>
  <element name="MAN_LOW">
    <description> The wipers are manually set to low speed.</description>
  </element>
  <element name="MAN_HIGH">
    <description> The wipers are manually set to high speed.</description>
  </element>
  <element name="MAN_FLICK">
    <description> The wipers are manually set for doing a flick.</description>
  </element>
  <element name="WASH">
    <description> The wipers are set to use the water from vehicle washer bottle for cleaning the windscreen.</description>
  </element>
  <element name="AUTO_LOW">
    <description> The wipers are automatically set to low speed.</description>
  </element>
  <element name="AUTO_HIGH">
    <description> The wipers are automatically set to high speed.</description>
  </element>
  <element name="COURTESYWIPE">
    <description> This is for when a user has just initiated a WASH and several seconds later a secondary wipe is automatically initiated to clear remaining fluid.</description>
  </element>
  <element name="AUTO_ADJUST">
    <description> This is set as the user moves between possible automatic wiper speeds.</description>
  </element>
  <element name="STALLED">
    <description> The wiper is stalled to its place. </description>
  </element>
  <element name="NO_DATA_EXISTS">
    <description> The sensor / module cannot provide any information for wiper.</description>
  </element>
</enum>

<enum name="SamplingRate">
  <description>Describes different sampling options for PerformAudioPassThru.</description>
  <element name="8KHZ" internal_name="RATE_8KHZ">
    <description>Sampling rate of 8000 Hz.</description>
  </element>
  <element name="16KHZ" internal_name="RATE_16KHZ">
    <description>Sampling rate of 16000 Hz.</description>
  </element>
  <element name="22KHZ" internal_name="RATE_22KHZ">
    <description>Sampling rate of 22050 Hz.</description>
  </element>
  <element name="44KHZ" internal_name="RATE_44KHZ">
    <description>Sampling rate of 44100 Hz.</description>
  </element>
</enum>

<enum name="BitsPerSample">
  <description>Describes different quality options for PerformAudioPassThru.</description>
  <element name="8_BIT" internal_name="RATE_8_BIT">
    <description>Audio sample is 8 bits wide, unsigned.</description>
  </element>
  <element name="16_BIT" internal_name="RATE_16_BIT">
    <description>Audio sample is 16 bits wide, signed, and in little endian.</description>
  </element>
</enum>

<enum name="AudioType">
  <description>Describes different audio type options for PerformAudioPassThru.</description>
  <element name="PCM">
    <description>Linear PCM.</description>
  </element>
</enum>

<enum name="KeyboardLayout">
  <description>Enumeration listing possible keyboard layouts.</description>
  <element name="QWERTY" />
  <element name="QWERTZ" />
  <element name="AZERTY" />
</enum>

<enum name="KeyboardEvent">
  <description>Enumeration listing possible keyboard events.</description>
  <element name="KEYPRESS" />
  <element name="ENTRY_SUBMITTED" />
  <element name="ENTRY_VOICE" />
  <element name="ENTRY_CANCELLED" />
  <element name="ENTRY_ABORTED" />
</enum>

<enum name="KeypressMode">
  <description>Enumeration listing possible keyboard events.</description>
  <element name="SINGLE_KEYPRESS">
    <description>Each keypress is individually sent as the user presses the keyboard keys.</description>
  </element>
  <element name="QUEUE_KEYPRESSES">
    <description>The keypresses are queued and a string is eventually sent once the user chooses to submit their entry.</description>
  </element>
  <element name="RESEND_CURRENT_ENTRY">
    <description>The keypresses are queue and a string is sent each time the user presses a keyboard key; the string contains the entire current entry.</description>
  </element>
</enum>

<enum name="AmbientLightStatus">
  <description>Reflects the status of the ambient light sensor.</description>
  <element name="NIGHT" />
  <element name="TWILIGHT_1" />
  <element name="TWILIGHT_2" />
  <element name="TWILIGHT_3" />
  <element name="TWILIGHT_4" />
  <element name="DAY" />
  <element name="UNKNOWN" />
  <element name="INVALID" />
</enum>

<enum name="FileType">
  <description>Enumeration listing possible file types.</description>
  <element name="GRAPHIC_BMP" />
  <element name="GRAPHIC_JPEG" />
  <element name="GRAPHIC_PNG" />
  <element name="AUDIO_WAVE" />
  <element name="AUDIO_MP3" />
  <element name="AUDIO_AAC" />
  <element name="BINARY" />
  <element name="JSON" />
</enum>

<enum name="RequestType">
  <description>Enumeration listing possible asynchronous requests.</description>
  <element name="HTTP" />
  <element name="FILE_RESUME" />
  <element name="AUTH_REQUEST" />
  <element name="AUTH_CHALLENGE" />
  <element name="AUTH_ACK" />
  <element name="PROPRIETARY" />
  <element name="QUERY_APPS" />
  <element name="LAUNCH_APP" />
  <element name="LOCK_SCREEN_ICON_URL" />
  <element name="TRAFFIC_MESSAGE_CHANNEL" />
  <element name="DRIVER_PROFILE" />
  <element name="VOICE_SEARCH" />
  <element name="NAVIGATION" />
  <element name="PHONE" />
  <element name="CLIMATE" />
  <element name="SETTINGS" />
  <element name="VEHICLE_DIAGNOSTICS" />
  <element name="EMERGENCY" />
  <element name="MEDIA" />
  <element name="FOTA" />
  <element name="OEM_SPECIFIC"/>
  <element name="ICON_URL"/>
</enum>

<enum name="ECallConfirmationStatus">
  <description>Reflects the status of the eCall Notification.</description>
  <element name="NORMAL" internal_name="ECCS_NORMAL">
  </element>
  <element name="CALL_IN_PROGRESS" internal_name="ECCS_CALL_IN_PROGRESS">
  </element>
  <element name="CALL_CANCELLED" internal_name="ECCS_CALL_CANCELLED">
  </element>
  <element name="CALL_COMPLETED">
  </element>
  <element name="CALL_UNSUCCESSFUL" internal_name="ECCS_CALL_UNSUCCESSFUL">
  </element>
  <element name="ECALL_CONFIGURED_OFF" internal_name="ECCS_ECALL_CONFIGURED_OFF">
  </element>
  <element name="CALL_COMPLETE_DTMF_TIMEOUT" internal_name="ECCS_CALL_COMPLETE_DTMF_TIMEOUT">
  </element>
</enum>

<enum name="VehicleDataNotificationStatus">
  <description>Reflects the status of a vehicle data notification.</description>
  <element name="NOT_SUPPORTED" internal_name="VDNS_NOT_SUPPORTED">
  </element>
  <element name="NORMAL" internal_name="VDNS_NORMAL">
  </element>
  <element name="ACTIVE" internal_name="VDNS_ACTIVE">
  </element>
  <element name="NOT_USED" internal_name="VDNS_NOT_USED">
  </element>
</enum>

<enum name="EmergencyEventType">
  <description>Reflects the emergency event status of the vehicle.</description>
  <element name="NO_EVENT" internal_name="EET_NO_EVENT">
  </element>
  <element name="FRONTAL" internal_name="EET_FRONTAL">
  </element>
  <element name="SIDE" internal_name="EET_SIDE">
  </element>
  <element name="REAR" internal_name="EET_REAR">
  </element>
  <element name="ROLLOVER" internal_name="EET_ROLLOVER">
  </element>
  <element name="NOT_SUPPORTED" internal_name="EET_NOT_SUPPORTED">
  </element>
  <element name="FAULT" internal_name="EET_FAULT">
  </element>
</enum>

<enum name="FuelCutoffStatus">
  <description>Reflects the status of the RCM fuel cutoff.</description>
  <element name="TERMINATE_FUEL" internal_name="FCS_TERMINATE_FUEL">
  </element>
  <element name="NORMAL_OPERATION" internal_name="FCS_NORMAL_OPERATION">
  </element>
  <element name="FAULT" internal_name="FCS_FAULT">
  </element>
</enum>

<enum name="PowerModeQualificationStatus">
  <description>Reflects the status of the current power mode qualification.</description>
  <element name="POWER_MODE_UNDEFINED">
  </element>
  <element name="POWER_MODE_EVALUATION_IN_PROGRESS">
  </element>
  <element name="NOT_DEFINED">
  </element>
  <element name="POWER_MODE_OK">
  </element>
</enum>

<enum name="CarModeStatus">
  <description>Reflects the status of the current car mode.</description>
  <element name="NORMAL" internal_name="CMS_NORMAL">
  </element>
  <element name="FACTORY" internal_name="CMS_FACTORY">
  </element>
  <element name="TRANSPORT" internal_name="CMS_TRANSPORT">
  </element>
  <element name="CRASH" internal_name="CMS_CRASH">
  </element>
</enum>

<enum name="PowerModeStatus">
  <description>Reflects the status of the current power mode.</description>
  <element name="KEY_OUT">
  </element>
  <element name="KEY_RECENTLY_OUT">
  </element>
  <element name="KEY_APPROVED_0">
  </element>
  <element name="POST_ACCESORY_0">
  </element>
  <element name="ACCESORY_1">
  </element>
  <element name="POST_IGNITION_1">
  </element>
  <element name="IGNITION_ON_2">
  </element>
  <element name="RUNNING_2">
  </element>
  <element name="CRANK_3">
  </element>
</enum>

<enum name="CharacterSet">
  <description>The list of potential character sets</description>
  <element name="TYPE2SET">
    <description>See [@TODO: create file ref]</description>
  </element>
  <element name="TYPE5SET">
    <description>See [@TODO: create file ref]</description>
  </element>
  <element name="CID1SET">
    <description>See [@TODO: create file ref]</description>
  </element>
  <element name="CID2SET">
    <description>See [@TODO: create file ref]</description>
  </element>
</enum>

<!-- End of IVI part-->

<enum name="AppPriority">
  <element name="EMERGENCY"/>
  <element name="NAVIGATION"/>
  <element name="VOICE_COMMUNICATION"/>
  <element name="COMMUNICATION"/>
  <element name="NORMAL"/>
  <element name="NONE"/>
</enum>

<enum name="MethodName">
  <description>Defines the type of the request which causes text-to-speech prompt</description>
  <element name="ALERT" />
  <element name="SPEAK" />
  <element name="AUDIO_PASS_THRU" />
  <element name="ALERT_MANEUVER" />
</enum>

<enum name="AlertType">
<description>Defines the type of the request which causes text-to-speech prompt</description>
<element name="UI" />
<element name="BOTH" />
</enum>

<enum name="HMILevel">
  <element name="FULL"/>
  <element name="LIMITED" />
  <element name="BACKGROUND"/>
  <element name="NONE"/>
</enum>

<enum name="EventTypes">
  <description>Reflects the current active event</description>
  <element name="AUDIO_SOURCE">
    <description>Navigated to audio(radio, etc)</description>
  </element>
  <element name="EMBEDDED_NAVI">
    <description>Navigated to navigation screen</description>
  </element>
  <element name="PHONE_CALL">
    <description>Phone call is active</description>
  </element>
  <element name="EMERGENCY_EVENT">
    <description>Active emergency event, active parking event</description>
  </element>
  <element name="DEACTIVATE_HMI">
    <description> GAL/DIO is active </description>
  </element>
</enum>

<enum name="DeliveryMode">
  <description>The mode in which the SendLocation request is sent</description>
  <element name="PROMPT" />
  <element name="DESTINATION" />
  <element name="QUEUE" />
</enum>

<enum name="VideoStreamingProtocol">
  <description>Enum for each type of video streaming protocol type.</description>
  <element name="RAW">
    <description>
      Raw stream bytes that contains no timestamp data and is the lowest supported video streaming
    </description>
  </element>
  <element name="RTP">
    <description>
      RTP facilitates the transfer of real-time data. Information provided by this protocol include
      timestamps (for synchronization), sequence numbers (for packet loss and reordering detection)
      and the payload format which indicates the encoded format of the data.
    </description>
  </element>
  <element name="RTSP">
    <description>
      The transmission of streaming data itself is not a task of RTSP. Most RTSP servers use the
      Real-time Transport Protocol (RTP) in conjunction with Real-time Control Protocol (RTCP)
      for media stream delivery. However, some vendors implement proprietary transport protocols.
    </description>
  </element>
  <element name="RTMP">
    <description>
      Real-Time Messaging Protocol (RTMP) was initially a proprietary protocol developed by
      Macromedia for streaming audio, video and data over the Internet, between a Flash player
      and a server. Macromedia is now owned by Adobe, which has released an incomplete version
      of the specification of the protocol for public use.
    </description>
  </element>
  <element name="WEBM">
    <description>
      The WebM container is based on a profile of Matroska. WebM initially supported VP8 video and
      Vorbis audio streams. In 2013 it was updated to accommodate VP9 video and Opus audio.
    </description>
  </element>
</enum>

<enum name="VideoStreamingCodec">
  <description>Enum for each type of video streaming codec.</description>
  <element name="H264">
    <description>
      A block-oriented motion-compensation-based video compression standard.
      As of 2014 it is one of the most commonly used formats for the recording, compression, and
      distribution of video content.
    </description>
  </element>
  <element name="H265">
    <description>
      High Efficiency Video Coding (HEVC), also known as H.265 and MPEG-H Part 2, is a video
      compression standard, one of several potential successors to the widely used AVC (H.264 or
      MPEG-4 Part 10). In comparison to AVC, HEVC offers about double the data compression ratio
      at the same level of video quality, or substantially improved video quality at the same
      bit rate. It supports resolutions up to 8192x4320, including 8K UHD.
    </description>
  </element>
  <element name="Theora">
    <description>
      Theora is derived from the formerly proprietary VP3 codec, released into the public domain
      by On2 Technologies. It is broadly comparable in design and bitrate efficiency to
      MPEG-4 Part 2, early versions of Windows Media Video, and RealVideo while lacking some of
      the features present in some of these other codecs. It is comparable in open standards
      philosophy to the BBC's Dirac codec.
    </description>
  </element>
  <element name="VP8">
    <description>
      VP8 can be multiplexed into the Matroska-based container format WebM along with Vorbis and
      Opus audio. The image format WebP is based on VP8's intra-frame coding. VP8's direct
      successor, VP9, and the emerging royalty-free internet video format AV1 from the Alliance for
      Open Media (AOMedia) are based on VP8.
    </description>
  </element>
  <element name="VP9">
    <description>
      Similar to VP8, but VP9 is customized for video resolutions beyond high-definition video (UHD)
      and also enables lossless compression.
    </description>
  </element>
</enum>

<!-- Policies -->
  <enum name="UpdateResult">
    <element name="UP_TO_DATE"/>
    <element name="UPDATING" />
    <element name="UPDATE_NEEDED"/>
  </enum>

  <enum name="SystemError">
    <element name="SYNC_REBOOTED"/>
    <element name="SYNC_OUT_OF_MEMMORY" />
  </enum>

  <enum name="StatisticsType">
    <element name="iAPP_BUFFER_FULL"/>
  </enum>

  <enum name="ConsentSource">
    <element name="GUI"/>
    <element name="VUI" />
  </enum>

  <enum name="DeviceState">
    <element name="UNKNOWN"/>
    <element name="UNPAIRED"/>
  </enum>
  <struct name="UserFriendlyMessage" scope="internal">
    <param name="messageCode" type="String" mandatory="true"/>
    <param name="ttsString" type="String" mandatory="false"/>
    <param name="label" type="String" mandatory="false" />
    <param name="line1" type="String" mandatory="false"/>
    <param name="line2" type="String" mandatory="false"/>
    <param name="textBody" type="String" mandatory="false"/>
  </struct>

  <struct name="PermissionItem">
    <param name="name" type="String" mandatory="true">
      <description>Code of message of user-friendly text about functional group to be allowed/disallowed</description>
    </param>
    <param name="id" type="Integer" mandatory="true">
      <description>Id of corresponding functional group, needed by SDL.</description>
    </param>
    <param name="allowed" type="Boolean" mandatory="false">
      <description>Specifies whether functionality was allowed/disallowed. If ommited - no information about User Consent is yet found for app.</description>
    </param>
  </struct>
  <struct name="ServiceInfo">
    <param name="url" type="String" mandatory="true">
      <description>Get URL based on service type.</description>
    </param>
    <param name="appID" type="Integer" mandatory="false">
      <description>ID of application that requested this RPC.</description>
    </param>
  </struct>

  <enum name="EntityStatus">
    <element name="ON"/>
    <element name="OFF"/>
  </enum>

  <struct name="ExternalConsentStatus">
    <param name="entityType" type="Integer" minvalue="0" maxvalue="128" mandatory="true">
      <description>The entityType which status is informed by "status" param.</description>
    </param>
    <param name="entityID" type="Integer" minvalue="0" maxvalue="128" mandatory="true">
      <description>The corresponding ID of entityType which status is informed by "status" param</description>
    </param>
    <param name="status" type="Common.EntityStatus" mandatory="true">
      <description>Status of the ExternalConsentStatus entity: "ON" or "OFF". </description>
    </param>
  </struct>
<!-- End of Policies -->

<!-- Remote Control -->

<struct name="Grid">
    <description>Describes a location (origin coordinates and span) of a vehicle component.</description>
    <param name="col" type="Integer" mandatory="true" minvalue="-1" maxvalue="100">
    </param>
    <param name="row" type="Integer"  mandatory="true" minvalue="-1" maxvalue="100">
    </param>
    <param name="level" type="Integer" mandatory="false"  defvalue="0" minvalue="-1" maxvalue="100" >
    </param>
    <param name="colspan" type="Integer" mandatory="false" defvalue="1" minvalue="1" maxvalue="100">
    </param>
    <param name="rowspan" type="Integer" mandatory="false" defvalue="1" minvalue="1" maxvalue="100">
    </param>
    <param name="levelspan" type="Integer" mandatory="false" defvalue="1" minvalue="1" maxvalue="100">
    </param>
</struct>

<struct name="ModuleInfo">
    <description>Information about a RC module</description>
    <param name="moduleId" type="String" maxlength="100" mandatory="true">
        <description> uuid of a module. "moduleId + moduleType" uniquely identify a module.</description>
    </param>
    <param name="location" type="Grid" mandatory="false">
       <description>Location of a module.</description>
    </param>
    <param name="serviceArea" type="Grid" mandatory="false">
       <description>Service area of a module. </description>
    </param>
    <param name="allowMultipleAccess" type="Boolean" mandatory="false" defvalue="true">
        <description>allow multiple users/apps to access the module or not </description>
    </param>
</struct>

<struct name="SeatLocation">
    <description>Describes the location of a seat.</description>
    <param name="grid" type="Grid"  mandatory="false">
    </param>
</struct>

<struct name="SeatLocationCapability">
    <description>Contains information about the locations of each seat</description>
    <param name="rows" type="Integer" minvalue="1" maxvalue="100" mandatory="false"></param>
    <param name="columns" type="Integer" minvalue="1" maxvalue="100" mandatory="false"></param>
    <param name="levels" type="Integer" minvalue="1" maxvalue="100" defvalue="1" mandatory="false">   
    </param>
    <param name="seats" type="SeatLocation" array="true" mandatory="false">
        <description>Contains a list of SeatLocation in the vehicle</description>
    </param>
</struct>

<enum name="ModuleType">
   <element name="CLIMATE"/>
   <element name="RADIO"/>
   <element name="SEAT"/>
   <element name="AUDIO"/>
   <element name="LIGHT"/>
   <element name="HMI_SETTINGS"/>
</enum>

    <enum name="MassageZone">
      <description>List possible zones of a multi-contour massage seat.</description>
      <element name="LUMBAR">
        <description>The back of a multi-contour massage seat. or SEAT_BACK</description>
      </element>
      <element name="SEAT_CUSHION">
        <description>The bottom a multi-contour massage seat. or SEAT_BOTTOM </description>
      </element>
    </enum>

    <enum name="MassageMode">
      <description>List possible modes of a massage zone.</description>
      <element name="OFF"/>
      <element name="LOW"/>
      <element name="HIGH"/>
    </enum>

    <struct name="MassageModeData">
      <description>Specify the mode of a massage zone.</description>
      <param name="massageZone" type="MassageZone" mandatory="true"></param>
      <param name="massageMode" type="MassageMode" mandatory="true"></param>
    </struct>

    <enum name="MassageCushion">
      <description>List possible cushions of a multi-contour massage seat.</description>
      <element name="TOP_LUMBAR"/>
      <element name="MIDDLE_LUMBAR"/>
      <element name="BOTTOM_LUMBAR"/>
      <element name="BACK_BOLSTERS"/>
      <element name="SEAT_BOLSTERS"/>
    </enum>

    <struct name="MassageCushionFirmness">
      <description>The intensity or firmness of a cushion.</description>
      <param name="cushion" type="MassageCushion" mandatory="true"></param>
      <param name="firmness" type="Integer" minvalue="0" maxvalue="100" mandatory="true"></param>
    </struct>

    <enum name="SeatMemoryActionType">
      <element name="SAVE">
        <description>Save current seat postions and settings to seat memory.</description>
      </element>
      <element name="RESTORE">
        <description>Restore / apply the seat memory settings to the current seat. </description>
      </element>
      <element name="NONE">
        <description>No action to be performed.</description>
      </element>
    </enum>

    <struct name="SeatMemoryAction">
      <param name="id" type="Integer" minvalue="1" maxvalue="10" mandatory="true"/>
      <param name="label" type="String" maxlength="100" mandatory="false"/>
      <param name="action" type="SeatMemoryActionType" mandatory="true"/>
    </struct>

    <enum name="SupportedSeat">
      <description>List possible seats that is a remote controllable seat.</description>
      <element name="DRIVER"/>
      <element name="FRONT_PASSENGER"/>
    </enum>

    <struct name="SeatControlData">
      <description>Seat control data corresponds to "SEAT" ModuleType. </description>
      <param name="id" type="SupportedSeat" mandatory="false"></param>
      <param name="heatingEnabled" type="Boolean" mandatory="false"></param>
      <param name="coolingEnabled" type="Boolean" mandatory="false"></param>
      <param name="heatingLevel" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>
      <param name="coolingLevel" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>

      <param name="horizontalPosition" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>
      <param name="verticalPosition" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>
      <param name="frontVerticalPosition" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>
      <param name="backVerticalPosition" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>
      <param name="backTiltAngle" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>

      <param name="headSupportHorizontalPosition" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>
      <param name="headSupportVerticalPosition" type="Integer" minvalue="0" maxvalue="100" mandatory="false"></param>

      <param name="massageEnabled" type="Boolean" mandatory="false"></param>
      <param name="massageMode" type="MassageModeData" minsize="1" maxsize="2" array="true" mandatory="false"></param>
      <param name="massageCushionFirmness" type="MassageCushionFirmness" minsize="1" maxsize="5" array="true" mandatory="false"></param>
      <param name="memory" type="SeatMemoryAction" mandatory="false"></param>
    </struct>

    <struct name="SeatControlCapabilities">
      <param name="moduleName" type="String" maxlength="100"  mandatory="true">
        <description>
        The short friendly name of the light control module.
        It should not be used to identify a module by mobile application.
        </description>
      </param>
      <param name="moduleInfo" type="ModuleInfo" mandatory="false">
          <description>Information about a RC module, including its id. </description>
      </param>
      <param name="heatingEnabledAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="coolingEnabledAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="heatingLevelAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="coolingLevelAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="horizontalPositionAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="verticalPositionAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="frontVerticalPositionAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="backVerticalPositionAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="backTiltAngleAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="headSupportHorizontalPositionAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="headSupportVerticalPositionAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="massageEnabledAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="massageModeAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="massageCushionFirmnessAvailable" type="Boolean" mandatory="false">
      </param>
      <param name="memoryAvailable" type="Boolean" mandatory="false">
      </param>
    </struct>

 <enum name="RadioBand">
   <element name="AM"/>
   <element name="FM"/>
   <element name="XM"/>
 </enum>

 <struct name="RdsData">
  <param name="PS" type="String" minlength="0" maxlength="8" mandatory="false">
     <description>Program Service Name</description>
   </param>
  <param name="RT" type="String" minlength="0" maxlength="64" mandatory="false">
     <description>Radio Text</description>
   </param>
   <param name="CT" type="String" minlength="24" maxlength="24" mandatory="false">
     <description>The clock text in UTC format as YYYY-MM-DDThh:mm:ss.sTZD</description>
   </param>
  <param name="PI" type="String" minlength="0" maxlength="6" mandatory="false">
     <description>Program Identification - the call sign for the radio station</description>
   </param>
  <param name="PTY" type="Integer" minvalue="0" maxvalue="31" mandatory="false">
     <description>The program type - The region should be used to differentiate between EU and North America program types</description>
   </param>
  <param name="TP" type="Boolean" mandatory="false">
     <description>Traffic Program Identification - Identifies a station that offers traffic</description>
   </param>
  <param name="TA" type="Boolean" mandatory="false">
     <description>Traffic Announcement Identification - Indicates an ongoing traffic announcement</description>
   </param>
  <param name="REG" type="String" mandatory="false">
     <description>Region</description>
   </param>
 </struct>

 <enum name="RadioState">
   <element name="ACQUIRING"/>
   <element name="ACQUIRED"/>
   <element name="MULTICAST"/>
   <element name="NOT_FOUND"/>
 </enum>

 <struct name="StationIDNumber">
     <param name="countryCode" type="Integer" minvalue="0" maxvalue="999"  mandatory="false">
         <description>Binary Representation of ITU Country Code. USA Code is 001.</description>
     </param>
     <param name="fccFacilityId" type="Integer" minvalue="0" maxvalue="999999"  mandatory="false">
         <description>Binary representation  of unique facility ID assigned by the FCC; FCC controlled for U.S. territory</description>
     </param>
 </struct>

 <struct name="GPSData">
   <description>Struct with the GPS data.</description>
   <param name="longitudeDegrees" type="Float" minvalue="-180" maxvalue="180" mandatory="true">
   </param>
   <param name="latitudeDegrees" type="Float" minvalue="-90" maxvalue="90" mandatory="true">
   </param>
   <param name="utcYear" type="Integer" minvalue="2010" maxvalue="2100" mandatory="false">
       <description>The current UTC year.</description>
   </param>
   <param name="utcMonth" type="Integer" minvalue="1" maxvalue="12" mandatory="false">
       <description>The current UTC month.</description>
  </param>
   <param name="utcDay" type="Integer" minvalue="1" maxvalue="31" mandatory="false">
      <description>The current UTC day.</description>
   </param>
   <param name="utcHours" type="Integer" minvalue="0" maxvalue="23" mandatory="false">
       <description>The current UTC hour.</description>
   </param>
   <param name="utcMinutes" type="Integer" minvalue="0" maxvalue="59" mandatory="false">
       <description>The current UTC minute.</description>
   </param>
   <param name="utcSeconds" type="Integer" minvalue="0" maxvalue="59" mandatory="false">
       <description>The current UTC second.</description>
   </param>
   <param name="compassDirection" type="Common.CompassDirection" mandatory="false">
       <description>See CompassDirection.</description>
   </param>
   <param name="pdop" type="Float" minvalue="0" maxvalue="1000" mandatory="false">
       <description>PDOP.</description>
   </param>
   <param name="hdop" type="Float" minvalue="0" maxvalue="1000" mandatory="false">
       <description>HDOP.</description>
   </param>
   <param name="vdop" type="Float" minvalue="0" maxvalue="1000" mandatory="false">
       <description>VDOP.</description>
   </param>
   <param name="actual" type="Boolean" mandatory="false">
       <description>
         True, if actual.
         False, if infered.
       </description>
   </param>
   <param name="satellites" type="Integer" minvalue="0" maxvalue="31" mandatory="false">
       <description>Number of satellites in view</description>
   </param>
   <param name="dimension" type="Common.Dimension" mandatory="false">
       <description>See Dimension</description>
   </param>
   <param name="altitude" type="Float" minvalue="-10000" maxvalue="10000" mandatory="false">
       <description>Altitude in meters</description>
   </param>
   <param name="heading" type="Float" minvalue="0" maxvalue="359.99" mandatory="false">
       <description>The heading. North is 0. Resolution is 0.01</description>
   </param>
   <param name="speed" type="Float" minvalue="0" maxvalue="500" mandatory="false">
       <description>The speed in KPH</description>
   </param>
   <param name="shifted" type="Boolean" mandatory="false">
       <description>
           True, if GPS lat/long, time, and altitude have been purposefully shifted (requires a proprietary algorithm to unshift).
           False, if the GPS data is raw and un-shifted.
           If not provided, then value is assumed False.
       </description>
   </param>
 </struct>

 <struct name="SisData">
     <param name="stationShortName" type="String" minlength="4" maxlength="7"  mandatory="false">
         <description>Identifies the 4-alpha-character station call sign plus an optional (-FM) extension</description>
     </param>
     <param name="stationIDNumber" type="StationIDNumber"  mandatory="false">
         <description>Used for network Application. Consists of Country Code and FCC Facility ID.</description>
     </param>
     <param name="stationLongName" type="String" minlength="0" maxlength="56"  mandatory="false">
         <description>Identifies the station call sign or other identifying information in the long format.</description>
     </param>
     <param name="stationLocation" type="GPSData" mandatory="false">
         <description>Provides the 3-dimensional geographic station location.</description>
     </param>
     <param name="stationMessage" type="String" minlength="0" maxlength="56"  mandatory="false">
         <description>May be used to convey textual information of general interest to the consumer such as weather forecasts or public service announcements. Includes a high priority delivery feature to convey emergencies that may be in the listening area.</description>
     </param>
 </struct>

 <struct name="RadioControlData">
   <param name="frequencyInteger" type="Integer" minvalue="0" maxvalue="1710" mandatory="false">
     <description>The integer part of the frequency ie for 101.7 this value should be 101</description>
   </param>
   <param name="frequencyFraction" type="Integer" minvalue="0" maxvalue="9" mandatory="false">
     <description>The fractional part of the frequency for 101.7 is 7</description>
   </param>
   <param name="band" type="Common.RadioBand" mandatory="false">
   </param>
   <param name="rdsData" type="Common.RdsData" mandatory="false">
   </param>
   <param name="hdRadioEnable" type="Boolean" mandatory="false">
     <description> True if the hd radio is on, false is the radio is off</description>
   </param>
   <param name="availableHDs" type="Integer" minvalue="1" maxvalue="7" mandatory="false">
    <description>
       Number of HD sub-channels if available.
       Note that this parameter is deprecated in MOBILE API.
    </description>
   </param>
   <param name="availableHdChannels" type="Integer" minvalue="0" maxvalue="7" array="true" minsize="0" maxsize="8" mandatory="false">
     <description>The list of available hd sub-channel indexes. Empty list means no Hd channel is available. Read-only.</description>
   </param>
   <param name="hdChannel" type="Integer" minvalue="0" maxvalue="7" mandatory="false">
     <description>Current HD sub-channel if available</description>
   </param>
   <param name="signalStrength" type="Integer" minvalue="0" maxvalue="100" mandatory="false">
   </param>
   <param name="signalChangeThreshold" type="Integer" minvalue="0" maxvalue="100" mandatory="false">
     <description>If the signal strength falls below the set value for this parameter, the radio will tune to an alternative frequency</description>
   </param>
   <param name="radioEnable" type="Boolean" mandatory="false">
     <description> True if the radio is on, false is the radio is off</description>
   </param>
   <param name="state" type="Common.RadioState" mandatory="false">
   </param>
   <param name="sisData" type="SisData" mandatory="false">
       <description>Read-only Station Information Service (SIS) data provides basic information about the station such as call sign, as well as information not displayable to the consumer such as the station identification number</description>
   </param>
 </struct>

 <struct name="RadioControlCapabilities">
   <description>Contains information about a radio control module's capabilities.</description>
   <param name="moduleName" type="String" maxlength="100" mandatory="true" >
     <description>The short name or a short description of the radio control module.</description>
   </param>
   <param name="moduleInfo" type="ModuleInfo" mandatory="false">
       <description>Information about a RC module, including its id. </description>
   </param>
   <param name="radioEnableAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of enable/disable radio.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="radioBandAvailable" type="Boolean" mandatory="false" >
     <description>
       Availability of the control of radio band.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="radioFrequencyAvailable" type="Boolean" mandatory="false" >
     <description>
       Availability of the control of radio frequency.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="hdChannelAvailable" type="Boolean" mandatory="false" >
     <description>
       Availability of the control of HD radio channel.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="rdsDataAvailable" type="Boolean" mandatory="false" >
     <description>
       Availability of the getting Radio Data System (RDS) data.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="availableHDsAvailable" type="Boolean" mandatory="false" >
   <description>
       Availability of the getting the number of available HD channels.
       True: Available, False: Not Available, Not present: Not Available.
       Note that this parameter is deprecated in MOBILE API
     </description>
   </param>

   <param name="availableHdChannelsAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the list of available HD sub-channel indexes.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="stateAvailable" type="Boolean" mandatory="false" >
     <description>
       Availability of the getting the Radio state.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="signalStrengthAvailable" type="Boolean" mandatory="false" >
     <description>
       Availability of the getting the signal strength.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="signalChangeThresholdAvailable" type="Boolean" mandatory="false" >
     <description>
       Availability of the getting the signal Change Threshold.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="sisDataAvailable" type="Boolean" mandatory="false">
       <description>
         Availability of the getting HD radio Station Information Service (SIS) data.
         True: Available, False: Not Available, Not present: Not Available.
       </description>
   </param>
   <param name="hdRadioEnableAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of enable/disable HD radio.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="siriusxmRadioAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of sirius XM radio.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
 </struct>

 <enum name="DefrostZone">
   <element name="FRONT"/>
   <element name="REAR"/>
   <element name="ALL"/>
   <element name="NONE"/>
 </enum>

 <enum name="VentilationMode">
   <element name="UPPER"/>
   <element name="LOWER"/>
   <element name="BOTH"/>
   <element name="NONE"/>
 </enum>

 <enum name="TemperatureUnit">
   <element name="FAHRENHEIT"/>
   <element name="CELSIUS"/>
 </enum>

 <struct name="Temperature">
    <param name="unit" type="TemperatureUnit" mandatory="true" >
      <description>Temperature Unit</description>
    </param>
    <param name="value" type="Float" mandatory="true" >
      <description>Temperature Value in TemperatureUnit specified unit. Range depends on OEM and is not checked by SDL.</description>
    </param>
  </struct>

 <struct name="ClimateControlData">
   <param name="fanSpeed" type="Integer" minvalue="0" maxvalue="100" mandatory="false">
   </param>
   <param name="currentTemperature" type="Common.Temperature" mandatory="false">
   </param>
   <param name="desiredTemperature" type="Common.Temperature" mandatory="false">
   </param>
   <param name="acEnable" type="Boolean" mandatory="false">
   </param>
   <param name="circulateAirEnable" type="Boolean" mandatory="false">
   </param>
   <param name="autoModeEnable" type="Boolean" mandatory="false">
   </param>
   <param name="defrostZone" type="DefrostZone" mandatory="false">
   </param>
   <param name="dualModeEnable" type="Boolean" mandatory="false">
   </param>
   <param name="acMaxEnable" type="Boolean" mandatory="false">
   </param>
   <param name="ventilationMode" type="Common.VentilationMode" mandatory="false">
   </param>
   <param name="heatedSteeringWheelEnable" type="Boolean" mandatory="false">
       <description>value false means disabled/turn off, value true means enabled/turn on.</description>
   </param>
   <param name="heatedWindshieldEnable" type="Boolean" mandatory="false">
       <description>value false means disabled, value true means enabled.</description>
   </param>
   <param name="heatedRearWindowEnable" type="Boolean" mandatory="false">
       <description>value false means disabled, value true means enabled.</description>
   </param>
   <param name="heatedMirrorsEnable" type="Boolean" mandatory="false">
       <description>value false means disabled, value true means enabled.</description>
   </param>
   <param name="climateEnable" type="Boolean" mandatory="false">
   </param>
 </struct>

   <struct name="ClimateControlCapabilities">
   <description>Contains information about a climate control module's capabilities.</description>
   <param name="moduleName" type="String" maxlength="100" mandatory="true" >
     <description>The short name or a short description of the climate control module.</description>
   </param>
   <param name="moduleInfo" type="ModuleInfo" mandatory="false">
       <description>Information about a RC module, including its id. </description>
   </param>
   <param name="currentTemperatureAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the reading of current temperature.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="fanSpeedAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of fan speed.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="desiredTemperatureAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of desired temperature.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="acEnableAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of turn on/off AC.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="acMaxEnableAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of enable/disable air conditioning is ON on the maximum level.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="circulateAirEnableAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of enable/disable circulate Air mode.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="autoModeEnableAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of enable/disable auto mode.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="dualModeEnableAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of enable/disable dual mode.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="defrostZoneAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of defrost zones.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="defrostZone" type="Common.DefrostZone" minsize="1" maxsize="100" array="true" mandatory="false">
     <description>
       A set of all defrost zones that are controllable.
     </description>
   </param>
   <param name="ventilationModeAvailable" type="Boolean" mandatory="false">
     <description>
       Availability of the control of air ventilation mode.
       True: Available, False: Not Available, Not present: Not Available.
     </description>
   </param>
   <param name="ventilationMode" type="Common.VentilationMode" minsize="1" maxsize="100" array="true" mandatory="false">
     <description>
       A set of all ventilation modes that are controllable.
     </description>
   </param>
   <param name="heatedSteeringWheelAvailable" type="Boolean" mandatory="false">
       <description>
         Availability of the control (enable/disable) of heated Steering Wheel.
         True: Available, False: Not Available, Not present: Not Available.
       </description>
   </param>
   <param name="heatedWindshieldAvailable" type="Boolean" mandatory="false">
       <description>
         Availability of the control (enable/disable) of heated Windshield.
         True: Available, False: Not Available, Not present: Not Available.
       </description>
   </param>
   <param name="heatedRearWindowAvailable" type="Boolean" mandatory="false">
       <description>
         Availability of the control (enable/disable) of heated Rear Window.
         True: Available, False: Not Available, Not present: Not Available.
       </description>
   </param>
   <param name="heatedMirrorsAvailable" type="Boolean" mandatory="false">
       <description>
         Availability of the control (enable/disable) of heated Mirrors.
         True: Available, False: Not Available, Not present: Not Available.
       </description>
   </param>
   <param name="climateEnableAvailable" type="Boolean" mandatory="false">
       <description>
         Availability of the control of enable/disable climate control.
         True: Available, False: Not Available, Not present: Not Available.
       </description>
   </param>
 </struct>

 <struct name="EqualizerSettings">
     <description>Defines the each Equalizer channel settings.</description>
     <param name="channelId" type="Integer" minvalue="1" maxvalue="100" mandatory="true"></param>
     <param name="channelName" type="String" mandatory="false" maxlength="50">
         <description>read-only channel / frequency name (e.i. "Treble, Midrange, Bass" or "125 Hz")</description>
     </param>
     <param name="channelSetting" type="Integer" minvalue="0" maxvalue="100" mandatory="true"></param>
 </struct>

 <struct name="AudioControlData">
     <param name="source" type="PrimaryAudioSource" mandatory="false">
         <description>
           In a getter response or a notification, it is the current primary audio source of the system.
           In a setter request, it is the target audio source that the system shall switch to.
           If the value is MOBILE_APP, the system shall switch to the mobile media app that issues the setter RPC.
         </description>
     </param>
     <param name="keepContext" type="Boolean" mandatory="false">
         <description>
           This parameter shall not be present in any getter responses or notifications.
           This parameter is optional in a setter request. The default value is false.
           If it is false, the system not only changes the audio source but also brings the default application
           or system UI associated with the audio source to foreground.
           If it is true, the system changes the audio source, but still keeps the current application in foreground.
         </description>
     </param>
     <param name="volume" type="Integer" mandatory="false" minvalue="0" maxvalue="100">
         <description>Reflects the volume of audio, from 0%-100%.</description>
     </param>
     <param name="equalizerSettings" type="EqualizerSettings" minsize="1" maxsize="100" mandatory="false" array="true">
         <description>Defines the list of supported channels (band) and their current/desired settings on HMI</description>
     </param>
 </struct>

 <struct name="AudioControlCapabilities">
     <param name="moduleName" type="String" maxlength="100" mandatory="true">
         <description>
           The short friendly name of the light control module.
           It should not be used to identify a module by mobile application.
         </description>
     </param>
     <param name="moduleInfo" type="ModuleInfo" mandatory="false">
         <description>Information about a RC module, including its id. </description>
     </param>
     <param name="sourceAvailable" type="Boolean" mandatory="false">
         <description>Availability of the control of audio source. </description>
     </param>
     <param name="keepContextAvailable" type="Boolean" mandatory="false">
         <description>Availability of the keepContext paramter. </description>
     </param>
     <param name="volumeAvailable" type="Boolean" mandatory="false">
         <description>Availability of the control of audio volume.</description>
     </param>
     <param name="equalizerAvailable" type="Boolean" mandatory="false">
         <description>Availability of the control of Equalizer Settings.</description>
     </param>
     <param name="equalizerMaxChannelId" type="Integer" minvalue="1" maxvalue="100" mandatory="false">
         <description>Must be included if equalizerAvailable=true, and assume all IDs starting from 1 to this value are valid</description>
     </param>
 </struct>


 <struct name="RGBColor">
     <param name="red" type="Integer" minvalue="0" maxvalue="255" mandatory="true" />
     <param name="green" type="Integer" minvalue="0" maxvalue="255" mandatory="true" />
     <param name="blue" type="Integer" minvalue="0" maxvalue="255" mandatory="true" />
 </struct>

 <enum name="LightName">
     <!-- Common Single Light 0~500 -->
     <element name="FRONT_LEFT_HIGH_BEAM" value="0"/>
     <element name="FRONT_RIGHT_HIGH_BEAM" value="1"/>
     <element name="FRONT_LEFT_LOW_BEAM" value="2"/>
     <element name="FRONT_RIGHT_LOW_BEAM" value="3"/>
     <element name="FRONT_LEFT_PARKING_LIGHT" value="4"/>
     <element name="FRONT_RIGHT_PARKING_LIGHT" value="5"/>
     <element name="FRONT_LEFT_FOG_LIGHT" value="6"/>
     <element name="FRONT_RIGHT_FOG_LIGHT" value="7"/>
     <element name="FRONT_LEFT_DAYTIME_RUNNING_LIGHT" value="8"/>
     <element name="FRONT_RIGHT_DAYTIME_RUNNING_LIGHT" value="9"/>
     <element name="FRONT_LEFT_TURN_LIGHT" value="10"/>
     <element name="FRONT_RIGHT_TURN_LIGHT" value="11"/>
     <element name="REAR_LEFT_FOG_LIGHT" value="12"/>
     <element name="REAR_RIGHT_FOG_LIGHT" value="13"/>
     <element name="REAR_LEFT_TAIL_LIGHT" value="14"/>
     <element name="REAR_RIGHT_TAIL_LIGHT" value="15"/>
     <element name="REAR_LEFT_BRAKE_LIGHT" value="16"/>
     <element name="REAR_RIGHT_BRAKE_LIGHT" value="17"/>
     <element name="REAR_LEFT_TURN_LIGHT" value="18"/>
     <element name="REAR_RIGHT_TURN_LIGHT" value="19"/>
     <element name="REAR_REGISTRATION_PLATE_LIGHT" value="20"/>

     <!-- Exterior Lights by common function groups 501~800 -->
     <element name="HIGH_BEAMS" value="501">
         <description>Include all high beam lights: front_left and front_right.</description>
     </element>
     <element name="LOW_BEAMS" value="502">
         <description>Include all low beam lights: front_left and front_right.</description>
     </element>
     <element name="FOG_LIGHTS" value="503">
         <description>Include all fog lights: front_left, front_right, rear_left and rear_right.</description>
     </element>
     <element name="RUNNING_LIGHTS" value="504">
         <description>Include all daytime running lights: front, left and right.</description>
     </element>
     <element name="PARKING_LIGHTS" value="505">
         <description>Include all parking lights: front_left and front_right.</description>
     </element>
     <element name="BRAKE_LIGHTS" value="506">
         <description>Include all brake lights: rear_left and rear_right.</description>
     </element>
     <element name="REAR_REVERSING_LIGHTS" value="507"/>
     <element name="SIDE_MARKER_LIGHTS" value="508"/>
     <element name="LEFT_TURN_LIGHTS" value="509">
         <description>Include all left turn signal lights: front_left, rear_left, left_side and mirror_mounted.</description>
     </element>
     <element name="RIGHT_TURN_LIGHTS" value="510">
         <description>Include all right turn signal lights: front_right, rear_right, right_side and mirror_mounted.</description>
     </element>
     <element name="HAZARD_LIGHTS" value="511">
         <description>Include all hazard lights: front_left, front_right, rear_left and rear_right.</description>
     </element>
     <element name="REAR_CARGO_LIGHTS" value="512">
         <description>Cargo lamps illuminate the cargo area.</description>
     </element>
     <element name="REAR_TRUCK_BED_LIGHTS" value="513">
         <description>Truck bed lamps light up the bed of the truck.</description>
     </element>
     <element name="REAR_TRAILER_LIGHTS" value="514">
         <description>Trailer lights are lamps mounted on a trailer hitch.</description>
     </element>
     <element name="LEFT_SPOT_LIGHTS" value="515">
         <description>It is the spotlights mounted on the left side of a vehicle.</description>
     </element>
     <element name="RIGHT_SPOT_LIGHTS" value="516">
         <description>It is the spotlights mounted on the right side of a vehicle.</description>
     </element>
     <element name="LEFT_PUDDLE_LIGHTS" value="517">
         <description>Puddle lamps illuminate the ground beside the door as the customer is opening or approaching the door.</description>
     </element>
     <element name="RIGHT_PUDDLE_LIGHTS" value="518">
         <description>Puddle lamps illuminate the ground beside the door as the customer is opening or approaching the door.</description>
     </element>

     <!-- Interior Lights by common function groups 801~900 -->
     <element name="AMBIENT_LIGHTS" value="801"/>
     <element name="OVERHEAD_LIGHTS" value="802"/>
     <element name="READING_LIGHTS" value="803"/>
     <element name="TRUNK_LIGHTS" value="804"/>

     <!-- Lights by location 901~1000-->
     <element name="EXTERIOR_FRONT_LIGHTS" value="901">
         <description>Include exterior lights located in front of the vehicle. For example, fog lights and low beams.</description>
     </element>
     <element name="EXTERIOR_REAR_LIGHTS" value="902">
         <description>Include exterior lights located at the back of the vehicle. For example, license plate lights, reverse lights, cargo lights, bed lights an trailer assist lights.</description>
     </element>
     <element name="EXTERIOR_LEFT_LIGHTS" value="903">
         <description>Include exterior lights located at the left side of the vehicle. For example, left puddle lights and spot lights.</description>
     </element>
     <element name="EXTERIOR_RIGHT_LIGHTS" value="904">
         <description>Include exterior lights located at the right side of the vehicle. For example, right puddle lights and spot lights.</description>
     </element>
     <element name="EXTERIOR_ALL_LIGHTS" value="905">
         <description> Include all exterior lights around the vehicle.</description>
     </element>
 </enum>

 <enum name="LightStatus">
     <element name="ON"/>
     <element name="OFF"/>
     <element name="RAMP_UP"/>
     <element name="RAMP_DOWN"/>
     <element name="UNKNOWN"/>
     <element name="INVALID"/>
 </enum>

 <struct name="LightCapabilities">
     <param name="name" type="LightName" mandatory="true" />
     <param name="statusAvailable" type="Boolean" mandatory="false">
       <description>
         Indicates if the status (ON/OFF) can be set remotely. App shall not use read-only values (RAMP_UP/RAMP_DOWN/UNKNOWN/INVALID) in a setInteriorVehicleData request.
       </description>
     </param>
     <param name="densityAvailable" type="Boolean" mandatory="false">
         <description>
           Indicates if the light's density can be set remotely (similar to a dimmer).
         </description>
     </param>
     <param name="rgbColorSpaceAvailable" type="Boolean" mandatory="false">
         <description>
           Indicates if the light's color can be set remotely by using the RGB color space.
         </description>
     </param>
 </struct>

 <struct name="LightControlCapabilities">
     <param name="moduleName" type="String" maxlength="100" mandatory="true">
         <description>
           The short friendly name of the light control module.
           It should not be used to identify a module by mobile application.
         </description>
     </param>
     <param name="moduleInfo" type="ModuleInfo" mandatory="false">
         <description>Information about a RC module, including its id. </description>
     </param>
     <param name="supportedLights" type="LightCapabilities" minsize="1" maxsize="100" array="true" mandatory="true">
     <description> An array of available light names that are controllable. </description>
     </param>
 </struct>

 <struct name="LightState">
     <param name="id" type="LightName" mandatory="true">
         <description>The name of a light or a group of lights. </description>
     </param>
     <param name="status" type="LightStatus" mandatory="true"/>
     <param name="density" type="Float" minvalue="0" maxvalue="1" mandatory="false" />
     <param name="color" type="RGBColor" mandatory="false" />
 </struct>

 <struct name="LightControlData">
     <param name="lightState" type="LightState" mandatory="true" minsize="1" maxsize="100" array="true">
         <description>An array of LightNames and their current or desired status. No change to the status of the LightNames that are not listed in the array.</description>
     </param>
 </struct>

 <enum name="DisplayMode">
     <element name="DAY"/>
     <element name="NIGHT"/>
     <element name="AUTO"/>
 </enum>
 <enum name="DistanceUnit">
     <element name="MILES"/>
     <element name="KILOMETERS"/>
 </enum>

 <struct name="HMISettingsControlData">
     <description>Corresponds to "HMI_SETTINGS" ModuleType</description>
     <param name="displayMode" type="DisplayMode" mandatory="false"></param>
     <param name="temperatureUnit" type="TemperatureUnit" mandatory="false"></param>
     <param name="distanceUnit" type="DistanceUnit" mandatory="false"></param>
 </struct>

 <struct name="HMISettingsControlCapabilities">
     <param name="moduleName" type="String" maxlength="100" mandatory="true">
         <description>
           The short friendly name of the hmi setting module.
           It should not be used to identify a module by mobile application.
         </description>
     </param>
     <param name="moduleInfo" type="ModuleInfo" mandatory="false">
         <description>Information about a RC module, including its id. </description>
     </param>
     <param name="distanceUnitAvailable" type="Boolean" mandatory="false">
         <description>Availability of the control of distance unit. </description>
     </param>
     <param name="temperatureUnitAvailable" type="Boolean" mandatory="false">
         <description>Availability of the control of temperature unit. </description>
     </param>
     <param name="displayModeUnitAvailable" type="Boolean" mandatory="false">
         <description>Availability of the control of HMI display mode. </description>
     </param>
 </struct>

 <struct name="ModuleData">
   <description>The moduleType indicates which type of data should be changed and identifies which data object exists in this struct. For example, if the moduleType is CLIMATE then a "climateControlData" should exist</description>
   <param name="moduleType" type="Common.ModuleType" mandatory="true" >
   </param>
   <param name="moduleId" type="String" maxlength="100" mandatory="false">
       <description>Id of a module, published by System Capability. </description>
   </param>
   <param name="radioControlData" type="Common.RadioControlData" mandatory="false">
   </param>
   <param name="climateControlData" type="Common.ClimateControlData" mandatory="false">
   </param>
   <param name="seatControlData" type="SeatControlData" mandatory="false">
   </param>
   <param name="audioControlData" type="AudioControlData" mandatory="false">
   </param>
   <param name="lightControlData" type="LightControlData" mandatory="false">
   </param>
   <param name="hmiSettingsControlData" type="HMISettingsControlData" mandatory="false">
   </param>
 </struct>

<enum name="RCAccessMode">
    <description>Enumeration that describes possible remote control access mode the application might be in on HU.</description>
    <element name="AUTO_ALLOW"/>
    <element name="AUTO_DENY"/>
    <element name="ASK_DRIVER"/>
</enum>

<!-- End Remote Control -->
<struct name="TextField">
  <param name="name" type="Common.TextFieldName" mandatory="true">
    <description>The name that identifies the field. See TextFieldName.</description>
  </param>
  <param name="characterSet" type="Common.CharacterSet" mandatory="true">
    <description>The character set that is supported in this field. See CharacterSet.</description>
  </param>
  <param name="width" type="Integer" minvalue="1" maxvalue="500" mandatory="true">
    <description>The number of characters in one row of this field.</description>
  </param>
  <param name="rows" type="Integer" minvalue="1" maxvalue="8" mandatory="true">
    <description>The number of rows of this field.</description>
  </param>
</struct>

<struct name="ButtonCapabilities">
    <description>Contains the information about capabilities of a button.</description>
    <param name="name" type="Common.ButtonName" mandatory="true">
        <description>The name of the Button from the ButtonName enum</description>
    </param>
    <param name="moduleInfo" type="ModuleInfo" mandatory="false">
        <description>Information about a RC module, including its id. </description>
    </param>
    <param name="shortPressAvailable" type="Boolean" mandatory="true">
        <description>The button supports a short press. Whenever the button is pressed short, onButtonPressed(SHORT) should be invoked.</description>
    </param>
    <param name="longPressAvailable" type="Boolean" mandatory="true">
        <description>The button supports a LONG press. Whenever the button is pressed long, onButtonPressed(LONG) should be invoked.</description>
    </param>
    <param name="upDownAvailable" type="Boolean" mandatory="true">
        <description>The button supports "button down" and "button up". Whenever the button is pressed, onButtonEvent(DOWN) should be invoked. Whenever the button is released, onButtonEvent(UP) should be invoked.</description>
    </param>
</struct>

<struct name="VehicleDataResult">
  <description>Individual published data request result</description>
  <param name="dataType" type="Common.VehicleDataType" mandatory="true">
    <description>Defined published data element type.</description>
  </param>
  <param name="resultCode" type="Common.VehicleDataResultCode" mandatory="true">
    <description>Published data result code.</description>
  </param>
</struct>

<struct name="TouchCoord">
  <param name="x" type="Integer" mandatory="true" minvalue="0" maxvalue="10000">
    <description>The x coordinate of the touch.</description>
  </param>
  <param name="y" type="Integer" mandatory="true" minvalue="0" maxvalue="10000">
    <description>The y coordinate of the touch.</description>
  </param>
</struct>

<struct name="TouchEvent">
  <param name="id" type="Integer" mandatory="true" minvalue="0" maxvalue="9">
    <description>
      A touch's unique identifier.  The application can track the current touch events by id.
      If a touch event has type begin, the id should be added to the set of touches.
      If a touch event has type end, the id should be removed from the set of touches.
    </description>
  </param>
  <param name="ts" type="Integer" mandatory="true" array="true" minvalue="0" maxvalue="2147483647" minsize="1" maxsize="1000">
    <description>
      The time that the touch was recorded.  This number can the time since the beginning of the session or something else as long as the units are in milliseconds.
      The timestamp is used to determined the rate of change of position of a touch.
      The application also uses the time to verify whether two touches, with different ids, are part of a single action by the user.
      If there is only a single timestamp in this array, it is the same for every coordinate in the coordinates array.
    </description>
  </param>
  <param name="c" type="Common.TouchCoord" mandatory="true" array="true" minsize="1" maxsize="1000">
  </param>
</struct>

<struct name="PresetBankCapabilities">
    <description>Contains information about on-screen preset capabilities (whether the HW preset buttons could be duplicated with onscreen buttons).</description>
    <param name="onScreenPresetsAvailable" type="Boolean" mandatory="true">
        <description>Must be true if onscreen custom presets are available.</description>
    </param>
</struct>

<struct name="Image">
  <param name="value" maxlength="65535" type="String" mandatory="true">
    <description>The path to the dynamic image stored on HU or the static binary image itself.</description>
  </param>
  <param name="imageType" type="Common.ImageType" mandatory="true">
    <description>Describes, whether it is a static or dynamic image.</description>
  </param>
  <param name="isTemplate" type="Boolean" mandatory="false">
    <description>Optional value to specify whether it's a template image. A template image can be (re)colored by the HMI as needed by using an image pattern</description>
  </param>
</struct>

<struct name="DeviceInfo">
  <param name="name" type="String" mandatory="true">
    <description>The name of the device connected.</description>
  </param>
  <param name="id" type="String" mandatory="true">
    <description>The ID of the device connectedi: either hash of device's USB serial number(in case of USB connection) or has of device's MAC address(in case of BlueTooth or WIFI connection</description>
  </param>
  <param name="transportType" type="Common.TransportType" mandatory="false">
    <description>The transport type the named-app's-device is connected over HU(BlueTooth, USB or WiFi). It must be provided in OnAppRegistered and in UpdateDeviceList</description>
  </param>
  <param name="isSDLAllowed" type="Boolean" mandatory="false">
    <description>Sent by SDL in UpdateDeviceList. ’true’ – if device is allowed for PolicyTable Exchange; ‘false’ – if device is NOT allowed for PolicyTable Exchange </description>
  </param>
</struct>

<struct name="SoftButton">
    <param name="type" type="Common.SoftButtonType" mandatory="true">
      <description>Describes, whether text, icon or both text and image should be displayed on the soft button. See softButtonType</description>
    </param>
    <param name="text" maxlength="500" type="String" mandatory="false">
      <description>Optional text to be displayed (if defined as TEXT or BOTH)</description>
    </param>
    <param name="image" type="Common.Image" mandatory="false">
      <description>Optional image struct for SoftButton (if defined as IMAGE or BOTH)</description>
    </param>
    <param name="isHighlighted" type="Boolean" mandatory="false">
      <description>If true, must be highlighted</description>
      <description>If false, must be not</description>
    </param>
    <param name="softButtonID" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
      <description>Value which must be returned via OnButtonPress / OnButtonEvent</description>
    </param>
    <param name="systemAction" type="Common.SystemAction" mandatory="true">
      <description>Parameter indicates whether clicking a SoftButton must call a specific system action.  See SystemAction</description>
    </param>
 </struct>

<struct name="TTSChunk">
    <description>A TTS chunk, that consists of text/phonemes to speak or the name of a file to play, and a TTS type (like text or SAPI)</description>
    <param name="text" type="String" mandatory="true" maxlength="500">
        <description>The text or phonemes to be spoken, or the name of an audio file to play.</description>
    </param>
    <param name="type" type="Common.SpeechCapabilities" mandatory="true">
      <description>Describes whether the TTS chunk is plain text, a specific phoneme set, or an audio file. See SpeechCapabilities.</description>
    </param>
</struct>


<struct name="TemplateColorScheme">
  <description>
    A color scheme for all display layout templates.
  </description>
  <param name="primaryColor" type="Common.RGBColor" mandatory="false">
    <description>The primary "accent" color</description>
  </param>
  <param name="secondaryColor" type="Common.RGBColor" mandatory="false">
      <description>The secondary "accent" color</description>
  </param>
  <param name="backgroundColor" type="Common.RGBColor" mandatory="false">
    <description>The color of the background</description>
  </param>
</struct>

<struct name="TemplateConfiguration">
  <param name="template" type="String" maxlength="500" mandatory="true">
    <description>
      Predefined or dynamically created window template.
      Currently only predefined window template layouts are defined.
    </description>
  </param>
  <param name="dayColorScheme" type="TemplateColorScheme" mandatory="false" />
  <param name="nightColorScheme" type="TemplateColorScheme" mandatory="false" />
</struct>

<struct name="HMIApplication">
    <description>Data type containing information about application needed by HMI.</description>
    <param name="appName" type="String" maxlength="100" mandatory="true">
      <description>The mobile application name, e.g. "Ford Drive Green".</description>
    </param>
    <param name="ngnMediaScreenAppName" type="String" maxlength="100" mandatory="false">
      <description>Provides an abbreviated version of the app name (if needed), that may be displayed on the NGN media screen.</description>
      <description>If not provided, the appName should be used instead (and may be truncated if too long)</description>
    </param>
    <param name="icon" type="String" mandatory="false">
      <description>Path to application icon stored on HU.</description>
    </param>
    <param name="deviceInfo" type="Common.DeviceInfo" mandatory="true">
       <description>The ID, serial number, transport type the named-app's-device is connected over to HU.</description>
    </param>
    <param name="secondaryDeviceInfo" type="Common.DeviceInfo" mandatory="false">
       <description>The ID, serial number, transport type that are acquired through Secondary Transport.</description>
    </param>
    <param name="policyAppID" type="String" maxlength="50" minlength="1" mandatory="true">
      <description>Policy ID(=the appID the application registers with) of registered application.</description>
    </param>
    <param name="ttsName" type="Common.TTSChunk" minsize="1" maxsize="100" array="true" mandatory="false" >
      <description>
        TTS string for VR recognition of the mobile application name, e.g. "Ford Drive Green".
        Meant to overcome any failing on speech engine in properly pronouncing / understanding app name.
        May not be empty.
        May not start with a new line character.
        Not unique value
      </description>
    </param>
    <param name="vrSynonyms" type="String" maxlength="40" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>
        Defines an additional voice recognition command.
        Must not interfere with any name of previously registered applications from the same device.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>Unique (during ignition cycle) id of the application. To be used in all RPCs sent by both HU system and SDL</description>
    </param>
    <param name="hmiDisplayLanguageDesired" type="Common.Language" mandatory="false">
      <description>The language the application intends to use on HU  </description>
    </param>
    <param name="isMediaApplication" type="Boolean" mandatory="false">
      <description>Indicates whether it is a media or a non-media application.</description>
    </param>
    <param name="appType" type="Common.AppHMIType" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>List of all applicable app types stating which classifications to be given to the app.</description>
      <description>e.g. for platforms like GEN2, this determines which "corner(s)" the app can populate.</description>
    </param>
    <param name="greyOut" type="Boolean" mandatory="false">
      <description>Indicates whether application should be dimmed on the screen.</description>
      <description>Applicable only for apps received through QueryApps and still not registered.</description>
    </param>
    <param name="requestType" type="Common.RequestType" minsize="0" maxsize="100" array="true" mandatory="false">
      <description>The list of SystemRequest's RequestTypes allowed by policies for the named application</description>
      <description>(the app's SystemRequest sent with RequestType out of this list will get 'disallowed' response from SDL).</description>
      <description>If SDL sends an empty array - any RequestType is allowed for this app.</description>
      <description>If SDL omits this parameter - none RequestType is allowed for this app</description>
      <description>(either this is a pre-registered app or such is dictated by policies).</description>
    </param>
    <param name="requestSubType" type="String" maxlength="100" minsize="0" maxsize="100" array="true" mandatory="false">
      <description>
        The list of SystemRequest's requestSubTypes allowed by policies for the named application.
        If the app sends a requestSubType which is not specified in this list, then that request should be rejected.
        An empty array signifies that any value of requestSubType is allowed for this app.
        If this parameter is omitted, then a request with any value of requestSubType is now allowed for this app
      </description>
    </param>
    <param name="dayColorScheme" type="Common.TemplateColorScheme" mandatory="false"></param>
    <param name="nightColorScheme" type="Common.TemplateColorScheme" mandatory="false"></param>
    <param name="isCloudApplication" type="Boolean" mandatory="false"></param>
    <param name="cloudConnectionStatus" type="Common.CloudConnectionStatus" mandatory="false"></param>
</struct>

<struct name="MenuParams">
  <param name="parentID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="false">
    <description>unique ID of the sub menu, the command must be added to.</description>
    <description>If not provided, the command must be added to the top level of the in application menu.</description>
  </param>
  <param name="position" type="Integer" minvalue="0" maxvalue="1000" mandatory="false">
    <description>Position within the items that are at the top level of the in application menu.</description>
    <description>0 should insert at the front.</description>
    <description>1 should insert at the second position.</description>
    <description>if position is greater than or equal to the number of items on the top level, the the sub menu/command should be appended to the end.</description>
    <description>If this param is omitted the entry should be added at the end.</description>
  </param>
  <param name="menuName" type="String" maxlength="500" mandatory="true">
    <description>The name of the sub menu/command.</description>
  </param>
</struct>

<enum name="MenuLayout">
    <description>How the main menu or submenu is laid out on screen</description>
    <element name="LIST" />
    <element name="TILES" />
</enum>

<struct name="Choice">
  <description>A choice is an option given to the user which can be selected either by menu, or through voice recognition system.</description>
  <param name="choiceID" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
    <description> The unique within the concerned application identifier for this choice </description>
  </param>
  <param name="menuName" type="String" maxlength="500" mandatory="false">
    <description> The name of the choice </description>
  </param>
  <param name="image" type="Common.Image" mandatory="false">
    <description> The image for representing the choice </description>
  </param>
  <param name="secondaryText" maxlength="500" type="String" mandatory="false">
    <description>Optional secondary text to display; e.g. address of POI in a search result entry</description>
  </param>
  <param name="tertiaryText" maxlength="500" type="String" mandatory="false">
    <description>Optional tertiary text to display; e.g. distance to POI for a search result entry</description>
  </param>
  <param name="secondaryImage" type="Common.Image" mandatory="false">
    <description>Optional secondary image struct for choice</description>
  </param>
</struct>

<struct name="VrHelpItem">
  <param name="text" maxlength="500" type="String" mandatory="true">
    <description>Text to display for VR Help item</description>
  </param>
  <param name="image" type="Common.Image" mandatory="false">
    <description>Image struct for VR Help item</description>
  </param>
  <param name="position" type="Integer" minvalue="1" maxvalue="100" mandatory="true">
    <description>Position to display item in VR Help list</description>
  </param>
</struct>

<struct name="TimeFormat">
  <param name="hours" type="Integer" minvalue="0" maxvalue="59" mandatory="true">
    <description>The hour of the media clock.</description>
    <description>Some units only support a max of 19 hours. If out of range, it should be rejected.</description>
  </param>
  <param name="minutes" type="Integer" minvalue="0" maxvalue="59" mandatory="true"/>
  <param name="seconds" type="Integer" minvalue="0" maxvalue="59" mandatory="true"/>
</struct>

<struct name="TouchEventCapabilities">
  <param name="pressAvailable" type="Boolean" mandatory="true">
  </param>
  <param name="multiTouchAvailable" type="Boolean" mandatory="true">
  </param>
  <param name="doublePressAvailable" type="Boolean" mandatory="true">
  </param>
</struct>

<struct name="ImageResolution">
  <param name="resolutionWidth" type="Integer" minvalue="1" maxvalue="10000" mandatory="true">
    <description>The image resolution width.</description>
  </param>
  <param name="resolutionHeight" type="Integer" minvalue="1" maxvalue="10000" mandatory="true">
    <description>The image resolution height.</description>
  </param>
</struct>

<struct name="ScreenParams">
  <param name="resolution" type="Common.ImageResolution" mandatory="true">
    <description>The resolution of the prescribed screen area.</description>
  </param>
  <param name="touchEventAvailable" type="Common.TouchEventCapabilities" mandatory="false">
    <description>Types of screen touch events available in screen area.</description>
  </param>
</struct>

<struct name="ImageField">
  <param name="name" type="Common.ImageFieldName" mandatory="true">
    <description>The name that identifies the field. See ImageFieldName.</description>
  </param>
  <param name="imageTypeSupported" type="Common.FileType" maxsize="100" array="true" mandatory="false" minsize="1">
    <description>The image types that are supported in this field. See FileType.</description>
  </param>
  <param name="imageResolution" type="Common.ImageResolution" mandatory="false">
    <description>The image resolution of this field.</description>
  </param>
</struct>

<struct name="VideoStreamingFormat">
  <description>Video streaming formats and their specifications.</description>
  <param name="protocol" type="Common.VideoStreamingProtocol" mandatory="true">
    <description>Protocol type, see VideoStreamingProtocol</description>
  </param>
  <param name="codec" type="Common.VideoStreamingCodec" mandatory="true">
    <description>Codec type, see VideoStreamingCodec</description>
  </param>
</struct>

<struct name="VideoConfig">
  <description>Configuration of a video stream.</description>
  <param name="protocol" type="Common.VideoStreamingProtocol" mandatory="false">
    <description>The video protocol configuration</description>
  </param>
  <param name="codec" type="Common.VideoStreamingCodec" mandatory="false">
    <description>The video codec configuration</description>
  </param>
  <param name="width" type="Integer" mandatory="false">
    <description>Width of the video stream, in pixels.</description>
  </param>
  <param name="height" type="Integer" mandatory="false">
    <description>Height of the video stream, in pixels.</description>
  </param>
</struct>

<struct name="DisplayCapabilities">
  <description>Contains information about the display capabilities.</description>
  <param name="displayType" type="Common.DisplayType" mandatory="true">
    <description>The type of the display. See DisplayType</description>
  </param>
  <param name="displayName" type="String" mandatory="false">
      <description>The name of the display the app is connected to.</description>
  </param>
  <param name="textFields" type="Common.TextField" minsize="0" maxsize="100" array="true" mandatory="true">
    <description>A set of all fields for text displaying supported by HU. See TextFieldName.</description>
    <description>If there are no textfields supported, the empty array must be returned</description>
  </param>
  <param name="imageFields" type="Common.ImageField" minsize="1" maxsize="100" array="true" mandatory="false">
    <description>A set of all fields that support images. See ImageField</description>
  </param>
  <param name="mediaClockFormats" type="Common.MediaClockFormat" minsize="0" maxsize="100" array="true" mandatory="true">
    <description>A set of all supported formats of the media clock. See MediaClockFormat</description>
  </param>
  <param name="imageCapabilities" type="Common.ImageType" array="true" minsize="0" maxsize="2" mandatory="false">
  </param>
  <param name="graphicSupported" type="Boolean" mandatory="true">
    <description>The display's persistent screen supports referencing a static or dynamic image.</description>
  </param>
  <param name="templatesAvailable" type="String" minsize="0" maxsize="100" maxlength="100" array="true" mandatory="true">
    <description>A set of all predefined persistent display templates available on headunit.  To be referenced in SetDisplayLayout.</description>
  </param>
  <param name="screenParams" type="Common.ScreenParams" mandatory="false">
    <description>A set of all parameters related to a prescribed screen area (e.g. for video / touch input).</description>
  </param>
  <param name="numCustomPresetsAvailable" type="Integer" minvalue="1" maxvalue="100" mandatory="false">
    <description>The number of on-screen custom presets available (if any); otherwise omitted.</description>
  </param>
</struct>

<struct name="SoftButtonCapabilities">
  <description>Contains information about a SoftButton's capabilities.</description>
  <param name="shortPressAvailable" type="Boolean" mandatory="true">
    <description>The button supports a short press.</description>
    <description>Whenever the button is pressed short, onButtonPressed( SHORT) must be invoked.</description>
  </param>
  <param name="longPressAvailable" type="Boolean" mandatory="true">
    <description>The button supports a LONG press.</description>
    <description>Whenever the button is pressed long, onButtonPressed( LONG) must be invoked.</description>
  </param>
  <param name="upDownAvailable" type="Boolean" mandatory="true">
    <description>The button supports "button down" and "button up".</description>
    <description>Whenever the button is pressed, onButtonEvent( DOWN) must be invoked.</description>
    <description>Whenever the button is released, onButtonEvent( UP) must be invoked.</description>
  </param>
  <param name="imageSupported" type="Boolean" mandatory="true">
    <description>Must be true if the button supports referencing a static or dynamic image.</description>
  </param>
  <param name="textSupported" type="Boolean" mandatory="false" >
    <description>
      The button supports the use of text.
      If not included, the default value should be considered true that the button will support text.
    </description>
  </param>
</struct>

<struct name="HMICapabilities">
  <param name="navigation" type="Boolean" mandatory="false">
    <description>Availability of build in Nav. True: Available, False: Not Available</description>
  </param>
  <param name="phoneCall" type="Boolean" mandatory="false">
    <description>Availability of build in phone. True: Available, False: Not Available</description>
  </param>
  <param name="videoStreaming" type="Boolean" mandatory="false">
    <description>Availability of built-in video streaming. True: Available, False: Not Available</description>
  </param>
</struct>

<struct name="AudioPassThruCapabilities">
  <description>
    Describes different audio type configurations for PerformAudioPassThru.
    e.g. 8kHz,8-bit,PCM
    The audio is recorded in monaural.
  </description>
  <param name="samplingRate" type="Common.SamplingRate" mandatory="true"/>
  <param name="bitsPerSample" type="Common.BitsPerSample" mandatory="true"/>
  <param name="audioType" type="Common.AudioType" mandatory="true"/>
</struct>

<struct name="TextFieldStruct">
  <param name="fieldName" type="Common.TextFieldName" mandatory="true">
    <description>The name of the field for displaying the text.</description>
  </param>
  <param name="fieldText" type="String" maxlength="500" mandatory="true">
    <description>The  text itself.</description>
  </param>
  <param name="fieldTypes" type="Common.MetadataType" minsize="0" maxsize="5" array="true" mandatory="false">
    <description>The type of data contained in the field.</description>
  </param>
</struct>

<struct name="KeyboardProperties">
  <description>Configuration of on-screen keyboard (if available).</description>
  <param name="language" type="Common.Language" mandatory="false">
    <description>The keyboard language.</description>
  </param>
  <param name="keyboardLayout" type="Common.KeyboardLayout" mandatory="false" >
    <description>Desired keyboard layout.</description>
  </param>
  <param name="keypressMode" type="Common.KeypressMode" mandatory="false" >
    <description>
        Desired keypress mode.
        If omitted, this value will be set to RESEND_CURRENT_ENTRY.
    </description>
  </param>
  <param name="limitedCharacterList" type="String" maxlength="1" minsize="1" maxsize="100" array="true" mandatory="false">
    <description>Array of keyboard characters to enable.</description>
    <description>All omitted characters will be greyed out (disabled) on the keyboard.</description>
    <description>If omitted, the entire keyboard will be enabled.</description>
  </param>
  <param name="autoCompleteList" type="String" maxlength="1000" minsize="0" maxsize="100" array="true" mandatory="false">
    <description>
      Allows an app to prepopulate the text field with a list of suggested or completed entries as the user types. 
      If empty, the auto-complete list will be removed from the screen.
    </description>
  </param>
</struct>

<struct name="Turn">
  <param name="navigationText" type="Common.TextFieldStruct" mandatory="false">
    <description>Uses navigationText from TextFieldStruct.</description>
  </param>
  <param name="turnIcon" type="Common.Image" mandatory="false">
  </param>
</struct>

<struct name="VehicleType">
  <param name="make" type="String" maxlength="500" mandatory="false">
    <description>Make of the vehicle</description>
    <description>e.g. Ford</description>
  </param>
  <param name="model" type="String" maxlength="500" mandatory="false">
    <description>Model of the vehicle</description>
    <description>e.g. Fiesta</description>
  </param>
  <param name="modelYear" type="String" maxlength="500" mandatory="false">
    <description>Model Year of the vehicle</description>
    <description>e.g. 2013</description>
  </param>
  <param name="trim" type="String" maxlength="500" mandatory="false">
    <description>Trim of the vehicle</description>
    <description>e.g. SE</description>
  </param>
</struct>

<!--IVI part-->
<enum name="TurnSignal">
  <description>Enumeration that describes the status of the turn light indicator.</description>
  <element name="OFF">
    <description>Turn signal is OFF</description>
  </element>
  <element name="LEFT">
    <description>Left turn signal is on</description>
  </element>
  <element name="RIGHT">
    <description>Right turn signal is on</description>
  </element>
  <element name="BOTH">
    <description>Both signals (left and right) are on.</description>
  </element>
</enum>

<struct name="SingleTireStatus">
  <param name="status" type="Common.ComponentVolumeStatus" mandatory="true">
    <description>The status of component volume. See ComponentVolumeStatus.</description>
  </param>
  <param name="tpms" type="TPMS" mandatory="false">
      <description>The status of TPMS according to the particular tire.</description>
  </param>
  <param name="pressure" type="Float" mandatory="false" minvalue="0" maxvalue="2000">
    <description>The pressure value of the particular tire in kilo pascal.</description>
  </param>
</struct>

<struct name="DIDResult">
  <description>Individual requested DID result and data</description>
  <param name="resultCode" type="Common.VehicleDataResultCode" mandatory="true">
    <description>Individual DID result code.</description>
  </param>
  <param name="didLocation" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
    <description>Location of raw data (the address from ReadDID request)</description>
  </param>
  <param name="data" type="String" maxlength="5000" mandatory="false">
    <description>Raw DID-based data returned for requested element.</description>
  </param>
</struct>

<struct name="HeadLampStatus">
  <param name="lowBeamsOn" type="Boolean" mandatory="true">
    <description>Status of the low beam lamps.</description>
  </param>
  <param name="highBeamsOn" type="Boolean" mandatory="true">
    <description>Status of the high beam lamps.</description>
  </param>
  <param name="ambientLightSensorStatus" type="Common.AmbientLightStatus" mandatory="true">
    <description>Status of the ambient light sensor.</description>
  </param>
</struct>

<struct name="TireStatus">
  <description>The status and pressure of the tires.</description>
  <param name="pressureTelltale" type="Common.WarningLightStatus" mandatory="false">
    <description>Status of the Tire Pressure Telltale. See WarningLightStatus.</description>
  </param>
  <param name="leftFront" type="Common.SingleTireStatus" mandatory="false">
    <description>The status of the left front tire.</description>
  </param>
  <param name="rightFront" type="Common.SingleTireStatus" mandatory="false">
    <description>The status of the right front tire.</description>
  </param>
  <param name="leftRear" type="Common.SingleTireStatus" mandatory="false">
    <description>The status of the left rear tire.</description>
  </param>
  <param name="rightRear" type="Common.SingleTireStatus" mandatory="false">
    <description>The status of the right rear tire.</description>
  </param>
  <param name="innerLeftRear" type="Common.SingleTireStatus" mandatory="false">
    <description>The status of the inner left rear.</description>
  </param>
  <param name="innerRightRear" type="Common.SingleTireStatus" mandatory="false">
    <description>The status of the inner right rear.</description>
  </param>
</struct>

<struct name="BeltStatus">
  <param name="driverBeltDeployed" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="passengerBeltDeployed" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="passengerBuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="driverBuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="leftRow2BuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="passengerChildDetected" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="rightRow2BuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="middleRow2BuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="middleRow3BuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="leftRow3BuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="rightRow3BuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="leftRearInflatableBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="rightRearInflatableBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="middleRow1BeltDeployed" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
  <param name="middleRow1BuckleBelted" type="Common.VehicleDataEventStatus" mandatory="false">
    <description>See VehicleDataEventStatus.</description>
  </param>
</struct>

<struct name="BodyInformation">
  <param name="parkBrakeActive" type="Boolean" mandatory="true">
    <description>Must be true if the park brake is active</description>
  </param>
  <param name="ignitionStableStatus" type="Common.IgnitionStableStatus" mandatory="true">
    <description>Information about the ignition switch. See IgnitionStableStatus.</description>
  </param>
  <param name="ignitionStatus" type="Common.IgnitionStatus" mandatory="true">
    <description>The status of the ignition. See IgnitionStatus.</description>
  </param>
  <param name="driverDoorAjar" type="Boolean" mandatory="false">
    <description>References signal "DrStatDrv_B_Actl".</description>
  </param>
  <param name="passengerDoorAjar" type="Boolean" mandatory="false">
    <description>References signal "DrStatPsngr_B_Actl".</description>
  </param>
  <param name="rearLeftDoorAjar" type="Boolean" mandatory="false">
    <description>References signal "DrStatRl_B_Actl".</description>
  </param>
  <param name="rearRightDoorAjar" type="Boolean" mandatory="false">
    <description>References signal "DrStatRr_B_Actl".</description>
  </param>
</struct>

<struct name="DeviceStatus">
  <param name="voiceRecOn" type="Boolean" mandatory="false">
    <description>Must be true if the voice recording is on.</description>
  </param>
  <param name="btIconOn" type="Boolean" mandatory="false">
    <description>Must be true if Bluetooth icon is displayed.</description>
  </param>
  <param name="callActive" type="Boolean" mandatory="false">
    <description>Must be true if there is an active call..</description>
  </param>
  <param name="phoneRoaming" type="Boolean" mandatory="false">
    <description>Must be true if ther is a phone roaming.</description>
  </param>
  <param name="textMsgAvailable" type="Boolean" mandatory="false">
    <description>Must be true if the text message is available.</description>
  </param>
  <param name="battLevelStatus" type="Common.DeviceLevelStatus" mandatory="false">
    <description>Device battery level status. See DeviceLevelStatus.</description>
  </param>
  <param name="stereoAudioOutputMuted" type="Boolean" mandatory="false">
    <description>Must be true if stereo audio output is muted.</description>
  </param>
  <param name="monoAudioOutputMuted" type="Boolean" mandatory="false">
    <description>Must be true if mono audio output is muted.</description>
  </param>
  <param name="signalLevelStatus" type="Common.DeviceLevelStatus" mandatory="false">
    <description>Device signal level status. See DeviceLevelStatus.</description>
  </param>
  <param name="primaryAudioSource" type="Common.PrimaryAudioSource" mandatory="false">
    <description>See PrimaryAudioSource.</description>
  </param>
  <param name="eCallEventActive" type="Boolean" mandatory="false">
    <description>Must be true if emergency call event is active.</description>
  </param>
</struct>

<struct name="ECallInfo">
  <param name="eCallNotificationStatus" type="Common.VehicleDataNotificationStatus" mandatory="true">
    <description>References signal "eCallNotification_4A". See VehicleDataNotificationStatus.</description>
  </param>
  <param name="auxECallNotificationStatus" type="Common.VehicleDataNotificationStatus" mandatory="true">
    <description>References signal "eCallNotification". See VehicleDataNotificationStatus.</description>
  </param>
  <param name="eCallConfirmationStatus" type="Common.ECallConfirmationStatus" mandatory="true">
    <description>References signal "eCallConfirmation". See ECallConfirmationStatus.</description>
  </param>
</struct>

<struct name="AirbagStatus">
  <param name="driverAirbagDeployed" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsDrvBag_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
  <param name="driverSideAirbagDeployed" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsDrvSideBag_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
  <param name="driverCurtainAirbagDeployed" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsDrvCrtnBag_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
  <param name="passengerAirbagDeployed" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsPasBag_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
  <param name="passengerCurtainAirbagDeployed" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsPasCrtnBag_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
  <param name="driverKneeAirbagDeployed" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsKneeDrvBag_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
  <param name="passengerSideAirbagDeployed" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsPasSideBag_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
  <param name="passengerKneeAirbagDeployed" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsKneePasBag_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
</struct>

<struct name="EmergencyEvent">
  <param name="emergencyEventType" type="Common.EmergencyEventType" mandatory="true">
    <description>References signal "VedsEvntType_D_Ltchd". See EmergencyEventType.</description>
  </param>
  <param name="fuelCutoffStatus" type="Common.FuelCutoffStatus" mandatory="true">
    <description>References signal "RCM_FuelCutoff". See FuelCutoffStatus.</description>
  </param>
  <param name="rolloverEvent" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsEvntRoll_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
  <param name="maximumChangeVelocity" type="Integer" minvalue="0" maxvalue="255" mandatory="true">
    <description>
      References signal "VedsMaxDeltaV_D_Ltchd". Change in velocity in KPH.  Additional reserved values:
      0x00 No event
      0xFE Not supported
      0xFF Fault
    </description>
  </param>
  <param name="multipleEvents" type="Common.VehicleDataEventStatus" mandatory="true">
    <description>References signal "VedsMultiEvnt_D_Ltchd". See VehicleDataEventStatus.</description>
  </param>
</struct>

<struct name="ClusterModeStatus">
  <param name="powerModeActive" type="Boolean" mandatory="true">
    <description>References signal "PowerMode_UB".</description>
  </param>
  <param name="powerModeQualificationStatus" type="Common.PowerModeQualificationStatus" mandatory="true">
    <description>References signal "PowerModeQF". See PowerModeQualificationStatus.</description>
  </param>
  <param name="carModeStatus" type="Common.CarModeStatus" mandatory="true">
    <description>References signal "CarMode". See CarMode.</description>
  </param>
  <param name="powerModeStatus" type="Common.PowerModeStatus" mandatory="true">
    <description>References signal "PowerMode". See PowerMode.</description>
  </param>
</struct>

<struct name="MyKey">
  <param name="e911Override" type="Common.VehicleDataStatus" mandatory="true">
    <description>Indicates whether e911 override is on. See VehicleDataStatus.</description>
  </param>
</struct>
<!--end of IVI part-->

<struct name="DateTime">
  <param name="millisecond" type="Integer" minvalue="0" maxvalue="999" mandatory="false">
    <description>Milliseconds </description>
  </param>
  <param name="second" type="Integer" minvalue="0" maxvalue="60" mandatory="false">
    <description>Seconds part of time</description>
  </param>
  <param name="minute" type="Integer" minvalue="0" maxvalue="59" mandatory="false">
    <description>Minutes part of time</description>
  </param>
  <param name="hour" type="Integer" minvalue="0" maxvalue="23" mandatory="false">
    <description>Hours part of time. Note that this structure accepts time only in 24 Hr format</description>
  </param>
  <param name="day" type="Integer" minvalue="1" maxvalue="31" mandatory="false">
    <description>Day of the month</description>
  </param>
  <param name="month" type="Integer" minvalue="1" maxvalue="12" mandatory="false">
    <description>Month of the year</description>
  </param>
  <param name="year" type="Integer" maxvalue="4095" mandatory="false">
    <description>The year in YYYY format</description>
  </param>
  <param name="tz_hour" type="Integer" minvalue="-12" maxvalue="14" defvalue="0" mandatory="false">
    <description>Time zone offset in Hours wrt UTC.</description>
  </param>
  <param name="tz_minute" type="Integer" minvalue="0" maxvalue="59" defvalue="0" mandatory="false">
    <description>Time zone offset in Min wrt UTC.</description>
  </param>
</struct>

<struct name="OASISAddress">
  <param name="countryName" minlength="0" maxlength="200" type="String" mandatory="false">
    <description>Name of the country (localized)</description>
  </param>
  <param name="countryCode" minlength="0" maxlength="50" type="String" mandatory="false">
    <description>Name of country (ISO 3166-2)</description>
  </param>
  <param name="postalCode" minlength="0" maxlength="16" type="String" mandatory="false">
    <description>(PLZ, ZIP, PIN, CAP etc.)</description>
  </param>
  <param name="administrativeArea" minlength="0" maxlength="200" type="String" mandatory="false">
    <description>Portion of country (e.g. state)</description>
  </param>
  <param name="subAdministrativeArea" minlength="0" maxlength="200" type="String" mandatory="false">
    <description>Portion of e.g. state (e.g. county)</description>
  </param>
  <param name="locality" minlength="0" maxlength="200" type="String" mandatory="false">
    <description>Hypernym for e.g. city/village</description>
  </param>
  <param name="subLocality" minlength="0" maxlength="200" type="String" mandatory="false">
    <description>Hypernym for e.g. district</description>
  </param>
  <param name="thoroughfare" minlength="0" maxlength="200" type="String" mandatory="false">
    <description>Hypernym for street, road etc.</description>
  </param>
  <param name="subThoroughfare" minlength="0" maxlength="200" type="String" mandatory="false">
    <description>Portion of thoroughfare e.g. house number</description>
  </param>
</struct>

  <struct name="LocationDetails">
    <param name="coordinate" type="Coordinate" mandatory="false">
      <description>Latitude/Longitude of the location.</description>
    </param>
    <param name="locationName" type="String" maxlength="500" mandatory="false">
      <description>Name of location.</description>
    </param>
    <param name="addressLines" type="String" maxlength="500" minsize="0" maxsize="4" array="true" mandatory="false">
      <description>Location address for display purposes only</description>
    </param>
    <param name="locationDescription" type="String" maxlength="500" mandatory="false">
      <description>Description intended location / establishment (if applicable)</description>
    </param>
    <param name="phoneNumber" type="String" maxlength="500" mandatory="false">
      <description>Phone number of location / establishment.</description>
    </param>
    <param name="locationImage" type="Image" mandatory="false">
      <description>Image / icon of intended location.</description>
    </param>
    <param name="searchAddress" type="OASISAddress" mandatory="false">
      <description>Address to be used by navigation engines for search</description>
    </param>
  </struct>

  <struct name="NavigationCapability">
    <description>Extended capabilities for an onboard navigation system</description>
    <param name="sendLocationEnabled" type="Boolean" mandatory="false">
      <description>If the module has the ability to add locations to the onboard nav</description>
    </param>
    <param name="getWayPointsEnabled" type="Boolean" mandatory="false">
      <description>If the module has the ability to return way points from onboard nav</description>
    </param>
  </struct>

  <struct name="PhoneCapability">
    <description>Extended capabilities of the module's phone feature</description>
    <param name="dialNumberEnabled" type="Boolean" mandatory="false">
      <description>If the module has the abiulity to perform dial number</description>
    </param>
  </struct>

  <struct name="VideoStreamingCapability">
    <description>Contains information about this system's video streaming capabilities.</description>
    <param name="preferredResolution" type="Common.ImageResolution" mandatory="false">
      <description>The preferred resolution of a video stream for decoding and rendering on HMI.</description>
    </param>
    <param name="maxBitrate" type="Integer" minvalue="0" maxvalue="2147483647" mandatory="false">
      <description>The maximum bitrate of video stream that is supported, in kbps.</description>
    </param>
    <param name="supportedFormats" type="Common.VideoStreamingFormat" array="true" mandatory="false">
      <description>
        Detailed information on each format supported by this system, in its preferred order
        (i.e. the first element in the array is most preferable to the system).
        Each object will contain a VideoStreamingFormat that describes what can be expected.
      </description>
    </param>
    <param name="hapticSpatialDataSupported" type="Boolean" mandatory="false">
      <description>True if the system can utilize the haptic spatial data from the source being streamed. </description>
    </param>
    <param name="diagonalScreenSize" type="Float" minvalue="0" mandatory="false">
      <description>The diagonal screen size in inches.</description>
    </param>
    <param name="pixelPerInch" type="Float" minvalue="0" mandatory="false">
      <description>PPI is the diagonal resolution in pixels divided by the diagonal screen size in inches.</description>
    </param>
    <param name="scale" type="Float" minvalue="1" maxvalue="10" mandatory="false">
      <description>The scaling factor the app should use to change the size of the projecting view.</description>
    </param>
  </struct>


  <struct name="WindowTypeCapabilities">
    <param name="type" type="Common.WindowType" mandatory="true" />
    <param name="maximumNumberOfWindows" type="Integer" mandatory="true" />
  </struct>

  <struct name="WindowCapability">
    <param name="windowID" type="Integer" mandatory="false">
      <description>
        The specified ID of the window. Can be set to a predefined window,
        or omitted for the main window on the main display.
      </description>
    </param>
    <param name="textFields" type="TextField" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>A set of all fields that support text data. See TextField</description>
    </param>
    <param name="imageFields" type="ImageField" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>A set of all fields that support images. See ImageField</description>
    </param>
    <param name="imageTypeSupported" type="ImageType" array="true" minsize="0" maxsize="1000" mandatory="false">
      <description>Provides information about image types supported by the system.</description>
    </param>
    <param name="templatesAvailable" type="String" minsize="0" maxsize="100" maxlength="100" array="true" mandatory="false">
      <description>A set of all window templates available on the head unit.</description>
    </param>
    <param name="numCustomPresetsAvailable" type="Integer" minvalue="1" maxvalue="100" mandatory="false">
      <description>The number of on-window custom presets available (if any); otherwise omitted.</description>
    </param>
    <param name="buttonCapabilities" type="ButtonCapabilities" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>The number of buttons and the capabilities of each on-window button.</description>
    </param>
    <param name="softButtonCapabilities" type="SoftButtonCapabilities" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>The number of soft buttons available on-window and the capabilities for each button.</description>
    </param>
    <param name="menuLayoutsAvailable" type="Common.MenuLayout" array="true" minsize="1" maxsize="1000" mandatory="false">
      <description>An array of available menu layouts. If this parameter is not provided, only the `LIST` layout is assumed to be available</description>
    </param>
  </struct>

  <struct name="DisplayCapability">
    <description>Contains information about the display capabilities.</description>
    <param name="displayName" type="String" mandatory="false" />
    <param name="windowTypeSupported" type="WindowTypeCapabilities" array="true" minsize="1" mandatory="false">
      <description>
        Informs the application how many windows the app is allowed to create per type.
      </description>
    </param>
    <param name="windowCapabilities" type="WindowCapability" array="true" minsize="1" maxsize="1000" mandatory="false">
      <description>
        Contains a list of capabilities of all windows related to the app.
        Once the app has registered the capabilities of all windows are provided.
        GetSystemCapability still allows requesting window capabilities of all windows.
        After registration, only windows with capabilities changed will be included.
        Following cases will cause only affected windows to be included:
        1. App creates a new window. After the window is created, a system capability notification will be sent
        related only to the created window.
        2. App sets a new layout to the window. The new layout changes window capabilties.
        The notification will reflect those changes to the single window.
      </description>
    </param>
  </struct>

  <struct name="SystemCapabilities">
      <param name="navigationCapability" type="NavigationCapability" mandatory="false">
      </param>
      <param name="phoneCapability" type="PhoneCapability" mandatory="false">
      </param>
      <param name="videoStreamingCapability" type="VideoStreamingCapability" mandatory="false">
      </param>
  </struct>

  <struct name="RemoteControlCapabilities">
    <param name="climateControlCapabilities" type="ClimateControlCapabilities" mandatory="false" minsize="1" maxsize="100" array="true">
      <description>If included, the platform supports RC climate controls. For this baseline version, maxsize=1. i.e. only one climate control module is supported.</description >
    </param>
    <param name="radioControlCapabilities" type="RadioControlCapabilities" mandatory="false" minsize="1" maxsize="100" array="true">
      <description>If included, the platform supports RC radio controls. For this baseline version, maxsize=1. i.e. only one climate control module is supported.</description >
    </param>
    <param name="buttonCapabilities" type="ButtonCapabilities"  mandatory="false" minsize="1" maxsize="100" array="true" >
      <description>If included, the platform supports RC button controls with the included button names.</description >
    </param>
    <param name="seatControlCapabilities" type="SeatControlCapabilities" mandatory="false" minsize="1" maxsize="100" array="true">
      <description>
      If included, the platform supports seat controls.
      </description >
    </param>
    <param name="audioControlCapabilities" type="AudioControlCapabilities" mandatory="false" minsize="1" maxsize="100" array="true">
        <description> If included, the platform supports audio controls. </description >
    </param>
    <param name="hmiSettingsControlCapabilities" type="HMISettingsControlCapabilities" mandatory="false">
        <description> If included, the platform supports hmi setting controls. </description >
    </param>
    <param name="lightControlCapabilities" type="LightControlCapabilities" mandatory="false">
        <description> If included, the platform supports light controls. </description >
    </param>
  </struct>

  <struct name="Rectangle">
    <param name="x" type="Float" mandatory="true">
      <description>The X-coordinate of the user control</description>
    </param>
    <param name="y" type="Float" mandatory="true">
      <description>The Y-coordinate of the user control</description>
    </param>
    <param name="width" type="Float" mandatory="true">
      <description>The width of the user control's bounding rectangle</description>
    </param>
    <param name="height" type="Float" mandatory="true">
      <description>The height of the user control's bounding rectangle</description>
    </param>
  </struct>

  <struct name="HapticRect">
    <description>Defines haptic rectangle data for each user control object for video streaming application</description>
    <param name="id" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="true">
      <description>A user control spatial identifier</description>
    </param>
    <param name="rect" type="Common.Rectangle" mandatory="true">
      <description>The position of the haptic rectangle to be highlighted. The center of this rectangle will be "touched" when a press occurs.</description>
    </param>
  </struct>

  <struct name="SyncMsgVersion">
        <description>Specifies the version number of the SmartDeviceLink protocol that is supported by the mobile application or app service</description>

        <param name="majorVersion" type="Integer" minvalue="1" maxvalue="10" mandatory="true">
            <description>The major version indicates versions that is not-compatible to previous versions.</description>
        </param>
        <param name="minorVersion" type="Integer" minvalue="0" maxvalue="1000" mandatory="true">
            <description>The minor version indicates a change to a previous version that should still allow to be run on an older version (with limited functionality)</description>
        </param>
        <param name="patchVersion" type="Integer" minvalue="0" maxvalue="1000" mandatory="false">
            <description>The patch version indicates a fix to existing functionality in a previous version that should still be able to be run on an older version </description>
        </param>
    </struct>

  <enum name="ServiceType">
    <element name="VIDEO" >
      <description>Refers to the Video service.</description>
    </element>
    <element name="AUDIO" >
      <description>Refers to the Audio service.</description>
    </element>
    <element name="RPC" >
      <description>Refers to the RPC service.</description>
    </element>
  </enum>

  <enum name="ServiceEvent">
    <element name="REQUEST_RECEIVED" >
      <description>When a request for a Service is received.</description>
    </element>
    <element name="REQUEST_ACCEPTED" >
      <description>When a request for a Service is Accepted.</description>
    </element>
    <element name="REQUEST_REJECTED" >
      <description>When a request for a Service is Rejected.</description>
    </element>
  </enum>

  <enum name="ServiceStatusUpdateReason">
    <element name="PTU_FAILED" >
      <description>When a Service is rejected because the system was unable to get a required Policy Table Update.</description>
    </element>
    <element name="INVALID_CERT" >
      <description>When a Service is rejected because the security certificate is invalid/expired.</description>
    </element>
    <element name="INVALID_TIME" >
      <description>When a Service is rejected because the system was unable to get a valid SystemTime from HMI, which is required for certificate authentication.</description>
    </element>
    <element name="PROTECTION_ENFORCED" >
      <description>When a Service is rejected because the system configuration ini file requires the service must be protected, but the app asks for an unprotected service.</description>
    </element>
    <element name="PROTECTION_DISABLED" >
      <description>When a mobile app requests a protected service, but the system starts an unprotected service instead.</description>
    </element>
  </enum>

    <!-- App Services -->

    <enum name="AppServiceType">
        <element name="MEDIA"/>
        <element name="WEATHER"/>
        <element name="NAVIGATION"/>
    </enum>

    <struct name="MediaServiceManifest">
    </struct>

    <enum name="MediaType">
        <element name="MUSIC"/>
        <element name="PODCAST"/>
        <element name="AUDIOBOOK"/>
        <element name="OTHER"/>
    </enum>

    <struct name="MediaServiceData">
        <description>This data is related to what a media service should provide</description>

        <param name="mediaType" type="Common.MediaType" mandatory="false">
            <description>The type of the currently playing or paused track.</description>
        </param>

        <param name="mediaTitle" type="String" mandatory="false">
            <description>
                Music: The name of the current track
                Podcast: The name of the current episode
                Audiobook: The name of the current chapter
            </description>
        </param>

        <param name="mediaArtist" type="String" mandatory="false">
            <description>
                Music: The name of the current album artist
                Podcast: The provider of the podcast (hosts, network, company)
                Audiobook: The book author's name
            </description>
        </param>

        <param name="mediaAlbum" type="String" mandatory="false">
            <description>
                Music: The name of the current album
                Podcast: The name of the current podcast show
                Audiobook: The name of the current book
            </description>
        </param>

        <param name="playlistName" type="String" mandatory="false">
            <description>
                Music: The name of the playlist or radio station, if the user is playing from a playlist, otherwise, Null
                Podcast: The name of the playlist, if the user is playing from a playlist, otherwise, Null
                Audiobook: Likely not applicable, possibly a collection or "playlist" of books
            </description>
        </param>

        <param name="isExplicit" type="Boolean" mandatory="false">
            <description> Whether or not the content currently playing (e.g. the track, episode, or book) contains explicit content</description>
        </param>

        <param name="trackPlaybackProgress" type="Integer" mandatory="false">
            <description>
                Music: The current progress of the track in seconds
                Podcast: The current progress of the episode in seconds
                Audiobook: The current progress of the current segment (e.g. the chapter) in seconds
            </description>
        </param>

        <param name="trackPlaybackDuration" type="Integer" mandatory="false">
            <description>
                Music: The total duration of the track in seconds
                Podcast: The total duration of the episode in seconds
                Audiobook: The total duration of the current segment (e.g. the chapter) in seconds
            </description>
        </param>

        <param name="queuePlaybackProgress" type="Integer" mandatory="false">
            <description>
                Music: The current progress of the playback queue in seconds
                Podcast: The current progress of the playback queue in seconds
                Audiobook: The current progress of the playback queue (e.g. the book) in seconds
            </description>
        </param>

        <param name="queuePlaybackDuration" type="Integer" mandatory="false">
            <description>
                Music: The total duration of the playback queue in seconds
                Podcast: The total duration of the playback queue in seconds
                Audiobook: The total duration of the playback queue (e.g. the book) in seconds
            </description>
        </param>

        <param name="queueCurrentTrackNumber" type="Integer" mandatory="false">
            <description>
                Music: The current number (1 based) of the track in the playback queue
                Podcast: The current number (1 based) of the episode in the playback queue
                Audiobook: The current number (1 based) of the episode in the playback queue (e.g. the chapter number in the book)
            </description>
        </param>

        <param name="queueTotalTrackCount" type="Integer" mandatory="false">
            <description>
                Music: The total number of tracks in the playback queue
                Podcast: The total number of episodes in the playback queue
                Audiobook: The total number of sections in the playback queue (e.g. the number of chapters in the book)
            </description>
        </param>

        <param name="mediaImage" type="Common.Image" mandatory="false">
            <description>
                Music: The album art of the current track
                Podcast: The podcast or chapter artwork of the current podcast episode
                Audiobook: The book or chapter artwork of the current audiobook
            </description>
        </param>
    </struct>

    <struct name="WeatherServiceManifest">
        <param name="currentForecastSupported" type="Boolean" mandatory="false"/>
        <param name="maxMultidayForecastAmount" type="Integer" mandatory="false"/>
        <param name="maxHourlyForecastAmount" type="Integer" mandatory="false"/>
        <param name="maxMinutelyForecastAmount" type="Integer" mandatory="false"/>
        <param name="weatherForLocationSupported" type="Boolean" mandatory="false"/>
    </struct>

    <struct name="WeatherAlert">
        <param name="title" type="String" mandatory="false"/>
        <param name="summary" type="String" mandatory="false"/>
        <param name="expires" type="Common.DateTime" mandatory="false"/>
        <param name="regions" type="String" array="true" minsize="1" maxsize="99" mandatory="false"/>
        <param name="severity" type="String" mandatory="false"/>
        <param name="timeIssued" type="Common.DateTime" mandatory="false"/>
    </struct>

    <struct name="WeatherData">
        <param name="currentTemperature" type="Common.Temperature" mandatory="false"/>
        <param name="temperatureHigh" type="Common.Temperature" mandatory="false"/>
        <param name="temperatureLow" type="Common.Temperature" mandatory="false"/>
        <param name="apparentTemperature" type="Common.Temperature" mandatory="false"/>
        <param name="apparentTemperatureHigh" type="Common.Temperature" mandatory="false"/>
        <param name="apparentTemperatureLow" type="Common.Temperature" mandatory="false"/>

        <param name="weatherSummary" type="String" mandatory="false"/>
        <param name="time" type="Common.DateTime" mandatory="false"/>
        <param name="humidity" type="Float" minvalue="0" maxvalue="1" mandatory="false">
            <description> 0 to 1, percentage humidity </description>
        </param>
        <param name="cloudCover" type="Float" minvalue="0" maxvalue="1" mandatory="false">
            <description> 0 to 1, percentage cloud cover </description>
        </param>
        <param name="moonPhase" type="Float" minvalue="0" maxvalue="1" mandatory="false">
            <description> 0 to 1, percentage of the moon seen, e.g. 0 = no moon, 0.25 = quarter moon </description>
        </param>

        <param name="windBearing" type="Integer" mandatory="false">
            <description> In degrees, true north at 0 degrees </description>
        </param>
        <param name="windGust" type="Float" mandatory="false">
            <description> km/hr </description>
        </param>
        <param name="windSpeed" type="Float" mandatory="false">
            <description> km/hr </description>
        </param>

        <param name="nearestStormBearing" type="Integer" mandatory="false">
            <description> In degrees, true north at 0 degrees </description>
        </param>
        <param name="nearestStormDistance" type="Integer" mandatory="false">
            <description> In km </description>
        </param>
        <param name="precipAccumulation" type="Float" mandatory="false">
            <description> cm </description>
        </param>
        <param name="precipIntensity" type="Float" mandatory="false">
            <description> cm of water per hour </description>
        </param>
        <param name="precipProbability" type="Float" minvalue="0" maxvalue="1" mandatory="false">
            <description> 0 to 1, percentage chance </description>
        </param>
        <param name="precipType" type="String" mandatory="false">
            <description> e.g. "rain", "snow", "sleet", "hail" </description>
        </param>
        <param name="visibility" type="Float" mandatory="false">
            <description> In km </description>
        </param>

        <param name="weatherIcon" type="Common.Image" mandatory="false"/>
    </struct>

    <struct name="WeatherServiceData">
        <description> This data is related to what a weather service would provide</description>
        <param name="location" type="Common.LocationDetails" mandatory="true"/>
        <param name="currentForecast" type="Common.WeatherData" mandatory="false"/>
        <param name="minuteForecast" type="Common.WeatherData" array="true" minsize="15" maxsize="60" mandatory="false"/>
        <param name="hourlyForecast" type="Common.WeatherData" array="true" minsize="1" maxsize="96" mandatory="false"/>
        <param name="multidayForecast" type="Common.WeatherData" array="true" minsize="1" maxsize="30" mandatory="false"/>
        <param name="alerts" type="Common.WeatherAlert" array="true" minsize="1" maxsize="10" mandatory="false">
            <description> This array should be ordered with the first object being the current day</description>
        </param>
    </struct>

    <struct name="NavigationServiceManifest">
        <param name="acceptsWayPoints" type="Boolean" mandatory="false">
            <description> Informs the subscriber if this service can actually accept way points. </description>
        </param>
    </struct>

    <enum name="NavigationAction">
        <element name="TURN">
            <description> Using this action plus a supplied direction can give the type of turn. </description>
        </element>
        <element name="EXIT"/>
        <element name="STAY"/>
        <element name="MERGE"/>
        <element name="FERRY"/>
        <element name="CAR_SHUTTLE_TRAIN"/>
        <element name="WAYPOINT"/>
    </enum>

    <enum name="NavigationJunction">
        <element name="REGULAR">
            <description> A junction that represents a standard intersection with a single road crossing another. </description>
        </element>
        <element name="BIFURCATION">
            <description> A junction where the road splits off into two paths; a fork in the road. </description>
        </element>
        <element name="MULTI_CARRIAGEWAY">
            <description> A junction that has multiple intersections and paths. </description>
        </element>
        <element name="ROUNDABOUT">
            <description> A junction where traffic moves in a single direction around a central, non-traversable point to reach one of the connecting roads. </description>
        </element>
        <element name="TRAVERSABLE_ROUNDABOUT">
            <description> Similar to a roundabout, however the center of the roundabout is fully traversable. Also known as a mini-roundabout. </description>
        </element>
        <element name="JUGHANDLE">
            <description> A junction where lefts diverge to the right, then curve to the left, converting a left turn to a crossing maneuver. </description>
        </element>
        <element name="ALL_WAY_YIELD">
            <description> Multiple way intersection that allows traffic to flow based on priority; most commonly right of way and first in, first out. </description>
        </element>
        <element name="TURN_AROUND">
            <description> A junction designated for traffic turn arounds. </description>
        </element>
    </enum>

    <enum name="Direction">
        <element name="LEFT"/>
        <element name="RIGHT"/>
    </enum>

    <struct name="NavigationInstruction">
        <param name="locationDetails" type="Common.LocationDetails" mandatory="true"/>

        <param name="action" type="Common.NavigationAction" mandatory="true"/>

        <param name="eta" type="Common.DateTime" mandatory="false"/>

        <param name="bearing" type="Integer" minvalue="0" maxvalue="359" mandatory="false">
            <description> The angle at which this instruction takes place. For example, 0 would mean straight, less than 45 is bearing right, greater than 135 is sharp right, between 45 and 135 is a regular right, and 180 is a U-Turn, etc. </description>
        </param>

        <param name="junctionType" type="Common.NavigationJunction" mandatory="false"/>

        <param name="drivingSide" type="Common.Direction" mandatory="false">
            <description> Used to infer which side of the road this instruction takes place. For a U-Turn (action=TURN, bearing=180) this will determine which direction the turn should take place. </description>
        </param>

        <param name="details" type="String" mandatory="false">
            <description> This is a string representation of this instruction, used to display instructions to the users. This is not intended to be read aloud to the users, see the param prompt in NavigationServiceData for that. </description>
        </param>

        <param name="image" type="Common.Image" mandatory="false">
            <description> An image representation of this instruction. </description>
        </param>
    </struct>

    <struct name="NavigationServiceData">
        <description> This data is related to what a navigation service would provide.</description>

        <param name="timeStamp" type="Common.DateTime" mandatory="true">
            <description> This is the timestamp of when the data was generated. This is to ensure any time or distance given in the data can accurately be adjusted if necessary. </description>
        </param>

        <param name="origin" type="Common.LocationDetails" mandatory="false"/>
        <param name="destination" type="Common.LocationDetails" mandatory="false"/>
        <param name="destinationETA" type="Common.DateTime" mandatory="false"/>

        <param name="instructions" type="Common.NavigationInstruction" array="true" mandatory="false">
            <description> This array should be ordered with all remaining instructions. The start of this array should always contain the next instruction.</description>
        </param>

        <param name="nextInstructionETA" type="Common.DateTime" mandatory="false"/>
        <param name="nextInstructionDistance" type="Float" mandatory="false">
            <description>The distance to this instruction from current location. This should only be updated ever .1 unit of distance. For more accuracy the consumer can use the GPS location of itself and the next instruction. </description>
        </param>
        <param name="nextInstructionDistanceScale" type="Float" mandatory="false">
            <description>Distance till next maneuver (starting from) from previous maneuver.</description>
        </param>

        <param name="prompt" type="String" mandatory="false">
            <description>This is a prompt message that should be conveyed to the user through either display or voice (TTS). This param will change often as it should represent the following: approaching instruction, post instruction, alerts that affect the current navigation session, etc.</description>
        </param>
    </struct>

    <struct name="AppServiceManifest">
        <description> This manifest contains all the information necessary for the service to be published, activated, and consumers able to interact with it </description>

        <param name="serviceName" type="String" mandatory="false">
            <description> Unique name of this service </description>
        </param>

        <param name="serviceType" type="String" mandatory="true">
            <description> The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core. </description>
        </param>

        <param name="serviceIcon" type="Common.Image" mandatory="false">
            <description> The icon to be associated with this service. Most likely the same as the appIcon.</description>
        </param>

        <param name="allowAppConsumers" type="Boolean" mandatory="false" defvalue="false">
            <description> If true, app service consumers beyond the IVI system will be able to access this service. If false, only the IVI system will be able consume the service. If not provided, it is assumed to be false. </description>
        </param>

        <param name="rpcSpecVersion" type="Common.SyncMsgVersion" mandatory="false">
            <description> This is the max RPC Spec version the app service understands. This is important during the RPC passthrough functionality. If not included, it is assumed the max version of the module is acceptable. </description>
        </param>

        <param name="handledRPCs" type="Integer" array="true" mandatory="false">
            <description> This field contains the Function IDs for the RPCs that this service intends to handle correctly. This means the service will provide meaningful responses. </description>
        </param>

        <param name="mediaServiceManifest" type="Common.MediaServiceManifest" mandatory="false"/>
        <param name="weatherServiceManifest" type="Common.WeatherServiceManifest" mandatory="false"/>
        <param name="navigationServiceManifest" type="Common.NavigationServiceManifest" mandatory="false"/>
    </struct>

    <struct name="AppServiceRecord">
        <description> This is the record of an app service publisher that the module has. It should contain the most up to date information including the service's active state</description>

        <param name="serviceID" type="String" mandatory="true">
            <description> A unique ID tied to this specific service record. The ID is supplied by the module that services publish themselves. </description>
        </param>

        <param name="serviceManifest" type="Common.AppServiceManifest" mandatory="true">
            <description> Manifest for the service that this record is for.</description>
        </param>

        <param name="servicePublished" type="Boolean" mandatory="true">
            <description> If true, the service is published and available. If false, the service has likely just been unpublished, and should be considered unavailable.</description>
        </param>

        <param name="serviceActive" type="Boolean" mandatory="true">
            <description> If true, the service is the active primary service of the supplied service type. It will receive all potential RPCs that are passed through to that service type. If false, it is not the primary service of the supplied type. See servicePublished for its availability. </description>
        </param>
    </struct>

    <struct name="AppServiceData">
        <description> Contains all the current data of the app service. The serviceType will link to which of the service data objects are included in this object (e.g. if the service type is MEDIA, the mediaServiceData param should be included).</description>

        <param name="serviceType" type="String" mandatory="true">
            <description>The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core.</description>
        </param>
        <param name="serviceID" type="String" mandatory="true"/>

        <param name="mediaServiceData" type="Common.MediaServiceData" mandatory="false"/>
        <param name="weatherServiceData" type="Common.WeatherServiceData" mandatory="false"/>
        <param name="navigationServiceData" type="Common.NavigationServiceData" mandatory="false"/>
    </struct>

    <enum name="ServiceUpdateReason">
        <element name="PUBLISHED">
            <description> The service has just been published with the module and once activated to the primary service of its type, it will be ready for possible consumption.</description>
        </element>
        <element name="REMOVED">
            <description> The service has just been unpublished with the module and is no longer accessible</description>
        </element>
        <element name="ACTIVATED">
            <description> The service is activated as the primary service of this type. All requests dealing with this service type will be handled by this service.</description>
        </element>
        <element name="DEACTIVATED">
            <description> The service has been deactivated as the primary service of its type</description>
        </element>
        <element name="MANIFEST_UPDATE">
          <description> The service has updated its manifest. This could imply updated capabilities. Note: Currently unimplemented </description>
        </element>
    </enum>

    <struct name="AppServiceCapability">
        <param name="updateReason" type="Common.ServiceUpdateReason" mandatory="false">
            <description> Only included in OnSystemCapabilityUpdated. Update reason for service record.</description>
        </param>
        <param name="updatedAppServiceRecord" type="Common.AppServiceRecord" mandatory="true">
            <description>Service record for a specific app service provider</description>
        </param>
    </struct>

    <struct name="AppServicesCapabilities">
        <description>Capabilities of app services including what service types are supported and the current state of services.</description>
        <param name="appServices" type="Common.AppServiceCapability" array="true" mandatory="false">
            <description>An array of currently available services. If this is an update to the capability the affected services will include an update reason in that item</description>
        </param>
    </struct>

    <!-- End App Services -->

    <enum name="SystemCapabilityType">
        <description>Enumerations of all available system capability types</description>
        <element name="NAVIGATION"/>
        <element name="PHONE_CALL"/>
        <element name="VIDEO_STREAMING"/>
        <element name="REMOTE_CONTROL"/>
        <element name="APP_SERVICES" />
        <element name="SEAT_LOCATION"/>
        <element name="DISPLAYS"/>
    </enum>

    <struct name="SystemCapability">
        <description>
          The systemCapabilityType identifies which data object exists in this struct. For example,
          if the SystemCapability Type is NAVIGATION then a "navigationCapability" should exist
        </description>
        <param name="systemCapabilityType" type="Common.SystemCapabilityType" mandatory="true">
            <description>Used as a descriptor of what data to expect in this struct. The corresponding param to this enum should be included and the only other param included.</description>
        </param>
        <param name="navigationCapability" type="Common.NavigationCapability" mandatory="false">
            <description>Describes extended capabilities for onboard navigation system </description>
        </param>
        <param name="phoneCapability" type="Common.PhoneCapability" mandatory="false">
            <description>Describes extended capabilities of the module's phone feature</description>
        </param>
        <param name="videoStreamingCapability" type="Common.VideoStreamingCapability" mandatory="false">
            <description>Describes extended capabilities of the module's phone feature</description>
        </param>
        <param name="remoteControlCapability" type="Common.RemoteControlCapabilities" mandatory="false">
            <description>Describes extended capabilities of the module's phone feature</description>
        </param>
        <param name="appServicesCapabilities" type="Common.AppServicesCapabilities" mandatory="false">
            <description>
              An array of currently available services.
              If this is an update to the capability the affected services will include
              an update reason in that item
            </description>
        </param>
        <param name="displayCapabilities" type="Common.DisplayCapability" array="true" minsize="1" maxsize="1000" mandatory="false"/>
        <param name="seatLocationCapability" type="SeatLocationCapability" mandatory="false">
            <description>Contains information about the locations of each seat</description>
        </param>
    </struct>

</interface>

<interface name="Buttons" version="1.3.0" date="2017-07-18">
    <function name="GetCapabilities" messagetype="request">
      <description>Method is invoked at system start-up. SDL requests the information about all supported hardware buttons and their capabilities</description>
    </function>
    <function name="GetCapabilities" messagetype="response">
      <param name="capabilities" type="Common.ButtonCapabilities" array="true" minsize="1" maxsize="100" mandatory="true">
        <description>Response must provide the names of available buttons and their capabilities.See ButtonCapabilities</description>
      </param>
      <param name="presetBankCapabilities" type="Common.PresetBankCapabilities" mandatory="false">
        <description>Must be returned if the platform supports custom on-screen Presets</description>
      </param>
    </function>

    <function name="ButtonPress" messagetype="request">
      <description>Method is invoked when the application tries to press a button</description>
      <param name="moduleType" type="Common.ModuleType" mandatory="true" >
        <description>The module where the button should be pressed</description>
      </param>
      <param name="moduleId" type="String" maxlength="100" mandatory="false">
        <description>Id of a module, published by System Capability. </description>
      </param>
      <param name="buttonName" type="Common.ButtonName" mandatory="true" />
      <param name="buttonPressMode" type="Common.ButtonPressMode" mandatory="true" >
        <description>Indicates whether this is a LONG or SHORT button press event.</description>
      </param>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of the application that triggers the permission prompt.</description>
      </param>
    </function>
    <function name="ButtonPress" messagetype="response">
    </function>

    <function name="OnButtonEvent" messagetype="notification">
      <description>HU system must notify about every UP/DOWN event for buttons</description>
      <param name="name" type="Common.ButtonName" mandatory="true"/>
      <param name="mode" type="Common.ButtonEventMode" mandatory="true">
            <description>Indicates whether this is an UP or DOWN event.</description>
      </param>
      <param name="customButtonID" type="Integer" mandatory="false" minvalue="0" maxvalue="65536">
        <description>Must be provided if ButtonName is CUSTOM_BUTTON, this references the integer ID passed by a custom button. (e.g. softButtonName)</description>
      </param>
      <param name="appID" type="Integer" mandatory="false">
        <description>
                In case the ButtonName is CUSTOM_BUTTON or OK, HMI must include appID parameters to OnButtonPress notification sent to SDL.
                If appID is not sent together with CUSTOM_BUTTON, this notification will be ignored by SDL.
                If appID is present for OK button -> SDL transfers notification to the named app only if it is in FULL or LIMITED (ignores if app is in NONE or BACKGROUND).
                If appID is omited for OK button -> SDL transfers notification to app in FULL
        </description>
      </param>
    </function>
    <function name="OnButtonPress" messagetype="notification">
        <param name="name" type="Common.ButtonName" mandatory="true"/>
        <param name="mode" type="Common.ButtonPressMode" mandatory="true">
            <description>Indicates whether this is a LONG or SHORT button press event.</description>
        </param>
        <param name="customButtonID" type="Integer" mandatory="false" minvalue="0" maxvalue="65536">
            <description>Must be returned if ButtonName is CUSTOM_BUTTON, this references the string passed by a custom button. (e.g. softButtonName)</description>
        </param>
        <param name="appID" type="Integer" mandatory="false">
            <description>
                In case the ButtonName is CUSTOM_BUTTON or OK, HMI must include appID parameters to OnButtonEvent notification sent to SDL.
                If appID is not sent together with CUSTOM_BUTTON, this notification will be ignored by SDL.
                If appID is present for OK button -> SDL transfers notification to the named app only if it is in FULL or LIMITED (ignores if app is in NONE or BACKGROUND).
                If appID is omited for OK button -> SDL transfers notification to app in FULL
            </description>
        </param>
    </function>
    <function name="OnButtonSubscription" messagetype="notification">
      <description>
        Sender: SDL->HMI. Purpose: to notify about button subscription state is changed for the named application
      </description>
      <param name="name" type="Common.ButtonName" mandatory="true" />
      <param name="isSubscribed" type="Boolean" mandatory="true">
        <description>
          Defines whether the named button has status of 'subscribed' or 'unsubscribed':
          If "true" - the named button is subscribed.
          If "false" - the named button is unsubscribed.
        </description>
      </param>
      <param name="appID" type="Integer" mandatory="true">
        <description>
          The ID of application that relates to this button-subscription status change.
        </description>
      </param>
    </function>
</interface>

<interface name="BasicCommunication" version="2.1.0" date="2019-03-18">
<function name="OnServiceUpdate" messagetype="notification">
  <description>
    Must be sent by SDL to HMI when there is an update on status of certain services.
    Services supported with current version: Video
  </description>
  <param name="serviceType" type="Common.ServiceType" mandatory="true">
    <description>Specifies the service which has been updated.</description>
  </param>
  <param name="serviceEvent" type="Common.ServiceEvent" mandatory="false">
    <description>Specifies service update event.</description>
  </param>
  <param name="reason" type="Common.ServiceStatusUpdateReason" mandatory="false">
    <description>
      The reason for a service event. Certain events may not have a reason, such as when a service is ACCEPTED (which is the normal expected behavior).
    </description>
  </param>
   <param name="appID" type="Integer" mandatory="false">
       <description>ID of the application which triggered the update.</description>
   </param>
</function>
    <function name="GetSystemTime" messagetype="request">
      <description>Request from SDL to HMI to obtain current UTC time.</description>
    </function>
    <function name="GetSystemTime" messagetype="response">
      <param name="systemTime" type="Common.DateTime" mandatory="true">
        <description>Current UTC system time</description>
      </param>
    </function>
    <function name="OnSystemTimeReady" messagetype="notification">
      <description>HMI must notify SDL about readiness to provide system time.</description>
    </function>
    <function name="OnReady" messagetype="notification">
      <description>HMI must notify SDL about its readiness to start communication. In fact, this has to be the first message between SDL and HMI.</description>
    </function>
    <function name="OnStartDeviceDiscovery" messagetype="notification">
      <description>Initiated by HMI user for getting the list of connected devices.</description>
    </function>
    <function name="OnUpdateDeviceList" messagetype="notification">
      <description>Notification from HMI to SDL sent when HMI requires update of device list (i.e. when user clicks 'Change Device' button)</description>
    </function>
    <function name="OnResumeAudioSource" messagetype="notification">
      <description>This method must be invoked by SDL to update audio state.</description>
      <param name="appID" type="Integer" mandatory="true">
        <description>The ID of app to be resumed audio source.</description>
      </param>
    </function>
    <function name="OnSDLPersistenceComplete" messagetype="notification">
    </function>
    <function name="UpdateAppList" messagetype="request">
      <description>Issued by SDL to notify HMI about new applications registered.</description>
      <param name="applications" type="Common.HMIApplication" mandatory="true" array="true" minsize="0" maxsize="100"/>
    </function>
    <function name="UpdateAppList" messagetype="response">
    </function>
    <function name="UpdateDeviceList" messagetype="request">
      <description>Request from SmartDeviceLink to HMI to change device list.</description>
      <param name="deviceList" type="Common.DeviceInfo" mandatory="true" array="true" minsize="0" maxsize="100">
        <description>The array of names/IDs of connected devices</description>
      </param>
    </function>
    <function name="UpdateDeviceList" messagetype="response">
    </function>
    <function name="OnFileRemoved" messagetype="notification">
      <description>Notifies HMI in case some application file has been removed</description>
      <param name="fileName" type="String" minlength="1" maxlength="30" mandatory="true">
        <description>The name of the removed file</description>
      </param>
      <param name="fileType" type="Common.FileType" mandatory="true">
        <description>The file type. See FileType.</description>
      </param>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of the application.</description>
      </param>
    </function>
    <function name="OnDeviceChosen" messagetype="notification">
      <description>Notification must be initiated by HMI on user selecting device in the list of devices.</description>
      <param name="deviceInfo" type="Common.DeviceInfo" mandatory="true">
        <description>The name and ID of the device chosen</description>
      </param>
    </function>
    <function name="OnFindApplications" messagetype="notification">
      <description>This method must be invoked by HMI to get list of registered apps.</description>
      <param name="deviceInfo" type="Common.DeviceInfo" mandatory="false">
        <description>The name and ID of the device the list of registered applications is required for.</description>
      </param>
    </function>
    <function name="ActivateApp" messagetype="request">
      <description>Request from SDL to HMI to bring specified application to front on UI e.g make it HMI status 'FULL'.</description>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of deactivated application.</description>
      </param>
      <param name="priority" type="Common.AppPriority" mandatory="false">
        <description>Send to HMI so that it can coordinate order of requests/notifications correspondingly.</description>
      </param>
      <param name="level" type="Common.HMILevel" mandatory="false">
        <description>If level for application is to be changed to something else then FULL then this parameter should be used.</description>
      </param>
    </function>
    <function name="ActivateApp" messagetype="response">
    </function>
    <function name="CloseApplication" messagetype="request">
      <description>Request from the application to exit the foreground.</description>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of selected application.</description>
      </param>
    </function>
    <function name="CloseApplication" messagetype="response">
    </function>
    <function name="OnAppActivated" messagetype="notification">
      <description>Must be sent by HU system when the user clicks on app in the list of registered apps or on soft button with 'STEAL_FOCUS' action.</description>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of selected application.</description>
      </param>
      <param name="windowID" type="Integer" mandatory="false">
        <description>
          This is the unique ID assigned to the window that this RPC is intended. If this param is not included, it will be assumed that this request is specifically for the main window on the main display. See PredefinedWindows enum.
        </description>
      </param>
    </function>
    <function name="OnAppDeactivated" messagetype="notification">
      <description>Must be sent by HU system when the user switches to any functionality which is not other mobile application.</description>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of deactivated application.</description>
      </param>
      <param name="windowID" type="Integer" mandatory="false">
        <description>
          This is the unique ID assigned to the window that this RPC is intended. If this param is not included, it will be assumed that this request is specifically for the main window on the main display. See PredefinedWindows enum.
        </description>
      </param>
    </function>
    <function name="OnAppRegistered" messagetype="notification">
      <description>Issued by SDL to notify HMI about new application registered.</description>
      <param name="application" type="Common.HMIApplication" mandatory="true">
        <description>The information about application registered. See HMIApplication. </description>
      </param>
      <param name="ttsName" type="Common.TTSChunk" minsize="1" maxsize="100" array="true" mandatory="false" >
        <description>
          TTS string for VR recognition of the mobile application name, e.g. "Ford Drive Green".
          Meant to overcome any failing on speech engine in properly pronouncing / understanding app name.
          May not be empty.
          May not start with a new line character.
          Not unique value
        </description>
      </param>
      <param name="vrSynonyms" type="String" maxlength="40" minsize="1" maxsize="100" array="true" mandatory="false">
        <description>
          Defines an additional voice recognition command.
          Must not interfere with any name of previously registered applications from the same device.
        </description>
      </param>
      <param name="resumeVrGrammars" type="Boolean" mandatory="false">
        <description>The flag if VR grammars resume is required</description>
      </param>
      <param name="priority" type="Common.AppPriority" mandatory="false">
        <description>Send to HMI so that it can coordinate order of requests/notifications correspondingly.</description>
      </param>
    </function>
    <function name="OnAppUnregistered" messagetype="notification">
      <description>
        Issued by SDL to notify HMI about application unregistered.
        Application then to be removed from application list; all data connected with application has to be cleared up.
      </description>
      <param name="unexpectedDisconnect" type="Boolean" mandatory="true">
        <description>
          SDL sends 'true' in case the connection is unexpectedly lost.
          SDL sends 'false' in case the mobile app is unregistered gracefully (via appropriate RPC)
        </description>
      </param>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of the application unregistered</description>
      </param>
    </function>
    <function name="OnExitApplication" messagetype="notification">
      <description>Must be sent by HMI when the User chooses to exit the application..</description>
      <param name="reason" type="Common.ApplicationExitReason" mandatory="true">
        <description>Specifies reason of moving the app to NONE</description>
      </param>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of the application to be exited.</description>
      </param>
    </function>
    <function name="OnExitAllApplications" messagetype="notification">
      <description>Sent by HMI to SDL to close all registered applications.</description>
      <param name="reason" type="Common.ApplicationsCloseReason" mandatory="true">
        <description>Specifies reason for exiting all apllications.</description>
      </param>
    </function>
    <function name="OnAwakeSDL" messagetype="notification">
        <description>
            Sender: HMI->SDL. Must be sent to return SDL to normal operation after 'Suspend' or 'LowVoltage' events
        </description>
    </function>
    <function name="MixingAudioSupported" messagetype="request">
      <description>Request from SDL to HMI to find out if the last one supports mixing audio (i.e. recording TTS command and playing audio).</description>
    </function>
    <function name="MixingAudioSupported" messagetype="response">
      <description>If no response received SDL supposes that mixing audio is not supported</description>
      <param name="attenuatedSupported" type="Boolean" mandatory="true">
        <description>Must be true if supported</description>
      </param>
    </function>
    <function name="DialNumber" messagetype="request">
      <description>Request from SDL to call a specific number.</description>
      <param name="number" type="String" maxlength="40" mandatory="true">
        <description>
            Phone number is a string, which can be up to 40 chars.
            All characters shall be stripped from string except digits 0-9 and * # , ; +
        </description>
      </param>
      <param name="appID" type="Integer" mandatory="true">
        <description>ID of application that concerns this RPC.</description>
      </param>
    </function>
    <function name="DialNumber" messagetype="response">
    </function>
    <!-- Policies -->

    <!-- SyncP RPC-->
    <function name="OnSystemRequest" messagetype="notification" >
      <description>
        An asynchronous request from the system for specific data from the device or the cloud or response to a request from the device or cloud
        Binary data can be included in hybrid part of message for some requests (such as Authentication request responses)
      </description>
      <param name="requestType" type="Common.RequestType" mandatory="true">
        <description>The type of system request.</description>
      </param>
      <param name="requestSubType" type="String" maxlength="255" mandatory="false">
        <description>
          This parameter is filled for supporting OEM proprietary data exchanges.
        </description>
      </param>
      <param name="url" type="String" maxlength="1000" minlength="1" mandatory="false">
        <description>Optional array of URL(s) for HTTP requests.</description>
      </param>
      <param name="fileType" type="Common.FileType" mandatory="false">
        <description>Optional file type (meant for HTTP file requests).</description>
      </param>
      <param name="offset" type="Integer" minvalue="0" maxvalue="100000000000" mandatory="false">
        <description>Optional offset in bytes for resuming partial data chunks</description>
      </param>
      <param name="length" type="Integer" minvalue="0" maxvalue="100000000000" mandatory="false">
        <description>Optional length in bytes for resuming partial data chunks</description>
      </param>
      <param name="timeout" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="false">
      </param>
      <param name="fileName" type="String" maxlength="255" minlength="1" mandatory="true">
        <description>File reference name.</description>
      </param>
      <param name="appID" type="Integer" mandatory="false">
        <description>ID of application that requested this RPC.</description>
      </param>
    </function>
    <function name="SystemRequest" messagetype="request">
      <description>An asynchronous request from the device; binary data can be included in hybrid part of message for some requests (such as Authentication requests)</description>
      <param name="requestType" type="Common.RequestType" mandatory="true">
          <description>The type of system request.</description>
      </param>
      <param name="requestSubType" type="String" maxlength="255" mandatory="false">
          <description>
              This parameter is filled for supporting OEM proprietary data exchanges.
          </description>
      </param>
      <param name="fileName" type="String" maxlength="255" minlength="1" mandatory="true">
          <description>The path to file.</description>
      </param>
      <param name="appID" type="Integer" mandatory="true">
        <description>Internal ID of the application that requested this RPC.</description>
      </param>
    </function>
    <function name="SystemRequest" messagetype="response">
    </function>
    <function name="PolicyUpdate" messagetype="request">
      <description>
        From: SDL
        To: SYNCP Manager
        Asks SYNCP Manager to send given Policy Table snapshot to the backend
      </description>
      <param name="file" type="String" minlength="1" maxlength="255" mandatory="true">
        <description>
          Location of policy table snapshot
        </description>
      </param>
      <param name="timeout" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
        <description>
          Send attempt timeout in seconds
        </description>
      </param>
      <param name="retry" type="Integer" minvalue="0" maxvalue="65535" array="true" minsize="1" maxsize="5" mandatory="true">
        <description>
          Array of delays to wait after failed atempts
        </description>
      </param>
    </function>
    <function name="PolicyUpdate" messagetype="response">
    </function>
    <!-- End of SyncP RPC-->

    <function name="OnSDLClose" messagetype="notification">
      <description>SDL must notify HMI about finish working application</description>
    </function>

    <function name="OnPutFile" messagetype="notification" >
      <description>
        Notification that is sent to HMI when a mobile application uploads a file
      </description>

      <param name="offset" type="Integer" minvalue="0" maxvalue="100000000000" mandatory="false">
        <description>Optional offset in bytes for resuming partial data chunks</description>
      </param>
      <param name="length" type="Integer" minvalue="0" maxvalue="100000000000" mandatory="false">
        <description>Optional length in bytes for resuming partial data chunks</description>
      </param>

      <param name="fileSize" type="Integer" minvalue="0" maxvalue="100000000000" mandatory="false">
        <description>Full Size of file. sends in first OnPutFile notification if file is splited
                    into many PutFiles
        </description>
      </param>

      <param name="FileName" type="String" maxlength="255" mandatory="true">
        <description>File reference name.</description>
      </param>

      <param name="syncFileName" type="String" maxlength="255" mandatory="true">
        <description>File reference name.</description>
      </param>

      <param name="fileType" type="Common.FileType" mandatory="true">
          <description>Selected file type.</description>
      </param>

      <param name="persistentFile" type="Boolean" defvalue="false" mandatory="false">
        <description>
          Indicates if the file is meant to persist between sessions / ignition cycles.
          If set to TRUE, then the system will aim to persist this file through session / cycles.
          While files with this designation will have priority over others, they are subject to deletion by the system at any time.
          In the event of automatic deletion by the system, the app will receive a rejection and have to resend the file.
          If omitted, the value will be set to false.
        </description>
      </param>
      <param name="isSystemFile" type="Boolean" defvalue="false" mandatory="false">
        <description>
          Indicates if the file is meant to be passed thru core to elsewhere on the system.
          If true the system will pass the data thru as it arrives to a predetermined area outside of core.
        </description>
      </param>
      <param name="appID" type="Integer" mandatory="false">
        <description> ID of application that uploaded this file. </description>
      </param>
    </function>

  <function name="GetFilePath" messagetype="request">
    <description>This request is sent to retrieve a file path from the HMI.</description>
    <param name="fileName" type="String" maxlength="255" mandatory="true">
      <description>File name that should be retrieved.</description>
    </param>
    <param name="fileType" type="Common.FileType" mandatory="false">
      <description>Selected file type.</description>
    </param>
    <param name="appServiceId" type="String" mandatory="false">
      <description> ID of the service that should have uploaded the requested file.</description>
    </param>
  </function>

  <function name="GetFilePath" messagetype="response">
    <description> HMI handles the request internally and returns the file path with the response.</description>
    <param name="filePath" type="String" mandatory="false">
      <description>Path to file in hmi</description>
    </param>
    <param name="fileType" type="Common.FileType" mandatory="false">
      <description>Selected file type.</description>
    </param>
  </function>

<!-- Policies -->
  <function name="GetSystemInfo" messagetype="request">
    <description>Request from SDL to HMI to obtain information about head unit system.</description>
  </function>
  <function name="GetSystemInfo" messagetype="response">
    <param name="ccpu_version" type="String" maxlength="500" mandatory="true">
      <description>Software version of the module</description>
    </param>
    <param name="language" type="Common.Language" mandatory="true">
      <description>ISO 639-1 combined with ISO 3166 alpha-2 country code (i.e. en-us)</description>
    </param>
    <param name="wersCountryCode" type="String" maxlength="500" mandatory="true">
      <description>Country code from the Ford system WERS (i.e.WAEGB).</description>
    </param>
  </function>
  <function name="OnSystemInfoChanged" messagetype="notification">
    <description>Issued by system to SDL to notify that some system param has changed. Currently applied for Sync Language.</description>
    <param name="language" type="Common.Language" mandatory="true"/>
  </function>
  <function name="OnIgnitionCycleOver" messagetype="notification">
    <description>Notification from system to SDL to let it know that ignition cycle is over.</description>
  </function>
  <function name="DecryptCertificate" messagetype="request">
     <description>Sender: SDL->HMI. Purpose: to decrypt the certificate received via the Updated Policy Table. </description>
     <param name="fileName" type="String" maxlength="255" minlength="1" mandatory="true">
         <description>The path to the file with the encrypted certificate from the PolicyTable.</description>
     </param>
   </function>
   <function name="DecryptCertificate" messagetype="response">
         <description>SUCCESS - in case the certificate is decrypted and placed to the same file from request.</description>
   </function>
  <!-- End of Policies -->
   <function name="OnEventChanged" messagetype="notification">
     <description>Sender: HMI->SDL. When event is become active</description>
     <param name="eventName" type="Common.EventTypes" mandatory="true">
        <description>Specifies the types of active events.</description>
     </param>
     <param name="isActive" type="Boolean" mandatory="true">
        <description>Must be 'true' - when the event is started on HMI. Must be 'false' when the event is ended on HMI</description>
     </param>
   </function>
  <function name="OnSystemCapabilityUpdated" messagetype="notification">
    <description>
      A notification between HMI and SDL that a specific system capability has been changed.
      It can be sent in both directions SDL to HMI and HMI to SDL. Direction is dependent on
      the point where capabilities have been changed
    </description>
    <param name="systemCapability" type="Common.SystemCapability" mandatory="true">
      <description>The system capability that has been updated</description>
    </param>
    <param name="appID" type="Integer" mandatory="false">
      <description>ID of application that is related to this RPC.</description>
    </param>
  </function> 
</interface>

<interface name="VR" version="1.1.0" date="2017-04-27">
  <function name="IsReady" messagetype="request">
    <description>Method is invoked at system startup. Response provides information about presence of VR module and its readiness to cooperate with SDL.</description>
  </function>
  <function name="IsReady" messagetype="response">
    <param name="available" type="Boolean" mandatory="true">
      <description>Must be true if VR is present and ready to communicate with SDL.</description>
    </param>
  </function>
  <function name="Started" messagetype="notification">
    <description>Must be initiated  by VR module to let SDL know that VR session has started.</description>
  </function>
  <function name="Stopped" messagetype="notification">
    <description>Must be initiated by VR module to let SDL know that VR session has stopped.</description>
  </function>
  <function name="AddCommand" messagetype="request">
    <description>Request from SDL to add a command(string with associated id) to VR.</description>
    <param name="cmdID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="true">
      <description>ID of a command (further to be used in OnCommand notification).</description>
    </param>
    <param name="vrCommands" type="String" mandatory="true" maxlength="99" minsize="1" maxsize="100" array="true">
      <description>List of strings to be used as VR commands.</description>
    </param>
    <param name="type" type="Common.VRCommandType" mandatory="true">
      <description>Type of added command. See VRCommandType.</description>
    </param>
    <param name="grammarID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="true">
      <description>
        ID of the specific grammar, whether top-level or choice set.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="false">
      <description>ID of application that requested this RPC.</description>
    </param>
  </function>
  <function name="AddCommand" messagetype="response">
  </function>
  <function name="DeleteCommand" messagetype="request">
    <description>Request from SDL to delete a command from VR.</description>
    <param name="cmdID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="true">
      <description>Id of a command (list of strings), previously sent by AddCommand.</description>
    </param>
    <param name="type" type="Common.VRCommandType" mandatory="true">
      <description>Type of added command. See VRCommandType.</description>
    </param>
    <param name="grammarID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="true">
      <description>ID of the specific grammar.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that requested this RPC.</description>
    </param>
  </function>
  <function name="DeleteCommand" messagetype="response">
  </function>
  <function name="PerformInteraction" messagetype="request">
    <description>
      Sets some properties for the application initiated request.
    </description>
    <param name="helpPrompt" type="Common.TTSChunk" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>
        The help prompt. An array of text chunks of type TTSChunk. See TTSChunk. The array must have at least one item.
      </description>
    </param>
    <param name="initialPrompt" type="Common.TTSChunk" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>
        This is the intial prompt spoken to the user at the start of an interaction. An array of text chunks of type TTSChunk. See TTSChunk. The array must have at least one item.
      </description>
    </param>
    <param name="timeoutPrompt" type="Common.TTSChunk" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>
        Help text for a wait timeout. An array of text chunks of type TTSChunk. See TTSChunk. The array must have at least one item.
      </description>
    </param>
    <param name="timeout" type="Integer" mandatory="true">
      <description>Timeout initiate timeoutPrompt</description>
    </param>
    <param name="grammarID" type="Integer" minvalue="0" maxvalue="2000000000" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>
        IDs of the specific compiled grammars for this voice interaction.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
    <param name="cancelID" type="Integer" mandatory="false">
      <description>
        An ID for this specific alert to allow cancellation through the `CancelInteraction` RPC.
      </description>
    </param>
  </function>
  <function name="PerformInteraction" messagetype="response">
    <param name="choiceID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="false">
      <description>
        ID of the choice that was selected in response to PerformInteraction.
      </description>
    </param>
  </function>
  <function name="OnCommand" messagetype="notification">
    <description>Notifies SDL about command trigerred via VR</description>
    <param name="cmdID" type="Integer" mandatory="true" minvalue="0" maxvalue="2000000000">
      <description>ID of of the command (list of strings)</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="ChangeRegistration" messagetype="request">
    <description>Request from SmartDeviceLink to HMI to change language of VR.</description>
    <param name="vrSynonyms" type="String" maxlength="40" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>
        Request new VR synonyms registration
        Defines an additional voice recognition command.
        Must not interfere with any name of previously registered applications from the same device.
      </description>
    </param>
    <param name="language" type="Common.Language" mandatory="true">
      <description>The language application wants to switch to.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
  </function>
  <function name="ChangeRegistration" messagetype="response">
  </function>
  <function name="OnLanguageChange" messagetype="notification">
    <description>Notification from HMI to SmartDeviceLink about change of  language.</description>
    <param name="language" type="Common.Language" mandatory="true">
      <description>Language VR has switched to.</description>
    </param>
  </function>
  <function name="GetSupportedLanguages" messagetype="request">
    <description>Method is invoked at system start-up. Response must provide the information about VR supported languages.</description>
  </function>
  <function name="GetSupportedLanguages" messagetype="response">
    <param name="languages" type="Common.Language" mandatory="true" array="true" minsize="1" maxsize="100">
      <description>List of languages supported in VR.</description>
    </param>
  </function>
  <function name="GetLanguage" messagetype="request">
    <description>Request from SmartDeviceLink to HMI to get currently active  VR language</description>
  </function>
  <function name="GetLanguage" messagetype="response">
    <param name="language" type="Common.Language" mandatory="true"/>
  </function>
  <function name="GetCapabilities" messagetype="request">
    <description>Method is invoked at system startup by SDL to request information about VR capabilities of HMI.</description>
  </function>
  <function name="GetCapabilities" messagetype="response">
    <param name="vrCapabilities" type="Common.VrCapabilities" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>Types of input recognized by VR module.</description>
    </param>
  </function>
</interface>

<interface name="TTS" version="2.0.0" date="2018-09-05">
  <description>RPCs for communication between TTS and SDL.</description>
  <function name="GetCapabilities" messagetype="request">
    <description>Method is invoked at system start-up. SDL requests the information about all supported hardware and their capabilities</description>
  </function>
  <function name="GetCapabilities" messagetype="response">
    <param name="speechCapabilities" type="Common.SpeechCapabilities" minsize="1" maxsize="100" array="true" mandatory="true">
      <description>See SpeechCapabilities</description>
    </param>
    <param name="prerecordedSpeechCapabilities" type="Common.PrerecordedSpeech" minsize="1" maxsize="100" array="true" mandatory="true">
      <description>See PrerecordedSpeech</description>
    </param>
  </function>
  <function name="Started" messagetype="notification">
    <description>Must be initiated  by TTS module to let SDL know that TTS session has started.</description>
  </function>
  <function name="Stopped" messagetype="notification">
    <description>Must be initiated by TTS module to let SDL know that TTS session has stopped.</description>
  </function>
  <function name="IsReady" messagetype="request">
    <description>Method is invoked at system start-up. Response must provide the information about presence of TTS module and its readiness to cooperate with SDL.</description>
  </function>
  <function name="IsReady" messagetype="response">
    <param name="available" type="Boolean" mandatory="true">
      <description>Must be true if TTS is present and ready to communicate with SDL.</description>
    </param>
  </function>
  <function name="Speak" messagetype="request">
    <description>RPC from SDL to TTS for speaking the text.</description>
    <param name="ttsChunks" type="Common.TTSChunk" mandatory="true" array="true" minsize="1" maxsize="100">
      <description>List of strings to be spoken.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that requested this RPC.</description>
    </param>
    <param name="speakType" type="Common.MethodName" mandatory="false">
      <description>Defines the type of the request which causes text-to-speech</description>
    </param>
    <param name="playTone" type="Boolean" mandatory="false">
      <description>Defines that the tone should be played</description>
    </param>
  </function>
  <function name="Speak" messagetype="response">
    <description>Provides information about success of operation.</description>
  </function>
  <function name="StopSpeaking" messagetype="request">
    <description>Initiated by SDL to stop speaking the text.</description>
  </function>
  <function name="StopSpeaking" messagetype="response">
  </function>
  <function name="ChangeRegistration" messagetype="request">
    <description>Request from SmartDeviceLink to HMI to change language of TTS.</description>
    <param name="ttsName" type="Common.TTSChunk" minsize="1" maxsize="100" array="true" mandatory="false" >
      <description>
        Request new ttsName registration
        TTS string for VR recognition of the mobile application name, e.g. "Ford Drive Green".
        Meant to overcome any failing on speech engine in properly pronouncing / understanding app name.
        May not be empty.
        May not start with a new line character.
        Not unique value (SDL makes all the checks)
      </description>
    </param>
    <param name="language" type="Common.Language" mandatory="true">
      <description>The language application wants to switch to.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="ChangeRegistration" messagetype="response">
  </function>
  <function name="OnLanguageChange" messagetype="notification">
    <description>Notification from HMI to SmartDeviceLink about change of  language.</description>
    <param name="language" type="Common.Language" mandatory="true">
      <description>Language TTS has switched to.</description>
    </param>
  </function>
  <function name="GetSupportedLanguages" messagetype="request">
    <description>Method is invoked at system start-up by SDL. Response must provide the information about TTS supported languages.</description>
  </function>
  <function name="GetSupportedLanguages" messagetype="response">
    <param name="languages" type="Common.Language" mandatory="true" array="true" minsize="1" maxsize="100">
      <description>List of languages supported in TTS.</description>
    </param>
  </function>
  <function name="GetLanguage" messagetype="request">
    <description>Request from SmartDeviceLink to HMI to get currently active  TTS language</description>
  </function>
  <function name="GetLanguage" messagetype="response">
    <param name="language" type="Common.Language" mandatory="true"/>
  </function>
  <function name="SetGlobalProperties" messagetype="request">
    <description>Sets some properties for the application initiated request.</description>
    <param name="helpPrompt" type="Common.TTSChunk" minsize="0" maxsize="100" array="true" mandatory="false" >
      <description>
          The help prompt.
          An array of text chunks of type TTSChunk. See TTSChunk.
      </description>
    </param>
    <param name="timeoutPrompt" type="Common.TTSChunk" minsize="1" maxsize="100" array="true" mandatory="false" >
      <description>
          Help text for a wait timeout.
          An array of text chunks of type TTSChunk. See TTSChunk.
          The array must have at least one item.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="SetGlobalProperties" messagetype="response">
  </function>
  <function name="OnResetTimeout" messagetype="notification">
    <description>
      Sender: HMI->SDL. HMI must send this notification every 10 sec. in case the 'methodName'
      results long processing on HMI
    </description>
    <param name="appID" type="Integer" mandatory="true">
      <description>Id of application that concerns the 'methodName'.</description>
    </param>
    <param name="methodName" type="String" mandatory="true">
      <description>The name of the method, the renew of timeout is required for</description>
    </param>
  </function>
</interface>

<interface name="UI" version="1.4.0" date="2019-07-24">
  <function name="Alert" messagetype="request">
    <description>Request from SDL to show an alert message on the display.</description>
    <param name="alertStrings" type="Common.TextFieldStruct" mandatory="true" array="true" minsize="0" maxsize="3">
      <description>Array of lines of alert text fields. See TextFieldStruct. Uses alertText1, alertText2, alertText3.</description>
    </param>
    <param name="duration" type="Integer" mandatory="true" minvalue="3000" maxvalue="10000">
      <description>Timeout in milliseconds.</description>
    </param>
    <param name="softButtons" type="Common.SoftButton" mandatory="false" minsize="0" maxsize="4" array="true">
      <description>App defined SoftButtons</description>
    </param>
    <param name="progressIndicator" type="Boolean" mandatory="false">
      <description>If supported on the given platform, the alert GUI will include some sort of animation indicating that loading of a feature is progressing.  e.g. a spinning wheel or hourglass, etc.</description>
    </param>
    <param name="alertType" type="Common.AlertType" mandatory="true">
      <description>Defines if only UI or BOTH portions of the Alert request are being sent to HMI Side</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application requested this RPC.</description>
    </param>
    <param name="cancelID" type="Integer" mandatory="false">
      <description>
        An ID for this specific alert to allow cancellation through the `CancelInteraction` RPC.
      </description>
    </param>
    <param name="alertIcon" type="Common.Image" mandatory="false" >
      <description>
        Image to be displayed for the corresponding alert. See Image. 
        If omitted, no (or the default if applicable) icon should be displayed.
      </description>
    </param>
  </function>

  <function name="Alert" messagetype="response">
    <param name="tryAgainTime" type="Integer" mandatory="false" minvalue="0" maxvalue="2000000000">
      <description>Amount of time (in milliseconds) that SDL must wait before resending an alert. Must be provided if another system event or overlay currently has a higher priority than this alert.</description>
    </param>
  </function>

  <function name="SetDisplayLayout" messagetype="request">
    <description>This RPC is deprecated. Use Show RPC to change layout.</description>
    <param name="displayLayout" type="String" maxlength="500" mandatory="true">
      <description>
        Predefined or dynamically created screen layout.
        Currently only predefined screen layouts are defined.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
    <param name="dayColorScheme" type="Common.TemplateColorScheme" mandatory="false"></param>
    <param name="nightColorScheme" type="Common.TemplateColorScheme" mandatory="false"></param>
  </function>

  <function name="SetDisplayLayout" messagetype="response">
    <description>This RPC is deprecated. Use Show RPC to change layout.</description>
    <param name="displayCapabilities" type="Common.DisplayCapabilities" mandatory="false">
      <description>See DisplayCapabilities</description>
    </param>
    <param name="buttonCapabilities" type="Common.ButtonCapabilities" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>See ButtonCapabilities</description >
    </param>
    <param name="softButtonCapabilities" type="Common.SoftButtonCapabilities" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>If returned, the platform supports on-screen SoftButtons; see SoftButtonCapabilities.</description >
    </param>
    <param name="presetBankCapabilities" type="Common.PresetBankCapabilities" mandatory="false">
      <description>If returned, the platform supports custom on-screen Presets; see PresetBankCapabilities.</description >
    </param>
  </function>

  <function name="Show" messagetype="request">
    <param name="showStrings" type="Common.TextFieldStruct" mandatory="true" array="true" minsize="0" maxsize="8">
      <description>Array of lines of show text fields. See TextFieldStruct. If some field is not set, the corresponding text should stay unchanged. If field's text is empty "", the field must be cleared.
          mainField1: The text that should be displayed in a single or upper display line.
          mainField2: The text that should be displayed on the second display line.
          mainField3: The text that should be displayed on the second "page" first display line.
          mainField4: The text that should be displayed on the second "page" second display line.
          templateTitle: The title of the new template that will be displayed.
          statusBar: statusBar.
          mediaClock: Text value for MediaClock field.
          mediaTrack: The text that should be displayed in the track field. This field is only valid for media applications on NGN type ACMs.
      </description>
    </param>
    <param name="alignment" type="Common.TextAlignment" mandatory="false">
      <description>Specifies how mainField1 and mainField2 texts should be aligned on the display.</description>
      <description>If omitted, texts must be centered</description>
    </param>
    <param name="graphic" type="Common.Image" mandatory="false">
      <description>Path to optional dynamic image or the static binary image itself.  See Image. If omitted, the displayed graphic should not change.</description>
    </param>
    <param name="secondaryGraphic" type="Common.Image" mandatory="false">
      <description>
        Image struct determining whether static or dynamic secondary image to display in app.
        If omitted on supported displays, the displayed secondary graphic shall not change.
      </description>
    </param>
    <param name="softButtons" type="Common.SoftButton" minsize="0" maxsize="8" array="true" mandatory="false">
      <description>App defined SoftButtons.</description>
      <description>If omitted, the currently displayed SoftButton values should not change.</description>
    </param>
    <param name="customPresets" type="String" maxlength="500" minsize="0" maxsize="10" array="true" mandatory="false">
      <description>App labeled on-screen presets (i.e. GEN3 media presets or dynamic search suggestions).</description>
      <description>If omitted on supported displays, the presets will be shown as not defined.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>Id of application related to this RPC.</description>
    </param>
    <param name="windowID" type="Integer" mandatory="false" >
      <description>
        This is the unique ID assigned to the window that this RPC is intended.
        If this param is not included,
        it will be assumed that this request is specifically for the main window
        on the main display.
        See PredefinedWindows enum.
      </description>
    </param>

    <param name="templateConfiguration" type="Common.TemplateConfiguration" mandatory="false">
        <description>
          Used to set an alternate template layout to a window.
        </description>
    </param>
  </function>

  <function name="Show" messagetype="response">
  </function>

  <function name="CreateWindow" messagetype="request">
    <description>
      Create a new window on the display with the specified window type.
    </description>
    <param name="windowID" type="Integer" mandatory="true">
      <description>
        A unique ID to identify the window. The value of '0' will always be the default main window on the main display and should not be used in this context as it will already be created for the app. See PredefinedWindows enum. Creating a window with an ID that is already in use will be rejected with `INVALID_ID`.
      </description>
    </param>

    <param name="windowName" type="String" maxlength="100" mandatory="true">
      <description>
        The window name to be used by the HMI. The name of the pre-created default window will match the app name.
        Multiple apps can share the same window name except for the default main window.
        Creating a window with a name which is already in use by the app will result in `DUPLICATE_NAME`.
      </description>
    </param>

    <param name="type" type="Common.WindowType" mandatory="true">
      <description>The type of the window to be created. Main window or widget.</description>
    </param>

    <param name="associatedServiceType" type="String" mandatory="false">
      <description>
        Allows an app to create a widget related to a specific service type.
        As an example if a `MEDIA` app becomes active, this app becomes audible and is allowed to play audio.
        Actions such as skip or play/pause will be directed to this active media app.
        In case of widgets, the system can provide a single "media" widget which will act as a placeholder for the active media app.
        It is only allowed to have one window per service type. This means that a media app can only have a single MEDIA widget.
        Still the app can create widgets omitting this parameter.
        Those widgets would be available as app specific widgets that are permanently included in the HMI.
        This parameter is related to widgets only. The default main window, which is pre-created during app registration,
        will be created based on the HMI types specified in the app registration request.
      </description>
    </param>

    <param name="duplicateUpdatesFromWindowID" type="Integer" mandatory="false">
      <description>
        Optional parameter. Specify whether the content sent to an existing window
        should be duplicated to the created window.
        If there isn't a window with the ID, the request will be rejected with `INVALID_DATA`.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
  </function>

  <function name="CreateWindow" messagetype="response">
  </function>

  <function name="DeleteWindow" messagetype="request">
    <description>
      Deletes previously created window of the SDL application.
    </description>
    <param name="windowID" type="Integer" mandatory="true">
      <description>
        A unique ID to identify the window. The value of '0' will always be the default main window
        on the main display and cannot be deleted.
        See PredefinedWindows enum.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
  </function>

  <function name="DeleteWindow" messagetype="response">
  </function>

  <function name="AddCommand" messagetype="request">
    <description>Request from SDL to add a command to the application menu.</description>
    <param name="cmdID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="true">
      <description>ID of the command to be added.</description>
    </param>
    <param name="menuParams" type="Common.MenuParams" mandatory="false">
      <description>
        Optional sub value containing parameters of the command (position, name, etc.). See MenuParams.
        If omitted the command should be added to the end of the list of commands.</description>
    </param>
    <param name="cmdIcon" type="Common.Image" mandatory="false">
      <description>Image to be displayed for representing the command. See Image.</description>
      <description>If omitted, no (or the default if applicable) icon should be displayed.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
  </function>

  <function name="AddCommand" messagetype="response">
  </function>

  <function name="DeleteCommand" messagetype="request">
    <description>Request from SDL to delete a command from the in-application menu with the specified command id.</description>
    <param name="cmdID" type="Integer" mandatory="true" minvalue="0" maxvalue="2000000000">
      <description>cmdId previously sent via AddCommand request - id of the command to be deleted.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
  </function>

  <function name="DeleteCommand" messagetype="response">
  </function>

  <function name="AddSubMenu" messagetype="request">
    <description>Request from SDL to add a sub menu to the in-application menu.</description>
    <param name="menuID" type="Integer" minvalue="1" maxvalue="2000000000" mandatory="true">
      <description>ID of the sub menu to be added. Unique for the application.</description>
    </param>
    <param name="menuParams" type="Common.MenuParams" mandatory="true">
      <description>Position and name of menu to be added. 'parent' field is omitted for this RPC.  </description>
    </param>
    <param name="menuIcon" type="Common.Image" mandatory="false">
      <description>The image field for AddSubMenu</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that requested this RPC.</description>
    </param>
    <param name="menuLayout" type="Common.MenuLayout" mandatory="false">
      <description>Sets the layout of the submenu screen.</description>
    </param>
  </function>
  <function name="AddSubMenu" messagetype="response">
  </function>
  <function name="DeleteSubMenu" messagetype="request">
    <description>Request from SDL to delete a submenu from the in-application menu.</description>
    <param name="menuID" type="Integer" minvalue="1" maxvalue="2000000000" mandatory="true" >
      <description>The "menuID" of the sub-menu to be deleted. (See addSubMenu.menuID)</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
  </function>
  <function name="DeleteSubMenu" messagetype="response">
  </function>
  <function name="ShowAppMenu" messagetype="request">
    <description>Request from SDL to show an app's menu or a corresponding sub-menu.</description>
    <param name="menuID" type="Integer" minvalue="1" maxvalue="2000000000" mandatory="false">
      <description>
        If ommited the HMI opens the app's menu.
        If set to a sub-menu ID the HMI opens the corresponding sub-menu previously added using `AddSubMenu`.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
  </function>
  <function name="ShowAppMenu" messagetype="response">
  </function>
  <function name="PerformInteraction" messagetype="request">
    <description>Request from SDL for triggering an interaction (e.g. "Permit GPS?" - Yes, no, Always Allow).</description>
    <param name="initialText" type="Common.TextFieldStruct" mandatory="false">
      <description>Uses initialInteractionText. See TextFieldStruct.</description>
    </param>
    <param name="choiceSet" type="Common.Choice" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>The list of choices to be used for the interaction with the user</description>
    </param>
    <param name="vrHelpTitle" type="String" maxlength="500" mandatory="false">
      <description>VR Help Title text.</description>
      <description>If omitted on supported displays, the default HU system help title should be used.</description>
    </param>
    <param name="vrHelp" type="Common.VrHelpItem" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>VR Help Items. If omitted on supported displays, the default HU system generated help items should be used.</description>
    </param>
    <param name="timeout" type="Integer" minvalue="5000" maxvalue="100000" defvalue="10000" mandatory="true">
      <description>Timeout in milliseconds.</description>
    </param>
    <param name="interactionLayout" type="Common.LayoutMode" mandatory="false">
      <description>See LayoutMode.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
    <param name="cancelID" type="Integer" mandatory="false">
      <description>
        An ID for this specific alert to allow cancellation through the `CancelInteraction` RPC.
      </description>
    </param>
  </function>
  <function name="PerformInteraction" messagetype="response">
    <param name="choiceID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="false">
      <description>ID of the choice that was selected in response to PerformInteraction.</description>
    </param>
    <param name="manualTextEntry" type="String" minlength="0" maxlength="500" mandatory="false">
      <description>
            Manually entered text selection, e.g. through keyboard
            Can be returned in lieu of choiceID, depending on trigger source
      </description>
    </param>
  </function>
  <function name="CancelInteraction" messagetype="request">
    <param name="cancelID" type="Integer" mandatory="false">
      <description>
        The ID of the specific interaction you want to dismiss. If not set, the most recent of the RPC type set in functionID will be dismissed.
      </description>
    </param>
    <param name="functionID" type="Integer" mandatory="true">
      <description>
        The ID of the type of interaction the developer wants to dismiss. Only values 10, (PerformInteractionID), 12 (AlertID), 25 (ScrollableMessageID), and 26 (SliderID) are permitted.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application requested this RPC.</description>
    </param>
  </function>
  <function name="CancelInteraction" messagetype="response">
  </function>
  <function name="SetMediaClockTimer" messagetype="request">
    <description>Sets the initial media clock value and automatic update method.</description>
    <param name="startTime" type="Common.TimeFormat" mandatory="false">
      <description>SDL transfers startTime together with modes: "COUNTUP", "COUNTDOWN", "PAUSE" to HMI.
      SDL ignores startTime for modes: "RESUME", and "CLEAR"</description>
    </param>
    <param name="endTime" type="Common.TimeFormat" mandatory="false">
      <description>
          See TimeFormat.
          SDL transfers endTime together with modes: "COUNTUP", "COUNTDOWN", "PAUSE" to HMI. To be used to calculate any visual progress bar (if not provided, this feature is ignored).
          SDL ignores endTime for modes: "RESUME", and "CLEAR"
      </description>
    </param>
    <param name="updateMode" type="Common.ClockUpdateMode" mandatory="true">
      <description>The update method of the media clock.</description>
      <description>In case of pause, resume, or clear, the start time value is ignored and shall be left out.  For resume, the time continues with the same value as it was when paused.</description>
    </param>
    <param name="audioStreamingIndicator" type="Common.AudioStreamingIndicator" mandatory="false">
      <description>Indicates that a button press of the Play/Pause button would play, pause or Stop the current playback.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that requested this RPC.</description>
    </param>
  </function>
  <function name="SetMediaClockTimer" messagetype="response">
  </function>
  <function name="SetGlobalProperties" messagetype="request">
    <description>Request from SDL to set some properties for VR help.</description>
    <param name="vrHelpTitle" type="String" maxlength="500" mandatory="false">
      <description>VR Help Title text.</description>
      <description>If omitted on supported displays, the default HU system help title should be used.</description>
    </param>
    <param name="vrHelp" type="Common.VrHelpItem" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>VR Help Items. If omitted on supported displays, the default HU system generated help items should be used.</description>
    </param>
    <param name="menuTitle" maxlength="500" type="String" mandatory="false">
      <description>Optional text to label an app menu button (for certain touchscreen platforms).</description>
    </param>
    <param name="menuIcon" type="Common.Image" mandatory="false">
      <description>Optional icon to draw on an app menu button (for certain touchscreen platforms).</description>
    </param>
    <param name="keyboardProperties" type="Common.KeyboardProperties" mandatory="false">
      <description>On-screen keybaord configuration (if available).</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
    <param name="menuLayout" type="Common.MenuLayout" mandatory="false">
      <description>Sets the layout of the main menu screen. If this is sent while a menu is already on-screen, the head unit will change the display to the new layout type.</description>
    </param>
  </function>
  <function name="SetGlobalProperties" messagetype="response">
  </function>
  <function name="OnCommand" messagetype="notification">
    <description>Notification must be initiated by HMI on user choosing menu item.</description>
    <param name="cmdID" type="Integer" minvalue="0" maxvalue="2000000000" mandatory="true">
      <description>Command ID, which is related to a specific menu entry (previously sent with AddCommand).</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that is related to this RPC.</description>
    </param>
  </function>
  <function name="OnSystemContext" messagetype="notification">
    <description>
      Notification must be initiated by HMI when the user changes the context of application: goes to menu (in-application menu or system menu);
      switches to VR; pop-up appears on screen etc.
    </description>
    <param name="systemContext" type="Common.SystemContext" mandatory="true">
      <description>The context the application is brought into.</description>
    </param>
    <param name="appID" type="Integer" mandatory="false">
      <description>ID of application that is related to this RPC.</description>
    </param>
    <param name="windowID" type="Integer" mandatory="false">
      <description>
        This is the unique ID assigned to the window that this RPC is intended. If this param is not included, it will be assumed that this request is specifically for the main window on the main display. See PredefinedWindows enum.
      </description>
    </param>
  </function>
  <function name="GetCapabilities" messagetype="request">
    <description>Method is invoked at system startup by SDL to request information about UI capabilities of HMI.</description>
  </function>
  <function name="GetCapabilities" messagetype="response">
    <param name="displayCapabilities" type="Common.DisplayCapabilities" mandatory="true">
      <description>Information about the capabilities of the display: its type, text field supported, etc. See DisplayCapabilities. </description>
    </param>
    <param name="audioPassThruCapabilities" type="Common.AudioPassThruCapabilities" mandatory="true">
      <description>
        Describes an audio configuration that the system supports for PerformAudioPassThru.
        Note: please fill out both audioPassThruCapabilities and audioPassThruCapabilitiesList parameters, as:
        - Newer SDL Core uses audioPassThruCapabilitiesList instead of audioPassThruCapabilities, and
        - audioPassThruCapabilities is a mandatory field and cannot be omitted.
      </description>
    </param>
    <param name="audioPassThruCapabilitiesList" type="Common.AudioPassThruCapabilities" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>Describes the audio configurations that the system supports for PerformAudioPassThru.</description>
    </param>
    <param name="hmiZoneCapabilities" type="Common.HmiZoneCapabilities" mandatory="true"/>
    <param name="softButtonCapabilities" type="Common.SoftButtonCapabilities" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>Must be returned if the platform supports on-screen SoftButtons.</description>
    </param>
    <param name="hmiCapabilities" type="Common.HMICapabilities" mandatory="false">
      <description>Specifies the HMI’s capabilities. See HMICapabilities.</description>
    </param>
    <param name="systemCapabilities" type="Common.SystemCapabilities" mandatory="false">
      <description>Specifies system capabilities. See SystemCapabilities</description>
    </param>
  </function>
  <function name="ChangeRegistration" messagetype="request">
    <description>Request from SmartDeviceLink to HMI to change language for app.</description>
    <param name="appName" type="String" maxlength="100" mandatory="false">
      <description>
        Request new app name registration
        Needs to be unique over all applications from the same device.
        May not be empty. May not start with a new line character.
        May not interfere with any name or synonym of any registered applications from the same device.
        Additional applications with the same name from the same device will be rejected.
      </description>
    </param>
    <param name="ngnMediaScreenAppName" type="String" maxlength="100" mandatory="false">
      <description>Request new app short name registration</description>
    </param>
    <param name="language" type="Common.Language" mandatory="true">
      <description>The language application wants to switch to.</description>
    </param>
    <param name="appHMIType" type="Common.AppHMIType" minsize="1" maxsize="100" array="true" mandatory="false">
      <description>
       Sent when app's requested-during-registration AppHMIType is changed to different one due to Policies update. Contains the updated list of all allowed app's AppHMITypes.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
  </function>
  <function name="ChangeRegistration" messagetype="response">
  </function>
  <function name="OnLanguageChange" messagetype="notification">
    <description>Notification from HMI to SmartDeviceLink about change of  language.</description>
    <param name="language" type="Common.Language" mandatory="true">
      <description>Language UI has switched to.</description>
    </param>
  </function>
  <function name="GetSupportedLanguages" messagetype="request">
    <description>Method should be invoked at system startup. Response provides information about UI supported languages.</description>
  </function>
  <function name="GetSupportedLanguages" messagetype="response">
    <param name="languages" type="Common.Language" mandatory="true" array="true" minsize="1" maxsize="100">
      <description>List of languages supported in UI.</description>
    </param>
  </function>
  <function name="GetLanguage" messagetype="request">
    <description>Request from SmartDeviceLink to HMI to get currently active  UI language</description>
  </function>
  <function name="GetLanguage" messagetype="response">
    <param name="language" type="Common.Language" mandatory="true"/>
  </function>
  <function name="OnDriverDistraction" messagetype="notification">
    <description>Notification must be sent from HMI to SDL when driver distraction state is changed. Driver distraction rules are defined by the platform.</description>
    <param name="state" type="Common.DriverDistractionState" mandatory="true">
      <description>See DriverDistractionState. </description>
    </param>
  </function>
  <function name="SetAppIcon" messagetype="request">
    <description>Used to set existing local file on SYNC as the app's icon.</description>
    <param name="syncFileName" type="Common.Image" mandatory="true">
      <description>Either the path to the dynamic image stored on HY or the static binary image itself. See Image</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="SetAppIcon" messagetype="response">
  </function>
  <function name="OnKeyboardInput" messagetype="notification">
    <description>On-screen keyboard event.</description>
    <description>Can be full string or individual keypresses depending on keyboard mode.</description>
    <param name="event" type="Common.KeyboardEvent" mandatory="true">
      <description>On-screen keyboard input data.</description>
    </param>
    <param name="data" type="String" minlength="0" maxlength="500" mandatory="false">
      <description>On-screen keyboard input data.</description>
      <description>For dynamic keypress events, this will be the current compounded string of entry text.</description>
      <description>For entry submission events, this will be the full text entry (this will always return regardless of the mode).</description>
      <description>For entry cancelled and entry aborted events, this data param will be omitted.</description>
    </param>
  </function>
  <function name="OnTouchEvent" messagetype="notification">
    <description>Notifies about touch events on the screen's prescribed area</description>
    <param name="type" type="Common.TouchType" mandatory="true">
      <description>The type of touch event.</description>
    </param>
    <param name="event" type="Common.TouchEvent" mandatory="true" minsize="1" maxsize="10" array="true">
      <description>List of all individual touches involved in this event.</description>
    </param>
  </function>
  <function name="Slider" messagetype="request">
    <description>Creates a full screen or pop-up overlay (depending on platform) with a single user controlled slider.</description>
    <param name="numTicks" type="Integer" minvalue="2" maxvalue="26" mandatory="true">
      <description>Number of selectable items on a horizontal axis</description>
    </param>
    <param name="position" type="Integer" minvalue="1" maxvalue="26" mandatory="true">
      <description>Initial position of slider control (cannot exceed numTicks)</description>
    </param>
    <param name="sliderHeader" type="String" maxlength="500" mandatory="true">
      <description>Text header to be displayed.</description>
    </param>
    <param name="sliderFooter" type="String" maxlength="500"  minsize="1" maxsize="26" array="true" mandatory="false">
      <description>Text footer to be displayed (meant to display min/max threshold descriptors).</description>
      <description>For a static text footer, only one footer string shall be provided in the array.</description>
      <description>For a dynamic text footer, the number of footer text string in the array must match the numTicks value.</description>
      <description>For a dynamic text footer, text array string should correlate with potential slider position index.</description>
      <description>If omitted on supported displays, no footer text shall be displayed.</description>
    </param>
    <param name="timeout" type="Integer" minvalue="1000" maxvalue="65535" mandatory="true">
      <description>Timeout. The slider should be displayed until the defined amount of time has elapsed. </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that concerns this RPC.</description>
    </param>
    <param name="cancelID" type="Integer" mandatory="false">
      <description>
        An ID for this specific alert to allow cancellation through the `CancelInteraction` RPC.
      </description>
    </param>
  </function>
  <function name="Slider" messagetype="response">
    <param name="sliderPosition" type="Integer" minvalue="1" maxvalue="26" mandatory="false">
      <description>Current slider position. Must be returned when the user has clicked the ‘Save’ or ‘Canceled’ button or by the timeout </description>
    </param>
  </function>
  <function name="ScrollableMessage" messagetype="request">
    <description>Creates a full screen overlay containing a large block of formatted text that can be scrolled with up to 8 SoftButtons defined</description>
    <param name="messageText" type="Common.TextFieldStruct" mandatory="true">
      <description>Body of text that can include newlines and tabs. Uses scrollableMessageBody.</description>
    </param>
    <param name="timeout" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
      <description>Timeout in milliseconds. The message should be displayed until the time defined is up.</description>
    </param>
    <param name="softButtons" type="Common.SoftButton" minsize="0" maxsize="8" array="true" mandatory="false">
      <description>App defined SoftButtons.</description>
      <description>If omitted on supported displays, only the system defined "Close" SoftButton should be displayed.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
    <param name="cancelID" type="Integer" mandatory="false">
      <description>
        An ID for this specific alert to allow cancellation through the `CancelInteraction` RPC.
      </description>
    </param>
  </function>
  <function name="ScrollableMessage" messagetype="response">
  </function>
  <function name="PerformAudioPassThru" messagetype="request">
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
    <param name="audioPassThruDisplayTexts" type="Common.TextFieldStruct" mandatory="true" minsize="0" maxsize="2" array="true">
      <description>Uses
            audioPassThruDisplayText1: First line of text displayed during audio capture.
            audioPassThruDisplayText2: Second line of text displayed during audio capture.</description>
    </param>
    <param name="maxDuration" type="Integer" minvalue="3000" maxvalue="1000000" mandatory="true">
      <description>The maximum duration of audio recording in milliseconds. If not provided, the recording should be performed until EndAudioPassThru arrives.</description>
    </param>
    <param name="muteAudio" type="Boolean" mandatory="true">
      <description>
        Defines if the current audio source should be muted during the APT session. If not, the audio source will play without interruption.
        If omitted, the value is set to true.
      </description>
    </param>
  </function>
  <function name="PerformAudioPassThru" messagetype="response">
  </function>
  <function name="EndAudioPassThru" messagetype="request">
    <description>Request is sent by SDL to stop the audio capturing.</description>
  </function>
  <function name="EndAudioPassThru" messagetype="response">
  </function>
  <function name="IsReady" messagetype="request">
    <description>Method is invoked at system startup. Response provides information about presence of UI module and its readiness to cooperate with SDL.</description>
  </function>
  <function name="IsReady" messagetype="response">
    <param name="available" type="Boolean" mandatory="true">
      <description>Must be true if UI is present and ready to communicate with SDL.</description>
    </param>
  </function>
  <function name="ClosePopUp" messagetype="request">
    <description>Initiated by SDL to close currently active pop-up on HMI.</description>
    <param name="methodName" type="String" mandatory="false">
      <description>Method to be closed</description>
    </param>
  </function>
  <function name="ClosePopUp" messagetype="response">
    <description>Provides the result of operation.</description>
  </function>
  <function name="OnResetTimeout" messagetype="notification">
    <description>HMI must provide SDL with notifications specific to the current Turn-By-Turn client status on the module</description>
    <param name="appID" type="Integer" mandatory="true">
      <description>Id of application that invoked notifcation.</description>
    </param>
    <param name="methodName" type="String" mandatory="true">
      <description>Currently used method name on which was triggered action</description>
    </param>
  </function>
  <function name="OnRecordStart" messagetype="notification">
    <description>Issued by SDL to notify HMI about capturing mic data should be started</description>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="SendHapticData" messagetype="request">
    <description>Send the UI spatial data from MOBILE. This data will be utilized by the HMI to determine how and when haptic events should occur</description>
    <param name="appID" type="Integer" mandatory="true">
      <description>Internal ID of the application that requested this RPC.</description>
    </param>
    <param name="hapticRectData" type="Common.HapticRect" minsize="0" maxsize="1000" mandatory="false" array="true">
      <description>
        Array of rectangle data structures that represent the locations of all user controls present on the HMI.
        This data should be updated if/when the application presents a new screen.
        When a request is sent, if successful, it will replace all rectangle data previously sent through RPC.
        Avoidance of doubt, when an empty hapticRectData, it will be clear all rectangle data previously sent through RPC.
      </description>
    </param>
  </function>
  <function name="SendHapticData" messagetype="response">
  </function>
</interface>

<interface name="Navigation" version="1.5.0" date="2017-08-15">

  <function name="IsReady" messagetype="request">
    <description>Method is invoked at system startup. Response must provide the information about presence of UI Navigation module and its readiness to cooperate with SDL.</description>
  </function>
  <function name="IsReady" messagetype="response">
    <param name="available" type="Boolean" mandatory="true">
      <description>Must be true if Navigation is present and ready to communicate with SDL.</description>
    </param>
  </function>
  <function name="SendLocation" messagetype="request">
      <description>That allows the app to send a destination to the embedded nav system.</description>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
    <param name="longitudeDegrees" type="Float" minvalue="-180" maxvalue="180" mandatory="false">
    </param>
    <param name="latitudeDegrees" type="Float" minvalue="-90" maxvalue="90" mandatory="false">
    </param>
    <param name="locationName" type="String" maxlength="500" mandatory="false">
      <description>     Name / title of intended location   </description>
    </param>
    <param name="locationDescription" type="String" maxlength="500" mandatory="false">
      <description>        Description intended location / establishment (if applicable)   </description>
    </param>
    <param name="addressLines" type="String" maxlength="500" minsize="0" maxsize="4" array="true" mandatory="false">
      <description>     Location address (if applicable)   </description>
    </param>
    <param name="phoneNumber" type="String" maxlength="500" mandatory="false">
      <description>     Phone number of intended location / establishment (if applicable)   </description>
    </param>
    <param name="locationImage" type="Common.Image" mandatory="false">
      <description>     Image / icon of intended location (if applicable and supported)   </description>
    </param>
    <param name="timeStamp" type="Common.DateTime" mandatory="false">
        <description>
            timestamp in ISO 8601 format
        </description>
    </param>
    <param name="address" type="Common.OASISAddress" mandatory="false">
        <description>Address to be used for setting destination</description>
    </param>
    <param name="deliveryMode" type="Common.DeliveryMode" mandatory="false">
      <description>Defines the mode of prompt for user</description>
    </param>
  </function>
  <function name="SendLocation" messagetype="response" >
  </function>
  <function name="ShowConstantTBT" messagetype="request">
    <description>Request from SmartDeviceLinkCore to HMI to show info about navigation.</description>
    <param name="navigationTexts" type="Common.TextFieldStruct" mandatory="true" array="true" minsize="0" maxsize="5">
      <description>See TextFieldStruct. Uses:
        navigationText1
        navigationText2
        ETA
        totalDistance
        timeToDestination.
      </description>
    </param>
    <param name="turnIcon" type="Common.Image" mandatory="false">
    </param>
    <param name="nextTurnIcon" type="Common.Image" mandatory="false">
    </param>
    <param name="distanceToManeuver" type="Float" minvalue="0" maxvalue="1000000000" mandatory="true">
      <description>Fraction of distance till next maneuver (from previous maneuver).</description>
      <description>May be used to calculate progress bar.</description>
    </param>
    <param name="distanceToManeuverScale" type="Float" minvalue="0" maxvalue="1000000000" mandatory="true">
      <description>Fraction of distance till next maneuver (starting from when AlertManeuver is triggered).</description>
      <description>May be used to calculate progress bar.</description>
    </param>
    <param name="maneuverComplete" type="Boolean" mandatory="false">
      <description>If and when a maneuver has completed while an AlertManeuver is active, SDL will send this value set to TRUE in order to clear the AlertManeuver overlay.</description>
      <description>If omitted the value should be assumed as FALSE.</description>
    </param>
    <param name="softButtons" type="Common.SoftButton" minsize="0" maxsize="3" array="true" mandatory="false">
      <description>Three dynamic SoftButtons available</description>
      <description>If omitted on supported displays, the currently displayed SoftButton values will not change.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="ShowConstantTBT" messagetype="response">
  </function>
  <function name="AlertManeuver" messagetype="request">
    <description>Request from SmartDeviceLinkCore to HMI to announce navigation maneuver</description>
    <param name="softButtons" type="Common.SoftButton" minsize="0" maxsize="3" array="true" mandatory="false">
      <description>If omitted, only the system defined "Close" SoftButton should be displayed.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of the application requested this RPC.</description>
    </param>
  </function>
  <function name="AlertManeuver" messagetype="response">
  </function>
  <function name="UpdateTurnList" messagetype="request">
    <description>Request from SmartDeviceLinkCore to HMI to update turn list.</description>
    <param name="turnList" type="Common.Turn" minsize="1" maxsize="100" array="true" mandatory="false">
    </param>
    <param name="softButtons" type="Common.SoftButton" minsize="0" maxsize="1" array="true" mandatory="false">
      <description>If omitted, app-defined SoftButton should be left blank.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="UpdateTurnList" messagetype="response">
  </function>
  <function name="OnTBTClientState" messagetype="notification">
    <description>HMI must provide SDL with notifications specific to the current Turn-By-Turn client status on the module</description>
    <param name="state" type="Common.TBTState" mandatory="true">
      <description>Current State of TBT client</description>
    </param>
  </function>
  <function name="SetVideoConfig" messagetype="request">
    <description>Request from SDL to HMI to ask whether HMI accepts a video stream with given configuration.</description>
    <param name="config" type="Common.VideoConfig" mandatory="true">
      <description>Configuration of a video stream.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="SetVideoConfig" messagetype="response">
    <description>
      Response from HMI to SDL whether the configuration is accepted.
      In a negative response, a list of rejected parameters are supplied.
    </description>
    <param name="rejectedParams" type="String" array="true" minsize="1" maxsize="1000" mandatory="false">
      <description>
        List of params of VideoConfig struct which are not accepted by HMI, e.g. "protocol" and "codec".
        This param exists only when the response is negative.
      </description>
    </param>
  </function>
  <function name="StartStream" messagetype="request">
    <description>Request from SmartDeviceLinkCore to HMI to start playing video streaming.</description>
    <param name="url" type="String" minlength="21" maxlength="500" mandatory="true">
      <description>URL that HMI start playing.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="StartStream" messagetype="response">
  </function>
  <function name="StopStream" messagetype="request">
    <description>Request from SmartDeviceLinkCore to HMI to stop playing video streaming.</description>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="StopStream" messagetype="response">
  </function>
  <function name="StartAudioStream" messagetype="request">
    <description>Request from SmartDeviceLinkCore to HMI to start playing audio streaming.</description>
    <param name="url" type="String" minlength="21" maxlength="500" mandatory="true">
      <description>URL that HMI start playing.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="StartAudioStream" messagetype="response">
  </function>
  <function name="StopAudioStream" messagetype="request">
    <description>Request from SmartDeviceLinkCore to HMI to stop playing audio streaming.</description>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="StopAudioStream" messagetype="response">
  </function>
  <function name="OnAudioDataStreaming" messagetype="notification">
    <description>Sender: SDL->HMI. Purpose: notify about raw audio data presence over the URL provided via StartAudioStream SDL's request.</description>
    <param name="available" type="Boolean" mandatory="true">
      <description>If "true" - audio data started. If "false" - audio data stopped.</description>
    </param>
  </function>
  <function name="OnVideoDataStreaming" messagetype="notification">
    <description>Sender: SDL->HMI. Purpose: notify about raw video data presence over the URL provided via StartStream SDL's request.</description>
    <param name="available" type="Boolean" mandatory="true">
      <description>If "true" - video data started. If "false" - video data stopped.</description>
    </param>
  </function>
  <function name="GetWayPoints" functionID="GetWayPointsID" messagetype="request">
    <description>Request for getting waypoint/destination data.</description>
    <param name="wayPointType" type="Common.WayPointType" mandatory="true">
      <description>To request for either the destination only or for all waypoints including destination</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of the application.</description>
    </param>
  </function>
  <function name="GetWayPoints" functionID="GetWayPointsID" messagetype="response">
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of the application.</description>
    </param>
    <param name="wayPoints" type="Common.LocationDetails" mandatory="false" array="true" minsize="1" maxsize="10">
      <description>See LocationDetails</description>
    </param>
  </function>
  <function name="OnWayPointChange" functionID="OnWayPointChangeID" messagetype="notification">
    <description>Notification which provides the entire LocationDetails when there is a change to any waypoints or destination.</description>
    <param name="wayPoints" type="Common.LocationDetails" mandatory="true" array="true" minsize="1" maxsize="10">
      <description>See LocationDetails</description>
    </param>
  </function>

  <function name="SubscribeWayPoints" functionID="SubscribeWayPointsID" messagetype="request">
    <description>To subscribe in getting changes for Waypoints/destinations</description>
  </function>

  <function name="SubscribeWayPoints" functionID="SubscribeWayPointsID" messagetype="response">
  </function>

  <function name="UnsubscribeWayPoints" functionID="UnsubscribeWayPointsID" messagetype="request">
    <description>Request to unsubscribe from WayPoints and Destination</description>
  </function>

  <function name="UnsubscribeWayPoints" functionID="UnsubscribeWayPointsID" messagetype="response">
  </function>

</interface>

<interface name="VehicleInfo" version="2.1.0" date="2019-03-18">
  <function name="IsReady" messagetype="request">
    <description>Method is invoked at system startup. Response should provide information about presence of any of vehicle information modules (ECU, GPS, etc) and their readiness to cooperate with SDL.</description>
  </function>
  <function name="IsReady" messagetype="response">
    <param name="available" type="Boolean" mandatory="true">
      <description>Must be true if vehicle data modules are present and ready to communicate with SDL.</description>
    </param>
  </function>
  <function name="GetVehicleType" messagetype="request">
    <description>Request from SmartDeviceLinkCore to HMI to get info about the vehicle (type, model, etc.).</description>
  </function>
  <function name="GetVehicleType" messagetype="response">
    <param name="vehicleType" type="Common.VehicleType" mandatory="true"/>
  </function>
  <function name="ReadDID" messagetype="request">
    <description>Request from SDL for vehicle data reading.</description>
    <param name="ecuName" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
      <description>Name of ECU.</description>
    </param>
    <param name="didLocation" type="Integer" minvalue="0" maxvalue="65535" minsize="1" maxsize="1000" array="true" mandatory="true">
      <description>Get raw data from vehicle data DID location(s).</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
  </function>
  <function name="ReadDID" messagetype="response">
    <param name="didResult" type="Common.DIDResult" minsize="0" maxsize="1000" array="true" mandatory="false">
      <description>Array of requested DID results (with data if available).</description>
    </param>
  </function>
  <function name="GetDTCs" messagetype="request">
    <description>Vehicle module diagnostic trouble code request.</description>
    <param name="ecuName" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
      <description>Name of ECU.</description>
    </param>
    <param name="dtcMask" type="Integer" minvalue="0" maxvalue="255" mandatory="false">
      <description>DTC Mask Byte to be sent in diagnostic request to module .</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that requested this RPC.</description>
    </param>
  </function>
  <function name="GetDTCs" messagetype="response">
    <param name="ecuHeader" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
      <description>2 byte ECU Header for DTC response (as defined in VHR_Layout_Specification_DTCs.pdf)</description>
    </param>
    <param name="dtc" type="String" mandatory="false" minsize="1" maxsize="15" maxlength="10" array="true">
      <description>
        Array of all reported DTCs on module. Each DTC is represented with 4 bytes:
        3 bytes for data
        1 byte for status
      </description>
    </param>
  </function>
  <function name="DiagnosticMessage" messagetype="request">
    <description>Non periodic vehicle diagnostic request</description>
    <param name="targetID" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
      <description>Name of target ECU.</description>
    </param>
    <param name="messageLength" type="Integer" minvalue="0" maxvalue="65535" mandatory="true">
      <description>Length of message (in bytes).</description>
    </param>
    <param name="messageData" type="Integer" minvalue="0" maxvalue="255" minsize="1" maxsize="65535" array="true" mandatory="true">
      <description>
        Array of bytes comprising CAN message.
      </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that requested this RPC.</description>
    </param>
  </function>
  <function name="DiagnosticMessage" messagetype="response">
    <param name="messageDataResult" type="Integer" minvalue="0" maxvalue="255" minsize="1" maxsize="65535" array="true" mandatory="true">
      <description>
        Array of bytes comprising CAN message result.
      </description>
    </param>
  </function>
  <function name="SubscribeVehicleData" messagetype="request">
    <description>
        Subscribes for specific published data items.
        The data will be only sent if it has changed.
        The application will be notified by the onVehicleData notification whenever new data is available.
        To unsubscribe the notifications, use unsubscribe with the same subscriptionType.
    </description>
    <param name="gps" type="Boolean" mandatory="false">
      <description>See GPSData</description>
    </param>
    <param name="speed" type="Boolean" mandatory="false">
      <description>The vehicle speed in kilometers per hour</description>
    </param>
    <param name="rpm" type="Boolean" mandatory="false">
      <description>The number of revolutions per minute of the engine</description>
    </param>
    <param name="fuelLevel" type="Boolean" mandatory="false">
      <description>The fuel level in the tank (percentage)</description>
    </param>
    <param name="fuelLevel_State" type="Boolean" mandatory="false">
      <description>The fuel level state</description>
    </param>
    <param name="instantFuelConsumption" type="Boolean" mandatory="false">
      <description>The instantaneous fuel consumption in microlitres</description>
    </param>
    <param name="fuelRange" type="Boolean" mandatory="false">
        <description>The estimate range in KM the vehicle can travel based on fuel level and consumption</description>
    </param>
    <param name="externalTemperature" type="Boolean" mandatory="false">
      <description>The external temperature in degrees celsius</description>
    </param>
    <param name="turnSignal" type="Boolean" mandatory="false">
        <description>See TurnSignal</description>
    </param>
    <param name="prndl" type="Boolean" mandatory="false">
      <description>See PRNDL</description>
    </param>
    <param name="tirePressure" type="Boolean" mandatory="false">
      <description>See TireStatus</description>
    </param>
    <param name="odometer" type="Boolean" mandatory="false">
      <description>Odometer in km</description>
    </param>
    <param name="beltStatus" type="Boolean" mandatory="false">
      <description>The status of the seat belts</description>
    </param>
    <param name="bodyInformation" type="Boolean" mandatory="false">
      <description>The body information including power modes</description>
    </param>
    <param name="deviceStatus" type="Boolean" mandatory="false">
      <description>The device status including signal and battery strength</description>
    </param>
    <param name="driverBraking" type="Boolean" mandatory="false">
      <description>The status of the brake pedal</description>
    </param>
    <param name="wiperStatus" type="Boolean" mandatory="false">
      <description>The status of the wipers</description>
    </param>
    <param name="headLampStatus" type="Boolean" mandatory="false">
      <description>Status of the head lamps</description>
    </param>
    <param name="engineTorque" type="Boolean" mandatory="false">
      <description>Torque value for engine (in Nm) on non-diesel variants</description>
    </param>
    <param name="accPedalPosition" type="Boolean" mandatory="false">
      <description>Accelerator pedal position (percentage depressed)</description>
    </param>
    <param name="steeringWheelAngle" type="Boolean" mandatory="false">
      <description>Current angle of the steering wheel (in deg)</description>
    </param>
    <param name="engineOilLife" type="Boolean" mandatory="false">
      <description>The estimated percentage of remaining oil life of the engine.</description>
    </param>
    <param name="electronicParkBrakeStatus" type="Boolean" mandatory="false">
      <description>The status of the park brake as provided by Electric Park Brake (EPB) system.</description>
    </param>
    <param name="cloudAppVehicleID" type="Boolean" mandatory="false">
      <description>Parameter used by cloud apps to identify a head unit</description>
    </param>

        <!-- Ford Specific Data Items -->
    <param name="eCallInfo" type="Boolean" mandatory="false">
      <description>Emergency Call notification and confirmation data</description>
    </param>
    <param name="airbagStatus" type="Boolean" mandatory="false">
      <description>The status of the air bags</description>
    </param>
    <param name="emergencyEvent" type="Boolean" mandatory="false">
      <description>Information related to an emergency event (and if it occurred)</description>
    </param>
    <param name="clusterModeStatus" type="Boolean" mandatory="false">
      <description>The status modes of the cluster</description>
    </param>
    <param name="myKey" type="Boolean" mandatory="false">
      <description>Information related to the MyKey feature</description>
    </param>
        <!-- / Ford Specific Data Items -->

  </function>
  <function name="SubscribeVehicleData" messagetype="response">
    <param name="gps" type="Common.VehicleDataResult" mandatory="false">
      <description>See GPSData</description>
    </param>
    <param name="speed" type="Common.VehicleDataResult" mandatory="false">
      <description>The vehicle speed in kilometers per hour</description>
    </param>
    <param name="rpm" type="Common.VehicleDataResult" mandatory="false">
      <description>The number of revolutions per minute of the engine</description>
    </param>
    <param name="fuelLevel" type="Common.VehicleDataResult" mandatory="false">
      <description>The fuel level in the tank (percentage)</description>
    </param>
    <param name="fuelLevel_State" type="Common.VehicleDataResult" mandatory="false">
      <description>The fuel level state</description>
    </param>
    <param name="instantFuelConsumption" type="Common.VehicleDataResult" mandatory="false">
      <description>The instantaneous fuel consumption in microlitres</description>
    </param>
    <param name="fuelRange" type="Common.VehicleDataResult" mandatory="false">
        <description>The estimate range in KM the vehicle can travel based on fuel level and consumption</description>
    </param>
    <param name="externalTemperature" type="Common.VehicleDataResult" mandatory="false">
      <description>The external temperature in degrees celsius.</description>
    </param>
    <param name="turnSignal" type="Common.VehicleDataResult" mandatory="false">
        <description>See TurnSignal</description>
    </param>
    <param name="prndl" type="Common.VehicleDataResult" mandatory="false">
      <description>See PRNDL</description>
    </param>
    <param name="tirePressure" type="Common.VehicleDataResult" mandatory="false">
      <description>See TireStatus</description>
    </param>
    <param name="odometer" type="Common.VehicleDataResult" mandatory="false">
      <description>Odometer in km</description>
    </param>
    <param name="beltStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the seat belts</description>
    </param>
    <param name="bodyInformation" type="Common.VehicleDataResult" mandatory="false">
      <description>The body information including power modes</description>
    </param>
    <param name="deviceStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The device status including signal and battery strength</description>
    </param>
    <param name="driverBraking" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the brake pedal</description>
    </param>
    <param name="wiperStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the wipers</description>
    </param>
    <param name="headLampStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>Status of the head lamps</description>
    </param>
    <param name="engineTorque" type="Common.VehicleDataResult" mandatory="false">
      <description>Torque value for engine (in Nm) on non-diesel variants</description>
    </param>
    <param name="accPedalPosition" type="Common.VehicleDataResult" mandatory="false">
      <description>Accelerator pedal position (percentage depressed)</description>
    </param>
    <param name="steeringWheelAngle" type="Common.VehicleDataResult" mandatory="false">
      <description>Current angle of the steering wheel (in deg)</description>
    </param>
    <param name="engineOilLife" type="Common.VehicleDataResult" mandatory="false">
      <description>The estimated percentage of remaining oil life of the engine.</description>
    </param>
    <param name="electronicParkBrakeStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the park brake as provided by Electric Park Brake (EPB) system.</description>
    </param>
    <param name="cloudAppVehicleID" type="Common.VehicleDataResult" mandatory="false">
      <description>Parameter used by cloud apps to identify a head unit</description>
    </param>

        <!-- Ford Specific Data Items -->
    <param name="eCallInfo" type="Common.VehicleDataResult" mandatory="false">
      <description>Emergency Call notification and confirmation data</description>
    </param>
    <param name="airbagStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the air bags</description>
    </param>
    <param name="emergencyEvent" type="Common.VehicleDataResult" mandatory="false">
      <description>Information related to an emergency event (and if it occurred)</description>
    </param>
    <param name="clusterModes" type="Common.VehicleDataResult" mandatory="false">
      <description>The status modes of the cluster</description>
    </param>
    <param name="myKey" type="Common.VehicleDataResult" mandatory="false">
      <description>Information related to the MyKey feature</description>
    </param>
        <!-- / Ford Specific Data Items -->

  </function>
  <function name="UnsubscribeVehicleData" messagetype="request">
    <description>
      This function is used to unsubscribe the notifications from the subscribeVehicleData function.
    </description>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application that requested this RPC.</description>
    </param>
    <param name="gps" type="Boolean" mandatory="false">
      <description>See GPSData</description>
    </param>
    <param name="speed" type="Boolean" mandatory="false">
      <description>The vehicle speed in kilometers per hour</description>
    </param>
    <param name="rpm" type="Boolean" mandatory="false">
      <description>The number of revolutions per minute of the engine</description>
    </param>
    <param name="fuelLevel" type="Boolean" mandatory="false">
      <description>The fuel level in the tank (percentage)</description>
    </param>
    <param name="fuelLevel_State" type="Boolean" mandatory="false">
      <description>The fuel level state</description>
    </param>
    <param name="instantFuelConsumption" type="Boolean" mandatory="false">
      <description>The instantaneous fuel consumption in microlitres</description>
    </param>
    <param name="fuelRange" type="Boolean" mandatory="false">
        <description>The estimate range in KM the vehicle can travel based on fuel level and consumption</description>
    </param>
    <param name="externalTemperature" type="Boolean" mandatory="false">
      <description>The external temperature in degrees celsius.</description>
    </param>
    <param name="turnSignal" type="Boolean" mandatory="false">
        <description>See TurnSignal</description>
    </param>
    <param name="prndl" type="Boolean" mandatory="false">
      <description>See PRNDL</description>
    </param>
    <param name="tirePressure" type="Boolean" mandatory="false">
      <description>See TireStatus</description>
    </param>
    <param name="odometer" type="Boolean" mandatory="false">
      <description>Odometer in km</description>
    </param>
    <param name="beltStatus" type="Boolean" mandatory="false">
      <description>The status of the seat belts</description>
    </param>
    <param name="bodyInformation" type="Boolean" mandatory="false">
      <description>The body information including power modes</description>
    </param>
    <param name="deviceStatus" type="Boolean" mandatory="false">
      <description>The device status including signal and battery strength</description>
    </param>
    <param name="driverBraking" type="Boolean" mandatory="false">
      <description>The status of the brake pedal</description>
    </param>
    <param name="wiperStatus" type="Boolean" mandatory="false">
      <description>The status of the wipers</description>
    </param>
    <param name="headLampStatus" type="Boolean" mandatory="false">
      <description>Status of the head lamps</description>
    </param>
    <param name="engineTorque" type="Boolean" mandatory="false">
      <description>Torque value for engine (in Nm) on non-diesel variants</description>
    </param>
    <param name="accPedalPosition" type="Boolean" mandatory="false">
      <description>Accelerator pedal position (percentage depressed)</description>
    </param>
    <param name="steeringWheelAngle" type="Boolean" mandatory="false">
      <description>Current angle of the steering wheel (in deg)</description>
    </param>
    <param name="engineOilLife" type="Boolean" mandatory="false">
      <description>The estimated percentage of remaining oil life of the engine.</description>
    </param>
    <param name="electronicParkBrakeStatus" type="Boolean" mandatory="false">
      <description>The status of the park brake as provided by Electric Park Brake (EPB) system.</description>
    </param>
    <param name="cloudAppVehicleID" type="Boolean" mandatory="false">
      <description>Parameter used by cloud apps to identify a head unit</description>
    </param>

        <!-- Ford Specific Data Items -->
    <param name="eCallInfo" type="Boolean" mandatory="false">
      <description>Emergency Call notification and confirmation data</description>
    </param>
    <param name="airbagStatus" type="Boolean" mandatory="false">
      <description>The status of the air bags</description>
    </param>
    <param name="emergencyEvent" type="Boolean" mandatory="false">
      <description>Information related to an emergency event (and if it occurred)</description>
    </param>
    <param name="clusterModeStatus" type="Boolean" mandatory="false">
      <description>The status modes of the cluster</description>
    </param>
    <param name="myKey" type="Boolean" mandatory="false">
      <description>Information related to the MyKey feature</description>
    </param>
        <!-- / Ford Specific Data Items -->

  </function>
  <function name="UnsubscribeVehicleData" messagetype="response">
    <param name="gps" type="Common.VehicleDataResult" mandatory="false">
      <description>See GPSData</description>
    </param>
    <param name="speed" type="Common.VehicleDataResult" mandatory="false">
      <description>The vehicle speed in kilometers per hour</description>
    </param>
    <param name="rpm" type="Common.VehicleDataResult" mandatory="false">
      <description>The number of revolutions per minute of the engine</description>
    </param>
    <param name="fuelLevel" type="Common.VehicleDataResult" mandatory="false">
      <description>The fuel level in the tank (percentage)</description>
    </param>
    <param name="fuelLevel_State" type="Common.VehicleDataResult" mandatory="false">
      <description>The fuel level state</description>
    </param>
    <param name="instantFuelConsumption" type="Common.VehicleDataResult" mandatory="false">
      <description>The instantaneous fuel consumption in microlitres</description>
    </param>
    <param name="fuelRange" type="Common.VehicleDataResult" mandatory="false">
        <description>The estimate range in KM the vehicle can travel based on fuel level and consumption</description>
    </param>
    <param name="externalTemperature" type="Common.VehicleDataResult" mandatory="false">
      <description>The external temperature in degrees celsius</description>
    </param>
    <param name="turnSignal" type="Common.VehicleDataResult" mandatory="false">
        <description>See TurnSignal</description>
    </param>
    <param name="prndl" type="Common.VehicleDataResult" mandatory="false">
      <description>See PRNDL</description>
    </param>
    <param name="tirePressure" type="Common.VehicleDataResult" mandatory="false">
      <description>See TireStatus</description>
    </param>
    <param name="odometer" type="Common.VehicleDataResult" mandatory="false">
      <description>Odometer in km</description>
    </param>
    <param name="beltStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the seat belts</description>
    </param>
    <param name="bodyInformation" type="Common.VehicleDataResult" mandatory="false">
      <description>The body information including power modes</description>
    </param>
    <param name="deviceStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The device status including signal and battery strength</description>
    </param>
    <param name="driverBraking" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the brake pedal</description>
    </param>
    <param name="wiperStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the wipers</description>
    </param>
    <param name="headLampStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>Status of the head lamps</description>
    </param>
    <param name="engineTorque" type="Common.VehicleDataResult" mandatory="false">
      <description>Torque value for engine (in Nm) on non-diesel variants</description>
    </param>
    <param name="accPedalPosition" type="Common.VehicleDataResult" mandatory="false">
      <description>Accelerator pedal position (percentage depressed)</description>
    </param>
    <param name="steeringWheelAngle" type="Common.VehicleDataResult" mandatory="false">
      <description>Current angle of the steering wheel (in deg)</description>
    </param>
    <param name="engineOilLife" type="Common.VehicleDataResult" mandatory="false">
      <description>The estimated percentage of remaining oil life of the engine.</description>
    </param>
    <param name="electronicParkBrakeStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the park brake as provided by Electric Park Brake (EPB) system.</description>
    </param>
    <param name="cloudAppVehicleID" type="Common.VehicleDataResult" mandatory="false">
      <description>Parameter used by cloud apps to identify a head unit</description>
    </param>

        <!-- Ford Specific Data Items -->
    <param name="eCallInfo" type="Common.VehicleDataResult" mandatory="false">
      <description>Emergency Call notification and confirmation data</description>
    </param>
    <param name="airbagStatus" type="Common.VehicleDataResult" mandatory="false">
      <description>The status of the air bags</description>
    </param>
    <param name="emergencyEvent" type="Common.VehicleDataResult" mandatory="false">
      <description>Information related to an emergency event (and if it occurred)</description>
    </param>
    <param name="clusterModes" type="Common.VehicleDataResult" mandatory="false">
      <description>The status modes of the cluster</description>
    </param>
    <param name="myKey" type="Common.VehicleDataResult" mandatory="false">
      <description>Information related to the MyKey feature</description>
    </param>
        <!-- / Ford Specific Data Items -->

  </function>
  <function name="GetVehicleData" messagetype="request">
    <description>Non periodic vehicle data read request.</description>
    <param name="gps" type="Boolean" mandatory="false">
      <description>See GPSData</description>
    </param>
    <param name="speed" type="Boolean" mandatory="false">
      <description>The vehicle speed in kilometers per hour</description>
    </param>
    <param name="rpm" type="Boolean" mandatory="false">
      <description>The number of revolutions per minute of the engine</description>
    </param>
    <param name="fuelLevel" type="Boolean" mandatory="false">
      <description>The fuel level in the tank (percentage)</description>
    </param>
    <param name="fuelLevel_State" type="Boolean" mandatory="false">
      <description>The fuel level state</description>
    </param>
    <param name="instantFuelConsumption" type="Boolean" mandatory="false">
      <description>The instantaneous fuel consumption in microlitres</description>
    </param>
    <param name="fuelRange" type="Boolean" mandatory="false">
        <description>The estimate range in KM the vehicle can travel based on fuel level and consumption</description>
    </param>
    <param name="externalTemperature" type="Boolean" mandatory="false">
      <description>The external temperature in degrees celsius</description>
    </param>
    <param name="turnSignal" type="Boolean" mandatory="false">
        <description>See TurnSignal</description>
    </param>
    <param name="vin" type="Boolean" mandatory="false">
      <description>Vehicle identification number</description>
    </param>
    <param name="prndl" type="Boolean" mandatory="false">
      <description>See PRNDL</description>
    </param>
    <param name="tirePressure" type="Boolean" mandatory="false">
      <description>See TireStatus</description>
    </param>
    <param name="odometer" type="Boolean" mandatory="false">
      <description>Odometer in km</description>
    </param>
    <param name="beltStatus" type="Boolean" mandatory="false">
      <description>The status of the seat belts</description>
    </param>
    <param name="bodyInformation" type="Boolean" mandatory="false">
      <description>The body information including ignition status and internal temp</description>
    </param>
    <param name="deviceStatus" type="Boolean" mandatory="false">
      <description>The device status including signal and battery strength</description>
    </param>
    <param name="driverBraking" type="Boolean" mandatory="false">
      <description>The status of the brake pedal</description>
    </param>
    <param name="wiperStatus" type="Boolean" mandatory="false">
      <description>The status of the wipers</description>
    </param>
    <param name="headLampStatus" type="Boolean" mandatory="false">
      <description>Status of the head lamps</description>
    </param>
    <param name="engineTorque" type="Boolean" mandatory="false">
      <description>Torque value for engine (in Nm) on non-diesel variants</description>
    </param>
    <param name="accPedalPosition" type="Boolean" mandatory="false">
      <description>Accelerator pedal position (percentage depressed)</description>
    </param>
    <param name="steeringWheelAngle" type="Boolean" mandatory="false">
      <description>Current angle of the steering wheel (in deg)</description>
    </param>
    <param name="engineOilLife" type="Boolean" mandatory="false">
      <description>The estimated percentage of remaining oil life of the engine.</description>
    </param>
    <param name="electronicParkBrakeStatus" type="Boolean" mandatory="false">
      <description>The status of the park brake as provided by Electric Park Brake (EPB) system.</description>
    </param>
    <param name="cloudAppVehicleID" type="Boolean" mandatory="false">
      <description>Parameter used by cloud apps to identify a head unit</description>
    </param>

        <!-- Ford Specific Data Items -->
    <param name="eCallInfo" type="Boolean" mandatory="false">
      <description>Emergency Call notification and confirmation data</description>
    </param>
    <param name="airbagStatus" type="Boolean" mandatory="false">
      <description>The status of the air bags</description>
    </param>
    <param name="emergencyEvent" type="Boolean" mandatory="false">
      <description>Information related to an emergency event (and if it occurred)</description>
    </param>
    <param name="clusterModeStatus" type="Boolean" mandatory="false">
      <description>The status modes of the cluster</description>
    </param>
    <param name="myKey" type="Boolean" mandatory="false">
      <description>Information related to the MyKey feature</description>
    </param>
        <!-- / Ford Specific Data Items -->

  </function>
  <function name="GetVehicleData" messagetype="response">
    <param name="gps" type="Common.GPSData" mandatory="false">
      <description>See GPSData</description>
    </param>
    <param name="speed" type="Float" minvalue="0" maxvalue="700" mandatory="false">
      <description>The vehicle speed in kilometers per hour</description>
    </param>
    <param name="rpm" type="Integer" minvalue="0" maxvalue="20000" mandatory="false">
      <description>The number of revolutions per minute of the engine</description>
    </param>
    <param name="fuelLevel" type="Float" minvalue="-6" maxvalue="106" mandatory="false">
      <description>The fuel level in the tank (percentage)</description>
    </param>
    <param name="fuelLevel_State" type="Common.ComponentVolumeStatus" mandatory="false">
      <description>The fuel level state</description>
    </param>
    <param name="instantFuelConsumption" type="Float" minvalue="0" maxvalue="25575" mandatory="false">
      <description>The instantaneous fuel consumption in microlitres</description>
    </param>
    <param name="fuelRange" type="Common.FuelRange" minsize="0" maxsize="100" array="true" mandatory="false">
        <description>The estimate range in KM the vehicle can travel based on fuel level and consumption</description>
    </param>
    <param name="externalTemperature" type="Float" minvalue="-40" maxvalue="100" mandatory="false">
      <description>The external temperature in degrees celsius</description>
    </param>
    <param name="turnSignal" type="Common.TurnSignal" mandatory="false">
        <description>See TurnSignal</description>
    </param>
    <param name="vin" type="String" maxlength="17" mandatory="false">
      <description>Vehicle identification number</description>
    </param>
    <param name="prndl" type="Common.PRNDL" mandatory="false">
      <description>See PRNDL</description>
    </param>
    <param name="tirePressure" type="Common.TireStatus" mandatory="false">
      <description>See TireStatus</description>
    </param>
    <param name="odometer" type="Integer" minvalue="0" maxvalue="17000000" mandatory="false">
      <description>Odometer in km</description>
    </param>
    <param name="beltStatus" type="Common.BeltStatus" mandatory="false">
      <description>The status of the seat belts</description>
    </param>
    <param name="bodyInformation" type="Common.BodyInformation" mandatory="false">
      <description>The body information including power modes</description>
    </param>
    <param name="deviceStatus" type="Common.DeviceStatus" mandatory="false">
      <description>The device status including signal and battery strength</description>
    </param>
    <param name="driverBraking" type="Common.VehicleDataEventStatus" mandatory="false">
      <description>The status of the brake pedal</description>
    </param>
    <param name="wiperStatus" type="Common.WiperStatus" mandatory="false">
      <description>The status of the wipers</description>
    </param>
    <param name="headLampStatus" type="Common.HeadLampStatus" mandatory="false">
      <description>Status of the head lamps</description>
    </param>
    <param name="engineTorque" type="Float" minvalue="-1000" maxvalue="2000" mandatory="false">
      <description>Torque value for engine (in Nm) on non-diesel variants</description>
    </param>
    <param name="accPedalPosition" type="Float" minvalue="0" maxvalue="100" mandatory="false">
      <description>Accelerator pedal position (percentage depressed)</description>
    </param>
    <param name="steeringWheelAngle" type="Float" minvalue="-2000" maxvalue="2000" mandatory="false">
      <description>Current angle of the steering wheel (in deg)</description>
    </param>
    <param name="engineOilLife" type="Float" minvalue="0" maxvalue="100" mandatory="false">
      <description>The estimated percentage of remaining oil life of the engine.</description>
    </param>
    <param name="electronicParkBrakeStatus" type="Common.ElectronicParkBrakeStatus" mandatory="false">
      <description>The status of the park brake as provided by Electric Park Brake (EPB) system.</description>
    </param>
    <param name="cloudAppVehicleID" type="String" mandatory="false">
      <description>Parameter used by cloud apps to identify a head unit</description>
    </param>

        <!-- Ford Specific Data Items -->
    <param name="eCallInfo" type="Common.ECallInfo" mandatory="false">
      <description>Emergency Call notification and confirmation data</description>
    </param>
    <param name="airbagStatus" type="Common.AirbagStatus" mandatory="false">
      <description>The status of the air bags</description>
    </param>
    <param name="emergencyEvent" type="Common.EmergencyEvent" mandatory="false">
      <description>Information related to an emergency event (and if it occurred)</description>
    </param>
    <param name="clusterModeStatus" type="Common.ClusterModeStatus" mandatory="false">
      <description>The status modes of the cluster</description>
    </param>
    <param name="myKey" type="Common.MyKey" mandatory="false">
      <description>Information related to the MyKey feature</description>
    </param>
        <!-- / Ford Specific Data Items -->

  </function>
  <function name="OnVehicleData" messagetype="notification">
    <description>Callback for the periodic and non periodic vehicle data read function.</description>
    <param name="gps" type="Common.GPSData" mandatory="false">
      <description>See GPSData</description>
    </param>
    <param name="speed" type="Float" minvalue="0" maxvalue="700" mandatory="false">
      <description>The vehicle speed in kilometers per hour</description>
    </param>
    <param name="rpm" type="Integer" minvalue="0" maxvalue="20000" mandatory="false">
      <description>The number of revolutions per minute of the engine</description>
    </param>
    <param name="fuelLevel" type="Float" minvalue="-6" maxvalue="106" mandatory="false">
      <description>The fuel level in the tank (percentage)</description>
    </param>
    <param name="fuelLevel_State" type="Common.ComponentVolumeStatus" mandatory="false">
      <description>The fuel level state</description>
    </param>
    <param name="instantFuelConsumption" type="Float" minvalue="0" maxvalue="25575" mandatory="false">
      <description>The instantaneous fuel consumption in microlitres</description>
    </param>
    <param name="fuelRange" type="Common.FuelRange" minsize="0" maxsize="100" array="true" mandatory="false">
      <description>The estimate range in KM the vehicle can travel based on fuel level and consumption</description>
    </param>
    <param name="externalTemperature" type="Float" minvalue="-40" maxvalue="100" mandatory="false">
      <description>The external temperature in degrees celsius</description>
    </param>
    <param name="turnSignal" type="Common.TurnSignal" mandatory="false">
        <description>See TurnSignal</description>
    </param>
    <param name="vin" type="String" maxlength="17" mandatory="false">
      <description>Vehicle identification number.</description>
    </param>
    <param name="prndl" type="Common.PRNDL" mandatory="false">
      <description>See PRNDL</description>
    </param>
    <param name="tirePressure" type="Common.TireStatus" mandatory="false">
      <description>See TireStatus</description>
    </param>
    <param name="odometer" type="Integer" minvalue="0" maxvalue="17000000" mandatory="false">
      <description>Odometer in km</description>
    </param>
    <param name="beltStatus" type="Common.BeltStatus" mandatory="false">
      <description>The status of the seat belts</description>
    </param>
    <param name="electronicParkBrakeStatus" type="Common.ElectronicParkBrakeStatus" mandatory="false">
      <description>The status of the park brake as provided by Electric Park Brake (EPB) system.</description>
    </param>
    <param name="bodyInformation" type="Common.BodyInformation" mandatory="false">
      <description>The body information including power modes</description>
    </param>
    <param name="deviceStatus" type="Common.DeviceStatus" mandatory="false">
      <description>The device status including signal and battery strength</description>
    </param>
    <param name="driverBraking" type="Common.VehicleDataEventStatus" mandatory="false">
      <description>The status of the brake pedal</description>
    </param>
    <param name="wiperStatus" type="Common.WiperStatus" mandatory="false">
      <description>The status of the wipers</description>
    </param>
    <param name="headLampStatus" type="Common.HeadLampStatus" mandatory="false">
      <description>Status of the head lamps</description>
    </param>
    <param name="engineTorque" type="Float" minvalue="-1000" maxvalue="2000" mandatory="false">
      <description>Torque value for engine (in Nm) on non-diesel variants</description>
    </param>
    <param name="accPedalPosition" type="Float" minvalue="0" maxvalue="100" mandatory="false">
      <description>Accelerator pedal position (percentage depressed)</description>
    </param>
    <param name="steeringWheelAngle" type="Float" minvalue="-2000" maxvalue="2000" mandatory="false">
      <description>Current angle of the steering wheel (in deg)</description>
    </param>
    <param name="cloudAppVehicleID" type="String" mandatory="false">
      <description>Parameter used by cloud apps to identify a head unit</description>
    </param>
    <param name="engineOilLife" type="Float" minvalue="0" maxvalue="100" mandatory="false">
      <description>The estimated percentage of remaining oil life of the engine.</description>
    </param>

        <!-- Ford Specific Data Items -->
    <param name="eCallInfo" type="Common.ECallInfo" mandatory="false">
      <description>Emergency Call notification and confirmation data</description>
    </param>
    <param name="airbagStatus" type="Common.AirbagStatus" mandatory="false">
      <description>The status of the air bags</description>
    </param>
    <param name="emergencyEvent" type="Common.EmergencyEvent" mandatory="false">
      <description>Information related to an emergency event (and if it occurred)</description>
    </param>
    <param name="clusterModeStatus" type="Common.ClusterModeStatus" mandatory="false">
      <description>The status modes of the cluster</description>
    </param>
    <param name="myKey" type="Common.MyKey" mandatory="false">
      <description>Information related to the MyKey feature</description>
    </param>
        <!-- / Ford Specific Data Items -->

  </function>
</interface>

 <!-- Policies -->
<interface name="SDL" version="1.2.0" date="2018-09-05">
<function name="ActivateApp" messagetype="request">
    <param name="appID" type="Integer" mandatory="true">
    </param>
  </function>
  <function name="ActivateApp" messagetype="response">
    <param name="isSDLAllowed" type="Boolean" mandatory="true" scope="internal"/>
    <param name="device" type="Common.DeviceInfo" mandatory="false" scope="internal">
      <description>If isSDLAllowed is false, consent for sending PT through specified device is required.</description>
    </param>
    <param name="isPermissionsConsentNeeded" type="Boolean" mandatory="true"/>
    <param name="isAppPermissionsRevoked" type="Boolean" mandatory="true"/>
    <param name="appRevokedPermissions" type="Common.PermissionItem" array="true" minsize="1" maxsize="100" mandatory="false">
        <description>If app permissions were reduced (isAppPermissionsRevoked == true), then this array specifies list of removed permissions. </description>
      </param>
    <param name="isAppRevoked" type="Boolean" mandatory="true"/>
    <param name="priority" type="Common.AppPriority" mandatory="false">
        <description>Send to HMI so that it can coordinate order of requests/notifications correspondingly.</description>
      </param>
  </function>

  <function name="GetUserFriendlyMessage" messagetype="request" scope="internal">
      <description>Request from HMI to SDL to get user friendly messages for UI/TTS info boxes/texts (i.e. for help/dialogs etc) from Policy Table.</description>
      <param name="messageCodes" type="String" array="true" minsize="1" maxsize="100" maxlength="500" mandatory="true">
        <description>Id of message to be received according to Policy Table i.e. StatusNeeded, Notifications, DrivingCharacteristics etc.</description>
      </param>
      <param name="language" type="Common.Language" mandatory="false">
        <description>Optional parameter if HMI wants message in some other language then its current one already known to SDL.</description>
      </param>
    </function>
    <function name="GetUserFriendlyMessage" messagetype="response">
      <param name="messages" type="Common.UserFriendlyMessage" array="true" minsize="1" maxsize="100" mandatory="false">
        <description>If no message was found in PT for specified message code and for HMI current or specified language, this parameter will be omitted.</description>
      </param>
    </function>

    <function name="OnAllowSDLFunctionality" messagetype="notification">
     <description>Initiated by HMI. Notifies about user/HMI allowing SDL functionality or disallowing access to all mobile apps. Needed if HMI has additional ways of asking user about this (i.e. Settings etc)</description>
     <param name="device" type="Common.DeviceInfo" mandatory="false">
        <description>If no device is specified permission counts for SDL functionality in general.</description>
      </param>
      <param name="allowed" type="Boolean" mandatory="true">
        <description>Must be true if allowed</description>
      </param>
      <param name="source" type="Common.ConsentSource" mandatory="true"/>
    </function>

    <!-- SyncP RPC-->
    <function name="OnReceivedPolicyUpdate" messagetype="notification">
      <description>
        From: SYNCP Manager
        To: SDL
        Notification sent to SDL when SYNCP Manager receives and decrypts updated policy table
      </description>
      <param name="policyfile" type="String" minlength="1" maxlength="255" mandatory="true">
        <description>Location of decrypted policy table Json file on target</description>
      </param>
    </function>

    <function name="OnPolicyUpdate" messagetype="notification">
      <description>
        From: SYNCP Manager
        To: SDL
        Notifies SDL to supply a new "PolicyUpdate" request with more recent snapshot data
      </description>
    </function>
    <!-- End of SyncP RPC-->

    <function name="GetListOfPermissions"  messagetype="request">
      <description>Request from HMI to SDL to get list of permissions for app. If no app specified - list of permissions for all apps.</description>
      <param name="appID" type="Integer" mandatory="false"/>
    </function>
    <function name="GetListOfPermissions" messagetype="response">
      <param name="allowedFunctions" type="Common.PermissionItem" mandatory="true" array="true" minsize="0" maxsize="100">
        <description>If no permissions were specified for application the array will come empty.</description>
      </param>
      <param name="externalConsentStatus" type="Common.ExternalConsentStatus" mandatory="true" array="true" minsize="0" maxsize="100">
        <description>External User Consent Settings (defined by entityType and entityID) status: enabled/disabled. If empty array is returned, SDL does not have any stored status.</description>
      </param>
    </function>

    <function name="OnAppPermissionConsent" messagetype="notification">
      <description>Initiated by HMI for specifying the allowance for the application to perform some functionality. Duplicates functionality of the request, needed if HMI has specific ways to allow/disallow functionality (i.e.Setting Menu)</description>
      <param name="appID" type="Integer" mandatory="false">
        <description>Information about the application. See HMIApplication. If omitted - allow/disallow all applications </description>
      </param>
      <param name="consentedFunctions" type="Common.PermissionItem" mandatory="false" array="true" minsize="1" maxsize="100"/>
      <param name="externalConsentStatus" type="Common.ExternalConsentStatus" mandatory="false" array="true" minsize="1" maxsize="100"/>
      <param name="source" type="Common.ConsentSource" mandatory="true"/>
     </function>

    <function name="OnAppPermissionChanged" messagetype="notification">
      <description>Notification from SDL to HMI. Occurs when app permissions were reduced. If no permission specified means that app was dissallowed and has to be unregitstered.</description>
      <param name="appID" type="Integer" mandatory="true"/>
      <param name="isAppPermissionsRevoked" type="Boolean" mandatory="false"/>
      <param name="appRevokedPermissions" type="Common.PermissionItem" array="true" minsize="1" maxsize="100" mandatory="false">
        <description>If app permissions were reduced (isAppPermissionsRevoked == true), then this array specifies list of removed permissions. </description>
      </param>
      <param name="appRevoked" type="Boolean" mandatory="false">
        <description>If present then specified application was prohibited to used with Sync.</description>
      </param>
      <param name="appPermissionsConsentNeeded" type="Boolean" mandatory="false">
        <description>If present specifies that permissions were added to application that require User Consent, then HMI can send GetListOfPermissions request to obtain list of permissions.</description>
      </param>
      <param name="appUnauthorized" type="Boolean" mandatory="false">
        <description>When present and set to true (should be if present) then this means that application was not authorized (nickname check failed.)</description>
      </param>
      <param name="priority" type="Common.AppPriority" mandatory="false">
        <description>Send to HMI so that it can coordinate order of requests/notifications correspondingly.</description>
      </param>
      <param name="requestType" type="Common.RequestType" minsize="0" maxsize="100" array="true" mandatory="false">
        <description>The list of SystemRequest's RequestTypes allowed by policies for the named application (the app's SystemRequest sent with RequestType           out of this list will get 'disallowed' response from SDL).
        If SDL sends an empty array - any RequestType is allowed for this app.
        If SDL omits this parameter - nothing is changed for RequestType in the policies
      </description>
      </param>
      <param name="requestSubType" type="String" maxlength="100" minsize="0" maxsize="100" array="true" mandatory="false">
          <description>
              The list of SystemRequest's requestSubTypes allowed by policies for the named application.
              If the app sends a requestSubType which is not specified in this list, then that request should be rejected.
              An empty array signifies that any value of requestSubType is allowed for this app.
              If this parameter is omitted, then a request with any value of requestSubType is now allowed for this app
          </description>
      </param>
    </function>

  <function name="OnSDLConsentNeeded" messagetype="notification">
    <description>Send from SDL to HMI to notify that data consent is needed for device either because PT update or Retry strategy.</description>
    <param name="device" type="Common.DeviceInfo" mandatory="true"/>
  </function>

  <function name="UpdateSDL" messagetype="request">
      <description>Request from HMI to SDL to start update of Policy Table.</description>
    </function>
    <function name="UpdateSDL" messagetype="response">
      <description>Specify result: no update needed, update was successful/unsuccessful etc</description>
      <param name="result" type="Common.UpdateResult" mandatory="true"/>
    </function>

    <function name="GetStatusUpdate" messagetype="request">
      <description>Request from HMI to SDL to find out current status of PT exchange process.</description>
    </function>
    <function name="GetStatusUpdate" messagetype="response">
      <param name="status" type="Common.UpdateResult" mandatory="true"/>
    </function>
    <function name="OnStatusUpdate" messagetype="notification">
      <description>Notification from SDL to HMI when current status of PT exchange changed (i.e. it Succeded or Failed etc)</description>
      <param name="status" type="Common.UpdateResult" mandatory="true" />
    </function>

    <function name="OnSystemError" messagetype="notification">
      <param name="error" type="Common.SystemError" mandatory="true"/>
    </function>

    <function name="AddStatisticsInfo" messagetype="notification">
      <description>Sent by system to record statiscs and error counts. Increases statistics specified by statisticType by one.</description>
      <param name="statisticType" type="Common.StatisticsType" mandatory="true"/>
    </function>

    <function name="OnDeviceStateChanged" messagetype="notification" scope="internal">
      <param name="deviceState" type="Common.DeviceState" mandatory="true" />
      <param name="deviceInternalId" type="String" mandatory="true" minlength="0" maxlength="500" />
      <param name="deviceId" type="Common.DeviceInfo" mandatory="false"/>
    </function>

    <function name="GetPolicyConfigurationData" messagetype="request" scope="internal">
      <description>Request from HMI to SDL core to get policy configuration data (i.e. OEM Network Mapping table file version etc.) from Policy Table.</description>
      <param name="policyType" type="String" minlength="1" maxlength="1000" mandatory="true">
        <description>Name of the Struct where configuration data is located in Policy Table, i.e. module_config etc.</description>
      </param>
      <param name="property" type="String" minlength="1" maxlength="1000" mandatory="true">
        <description>Name of the property located within the policyType Struct, i.e. vehicle_year etc.</description>
      </param>
    </function>
    <function name="GetPolicyConfigurationData" messagetype="response">
      <param name="value" type="String" array="true" maxlength="1000" minsize="1" maxsize="100" mandatory="false">
        <description>Value of requested property from policyType in PT. If no value is found in PT for specified policyType and property, this parameter will be omitted.</description>
      </param>
    </function>
</interface>

<interface name="RC" version="2.0.0" date="2018-09-05">
  <function name="IsReady" messagetype="request">
    <description>Method is invoked at system startup. Response should provide information about presence of any of remote controllable module and its readiness to cooperate with SDL.</description>
  </function>
  <function name="IsReady" messagetype="response">
    <param name="available" type="Boolean" mandatory="true">
      <description>Must be true if vehicle RC modules are present and ready to communicate with SDL.</description>
    </param>
  </function>

  <function name="GetCapabilities" messagetype="request">
    <description>Method is invoked at system startup by SDL to request information about Remote Control capabilities of HMI.</description>
  </function>
  <function name="GetCapabilities" messagetype="response">
    <param name="remoteControlCapability" type="Common.RemoteControlCapabilities" mandatory="false">
      <description>See RemoteControlCapabilities, all available RC modules and buttons shall be returned.</description>
    </param>
    <param name="seatLocationCapability" type="Common.SeatLocationCapability" mandatory="false">
      <description>See SeatLocationCapability, all available seat locations shall be returned.</description>
    </param>
  </function>
  
<function name="SetGlobalProperties" messagetype="request">
    <description>Sets some properties for the application initiated request.</description>
    <param name="userLocation" type="Common.SeatLocation" mandatory="false">
      <description>Location of the user's seat. Default is driver's seat location if it is not set yet.</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of application related to this RPC.</description>
    </param>
</function>

<function name="SetGlobalProperties" messagetype="response">
</function>

 <function name="SetInteriorVehicleData" functionID="SetInteriorVehicleDataID" messagetype="request">
    <param name="moduleData" type="Common.ModuleData" mandatory="true" >
      <description>The module type and data to set</description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>Internal SDL-assigned ID of the related application</description>
    </param>
  </function>

  <function name="SetInteriorVehicleData" messagetype="response">
    <description>Used to set the values of one zone and one data type within that zone</description>
    <param name="moduleData" type="Common.ModuleData" mandatory="true" >
    </param>
  </function>

<function name="GetInteriorVehicleData" messagetype="request">
  <param name="moduleType" type="Common.ModuleType" mandatory="true" >
    <description>The module data to retrieve from the vehicle for that type</description>
  </param>
  <param name="moduleId" type="String" maxlength="100" mandatory="false">
      <description>Id of a module, published by System Capability. </description>
  </param>
  <param name="subscribe" type="Boolean" mandatory="false">
    <description>If subscribe is true, the head unit will send OnInteriorVehicleData notifications for the requested module (moduleId and moduleType)</description>
  </param>
</function>

<function name="GetInteriorVehicleData" messagetype="response">
  <param name="moduleData" type="Common.ModuleData" mandatory="true" >
  </param>
  <param name="isSubscribed" type="Boolean" mandatory="false" >
    <description>Is a conditional-mandatory parameter: must be returned in case "subscribe" parameter was present in the related request.
    if "true" - the "moduleType" from request is successfully subscribed and  the head unit will send OnInteriorVehicleData notifications for the moduleDescription.
    if "false" - the "moduleType" from request is either unsubscribed or failed to subscribe.</description>
  </param>
</function>

<function name="GetInteriorVehicleDataConsent" messagetype="request">
    <description>HMI is expected to display a permission prompt to the driver showing the RC module and app details (for example, app's name).
    The driver is expected to have an ability to grant or deny the permission.</description>
    <param name="moduleType" type="Common.ModuleType" mandatory="true">
      <description>The module type that the app requests to control.</description>
    </param>
    <param name="moduleIds" type="String" maxlength="100" array="true" mandatory="false">
        <description>Ids of a module, published by System Capability. </description>
    </param>
    <param name="appID" type="Integer" mandatory="true">
      <description>ID of the application that triggers the permission prompt.</description>
    </param>
  </function>
  <function name="GetInteriorVehicleDataConsent" messagetype="response">
    <param name="allowed" type="Boolean" array="true" mandatory="true">
      <description>This array has the same size as "moduleIds" in the request; each element corresponding to one moduleId 
      "true" - if the driver grants the permission for controlling the named app;
      "false" - in case the driver denies the permission for controlling the named app.</description>
    </param>
</function>

<function name="OnInteriorVehicleData" messagetype="notification">
  <param name="moduleData" type="Common.ModuleData" mandatory="true" >
  </param>
</function>

<function name="OnRemoteControlSettings" messagetype="notification">
  <description>Sender: vehicle -> RSDL. Notification about remote-control settings changed. Sent after User`s choice through HMI.</description>
  <param name="allowed" type="Boolean" mandatory="false" >
    <description>If "true" - RC is allowed; if "false" - RC is disallowed.</description>
  </param>
  <param name="accessMode" type="Common.RCAccessMode" mandatory="false" >
    <description>The remote control access mode specified by the driver via HMI.</description>
  </param>
</function>

<function name="OnRCStatus" messagetype="notification">
  <description>Issued by SDL to notify HMI about remote control status change on SDL</description>
  <param name="appID" type="Integer" mandatory="true">
    <description>ID of selected application.</description>
  </param>
  <param name="allocatedModules" type="Common.ModuleData" minsize="0" maxsize="100" array="true" mandatory="true">
    <description>Contains a list (zero or more) of module types that are allocated to the application.</description>
  </param>
  <param name="freeModules" type="Common.ModuleData" minsize="0" maxsize="100" array="true" mandatory="true">
    <description>Contains a list (zero or more) of module types that are free to access for the application.</description>
  </param>
</function>

</interface>

<interface name="AppService" version="1.0.0" date="2019-03-18">
    <description>Interface used for interacting with app services as a producer or consumer</description>
    <function name="PublishAppService" messagetype="request">
        <description>
          Registers a service offered by this app on the module.
          Subsequent calls with the same service type will update the manifest for that service.
        </description>

        <param name="appServiceManifest" type="Common.AppServiceManifest" mandatory="true">
            <description> The manifest of the service that wishes to be published.</description>
        </param>
    </function>

    <function name="PublishAppService" messagetype="response">
        <description>Response to the request to register a service offered by this app on the module</description>

        <param name="appServiceRecord" type="Common.AppServiceRecord" mandatory="false">
            <description> If the request was successful, this object will be the current status of the service record for the published service. This will include the Core supplied service ID.</description>
        </param>
    </function>

    <function name="UnpublishAppService" messagetype="request">
        <description>Unpublish an existing service published by the HMI.</description>

        <param name="serviceID" type="String" mandatory="true">
            <description> The ID of the service to be unpublished. </description>
        </param>
    </function>

    <function name="UnpublishAppService" messagetype="response">
        <description>The response to UnpublishAppService</description>
    </function>

    <function name="OnAppServiceData" messagetype="notification">
        <description>This notification includes the data that is updated from the specific service. HMI->SDL if the HMI is a producer, SDL->HMI if the HMI is a consumer</description>

        <param name="serviceData" type="Common.AppServiceData" mandatory="true"/>
    </function>

    <function name="GetAppServiceData" messagetype="request">
        <description> This request asks the module for current data related to the specific service. It also includes an option to subscribe to that service for future updates</description>

        <param name="serviceType" type="String" mandatory="true">
            <description>The type of service that is to be offered by this app. See AppServiceType for known enum equivalent types. Parameter is a string to allow for new service types to be used by apps on older versions of SDL Core.</description>
        </param>

        <param name="subscribe" type="Boolean" mandatory="false">
            <description> If true, the consumer is requesting to subscribe to all future updates from the service publisher. If false, the consumer doesn't wish to subscribe and should be unsubscribed if it was previously subscribed.</description>
        </param>
    </function>

    <function name="GetAppServiceData" messagetype="response">
        <description> This response includes the data that was requested from the specific service</description>
        <param name="serviceData" type="Common.AppServiceData" mandatory="false"/>
    </function>

    <function name="PerformAppServiceInteraction" messagetype="request">
        <param name="serviceUri" type="String"  mandatory="true">
            <description>Fully qualified URI based on a predetermined scheme provided by the app service. SDL makes no guarantee that this URI is correct.</description>
        </param>

        <param name="serviceID" type="String" mandatory="true">
            <description>The service ID that the app consumer wishes to send this URI.</description>
        </param>

        <param name="originApp" type="String" mandatory="false">
            <description>This string is the appID of the app requesting the app service provider take the specific action. This will automatically be set by SDL Core in requests originating from the HMI</description>
        </param>

        <param name="requestServiceActive" type="Boolean" mandatory="false">
            <description>This flag signals the requesting consumer would like this service to become the active primary service of the destination's type.</description>
        </param>
    </function>

    <function name="PerformAppServiceInteraction" messagetype="response">
        <param name="serviceSpecificResult" type="String" mandatory="false">
            <description>The service can provide specific result strings to the consumer through this param.</description>
        </param>
    </function>

    <function name="GetAppServiceRecords" messagetype="request">
        <param name="serviceType" type="String" mandatory="false">
            <description>If included, only service records of supplied type will be returned in response. If not included, all service records for all types will be returned. See Common.AppServiceType.</description>
        </param>
    </function>

    <function name="GetAppServiceRecords" messagetype="response">
        <param name="serviceRecords" type="Common.AppServiceRecord" array="true" mandatory="false">
            <description>All app service records of requested type.</description>
        </param>
    </function>

    <function name="AppServiceActivation" messagetype="request">
        <param name="serviceID" type="String" mandatory="true">
            <description>The ID of the service that should have an activation event take place on</description>
        </param>
        <param name="activate" type="Boolean" mandatory="true">
            <description>True if the service is to be activated. False if the app is to be deactivated</description>
        </param>
        <param name="setAsDefault" type="Boolean" mandatory="false">
            <description>True if the service is to be the default service of this type. False if the app is not to be the default</description>
        </param>
    </function>

    <function name="AppServiceActivation" messagetype="response">
        <param name="serviceID" type="String" mandatory="true">
            <description>The ID of the service that was requested to have an activation event take place</description>
        </param>
        <param name="activate" type="Boolean" mandatory="true">
            <description>True if the service was activated. False if the app was deactivated or unable to be activated</description>
        </param>
        <param name="setAsDefault" type="Boolean" mandatory="false">
            <description>True if the service was set to the default service of this type. False if the app was not to be the default</description>
        </param>
    </function>

    <function name="GetActiveServiceConsent" messagetype="request">
        <description>
            SDL->HMI. HMI is expected to prompt the user for permission for the app service to take over as the active service.
        </description>
        <param name="serviceID" type="String" mandatory="true">
            <description>The ID of the service to be activated</description>
        </param>
    </function>

    <function name="GetActiveServiceConsent" messagetype="response">
        <param name="activate" type="Boolean" mandatory="true">
            <description>
                "true" - If the driver grants permission for the app service to take over as the active service.
                "false" - If the driver denies permission for the app service to take over as the active service.
            </description>
        </param>
    </function>
</interface>
</interfaces>
