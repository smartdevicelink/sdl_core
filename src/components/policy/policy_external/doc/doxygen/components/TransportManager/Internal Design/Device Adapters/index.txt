/** @page components_transportmanager_internal_design_transport_adapters Device Adapters
  *
  * TransportManager communicates with actual devices via device adapters.
  *
  * @section components_transportmanager_internal_design_transport_adapters_common Common logic
  *
  * Logic common to all device adapters is implemented in class ns_smart_device_link::ns_transport_manager::CTransportAdapter.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_devices_map Devices map
  *
  * Devices map is a map of device handle to internal device structure ns_smart_device_link::ns_transport_manager::CTransportAdapter::SDevice.
  * Devices map is stored in ns_smart_device_link::ns_transport_manager::CTransportAdapter::mDevices. Any access to this map must be performed
  * with ns_smart_device_link::ns_transport_manager::CTransportAdapter::mDevicesMutex locked.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_connections_map Connections map
  *
  * Connections map is a map of connection handle to internal connection structure ns_smart_device_link::ns_transport_manager::CTransportAdapter::SConnection.
  * Connections map is stored in ns_smart_device_link::ns_transport_manager::CTransportAdapter::mConnections. Any access to this map must be performed
  * with ns_smart_device_link::ns_transport_manager::CTransportAdapter::mConnectionsMutex locked.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_main_thread Device adapter main thread
  *
  * Device adapter main thread is started in ns_smart_device_link::ns_transport_manager::CTransportAdapter::run().
  * Specific device adapter must implement virtual function ns_smart_device_link::ns_transport_manager::CTransportAdapter::mainThread()
  * and implement its specific main thread logic there.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_connection_thread Device adapter connection thread
  *
  * Device adapter connection thread is started in ns_smart_device_link::ns_transport_manager::CTransportAdapter::startConnection().
  * Specific device adapter must implement virtual function ns_smart_device_link::ns_transport_manager::CTransportAdapter::connectionThread()
  * and implement its specific connection thread logic there. When connection is established and socket file descriptor is set
  * in ns_smart_device_link::ns_transport_manager::CTransportAdapter::SConnection::mConnectionSocket specific device adapter may call
  * ns_smart_device_link::ns_transport_manager::CTransportAdapter::handleCommunication() to handle all communication through this socket
  * until connection is terminated.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_threads_termination Termination of device adapter threads
  *
  * Specific device adapter implementation must call in its destructor ns_smart_device_link::ns_transport_manager::CTransportAdapter::waitForThreadsTermination()
  * to wait for termination of all threads (main thread and connection threads). Device adapter threads must be terminated before specific
  * device adapter class is destructed, so it can't be called in the destructor of base class and must be called explicitly from the inherited
  * class's destructor.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_device_scan Requesting scan for new devices
  *
  * Device scan is requested by setting flag ns_smart_device_link::ns_transport_manager::CTransportAdapter::mDeviceScanRequested
  * and signaling conditional variable ns_smart_device_link::ns_transport_manager::CTransportAdapter::mDeviceScanRequestedCond, which may be monitored
  * by specific device adapter if it supports device scanning. Specific device adaptere may call for this purpose
  * ns_smart_device_link::ns_transport_manager::CTransportAdapter::waitForDeviceScanRequest() which will wait on this conditional variable
  * until it's signaled or specified timeout expires.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_connecting_devices Connecting devices
  *
  * Device connection is initiated with a call to ns_smart_device_link::ns_transport_manager::CTransportAdapter::connectDevice().
  * This method calls virtual function ns_smart_device_link::ns_transport_manager::CTransportAdapter::createConnectionsListForDevice()
  * which may be implemented by specific device adapter to create a list of connections that must be established for the device.
  * For each connection created by device adapter it calls ns_smart_device_link::ns_transport_manager::CTransportAdapter::startConnection()
  * which adds connection to connections map and starts connection thread.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_disconnecting_devices Disconnecting devices
  *
  * Device disconnection is initiated with a call to ns_smart_device_link::ns_transport_manager::CTransportAdapter::disconnectDevice().
  * This method finds all connections in connections map that corresponds to specified device and calls
  * ns_smart_device_link::ns_transport_manager::CTransportAdapter::stopConnection() for each of them.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_handling_communication Handling communication
  *
  * All frames requested to be sent via ns_smart_device_link::ns_transport_manager::CTransportAdapter::sendFrame() are stored in
  * ns_smart_device_link::ns_transport_manager::CTransportAdapter::SConnection::mFramesToSend. Pipe
  * ns_smart_device_link::ns_transport_manager::CTransportAdapter::SConnection::mNotificationPipeFds is used by
  * ns_smart_device_link::ns_transport_manager::CTransportAdapter::sendFrame() to notify connection thread that data is available
  * to be sent. ns_smart_device_link::ns_transport_manager::CTransportAdapter::sendFrame() writes one byte to the write end of this pipe.
  * ns_smart_device_link::ns_transport_manager::CTransportAdapter::handleCommunication() uses poll() to wait for
  * incoming data using connection socket file descriptor and outgoing data using file descriptor of the read end of this pipe.
  * When either of them become available for reading or some error occurs (e.g. socket gets disconnected) connection thread
  * wakes up and handles this event. Notification pipe is also used to notify connection thread that connection has to be
  * terminated using ns_smart_device_link::ns_transport_manager::CTransportAdapter::SConnection::mTerminateFlag.
  *
  * @subsection components_transportmanager_internal_design_transport_adapters_common_update_client_device_list Updating client device list.
  *
  * Specific device adapter may call ns_smart_device_link::ns_transport_manager::CTransportAdapter::updateClientDeviceList() when its internal
  * knowledge about available devices is updated to notify device adapter client (TransportManager) about this update.
  *
  * @section components_transportmanager_internal_design_transport_adapters_common_specific Specific device adapters
  *
  * Current TransportManager implementation contains following device adapters:
  *
  * - @subpage components_transportmanager_internal_design_transport_adapters_bluetooth_adapter "Bluetooth Adapter"
  * - @subpage components_transportmanager_internal_design_transport_adapters_tcp_adapter "TCP Adapter"
  */
